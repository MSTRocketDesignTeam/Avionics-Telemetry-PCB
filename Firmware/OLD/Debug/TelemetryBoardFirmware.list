
TelemetryBoardFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008df8  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08008fec  08008fec  00018fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009084  08009084  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009084  08009084  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009084  08009084  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009084  08009084  00019084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009088  08009088  00019088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800908c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b80  20000184  08009210  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d04  08009210  00021d04  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d8f1  00000000  00000000  000201ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d51  00000000  00000000  0003daab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00041800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  00042b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002be3b  00000000  00000000  00043ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018066  00000000  00000000  0006fae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105a7e  00000000  00000000  00087b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018d5c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dec  00000000  00000000  0018d61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000184 	.word	0x20000184
 8000210:	00000000 	.word	0x00000000
 8000214:	08008fd4 	.word	0x08008fd4

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000188 	.word	0x20000188
 8000230:	08008fd4 	.word	0x08008fd4

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fc17 	bl	8000a6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f80f 	bl	800025e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f95c 	bl	80004fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000244:	f000 f856 	bl	80002f4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000248:	f000 f89e 	bl	8000388 <MX_SPI1_Init>
  MX_SPI2_Init();
 800024c:	f000 f8da 	bl	8000404 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000250:	f000 f916 	bl	8000480 <MX_SPI3_Init>
  MX_USB_Device_Init();
 8000254:	f008 f96e 	bl	8008534 <MX_USB_Device_Init>
  MX_ICACHE_Init();
 8000258:	f000 f88a 	bl	8000370 <MX_ICACHE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800025c:	e7fe      	b.n	800025c <main+0x28>

0800025e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025e:	b580      	push	{r7, lr}
 8000260:	b098      	sub	sp, #96	; 0x60
 8000262:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000264:	f107 0318 	add.w	r3, r7, #24
 8000268:	2248      	movs	r2, #72	; 0x48
 800026a:	2100      	movs	r1, #0
 800026c:	4618      	mov	r0, r3
 800026e:	f008 fea9 	bl	8008fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]
 800027c:	60da      	str	r2, [r3, #12]
 800027e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000280:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000284:	f002 fcd0 	bl	8002c28 <HAL_PWREx_ControlVoltageScaling>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800028e:	f000 f971 	bl	8000574 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000292:	2314      	movs	r3, #20
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_BYPASS;
 8000296:	2385      	movs	r3, #133	; 0x85
 8000298:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800029a:	2301      	movs	r3, #1
 800029c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800029e:	2300      	movs	r3, #0
 80002a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002a2:	2360      	movs	r3, #96	; 0x60
 80002a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a6:	2300      	movs	r3, #0
 80002a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 0318 	add.w	r3, r7, #24
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fd5a 	bl	8002d68 <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x60>
  {
    Error_Handler();
 80002ba:	f000 f95b 	bl	8000574 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f003 fa28 	bl	800372c <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002e2:	f000 f947 	bl	8000574 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80002e6:	f004 f85d 	bl	80043a4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80002ea:	bf00      	nop
 80002ec:	3760      	adds	r7, #96	; 0x60
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002f8:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <MX_I2C1_Init+0x74>)
 80002fa:	4a1c      	ldr	r2, [pc, #112]	; (800036c <MX_I2C1_Init+0x78>)
 80002fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80002fe:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <MX_I2C1_Init+0x74>)
 8000300:	f640 6214 	movw	r2, #3604	; 0xe14
 8000304:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000306:	4b18      	ldr	r3, [pc, #96]	; (8000368 <MX_I2C1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800030c:	4b16      	ldr	r3, [pc, #88]	; (8000368 <MX_I2C1_Init+0x74>)
 800030e:	2201      	movs	r2, #1
 8000310:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000312:	4b15      	ldr	r3, [pc, #84]	; (8000368 <MX_I2C1_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000318:	4b13      	ldr	r3, [pc, #76]	; (8000368 <MX_I2C1_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800031e:	4b12      	ldr	r3, [pc, #72]	; (8000368 <MX_I2C1_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <MX_I2C1_Init+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <MX_I2C1_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000330:	480d      	ldr	r0, [pc, #52]	; (8000368 <MX_I2C1_Init+0x74>)
 8000332:	f000 fea1 	bl	8001078 <HAL_I2C_Init>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800033c:	f000 f91a 	bl	8000574 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000340:	2100      	movs	r1, #0
 8000342:	4809      	ldr	r0, [pc, #36]	; (8000368 <MX_I2C1_Init+0x74>)
 8000344:	f000 ff27 	bl	8001196 <HAL_I2CEx_ConfigAnalogFilter>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800034e:	f000 f911 	bl	8000574 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000352:	2100      	movs	r1, #0
 8000354:	4804      	ldr	r0, [pc, #16]	; (8000368 <MX_I2C1_Init+0x74>)
 8000356:	f000 ff69 	bl	800122c <HAL_I2CEx_ConfigDigitalFilter>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000360:	f000 f908 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20000428 	.word	0x20000428
 800036c:	40005400 	.word	0x40005400

08000370 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_Init 1 */

  /* USER CODE END ICACHE_Init 1 */
  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000374:	f000 ffa6 	bl	80012c4 <HAL_ICACHE_Enable>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 800037e:	f000 f8f9 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800038c:	4b1b      	ldr	r3, [pc, #108]	; (80003fc <MX_SPI1_Init+0x74>)
 800038e:	4a1c      	ldr	r2, [pc, #112]	; (8000400 <MX_SPI1_Init+0x78>)
 8000390:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000392:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <MX_SPI1_Init+0x74>)
 8000394:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000398:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800039a:	4b18      	ldr	r3, [pc, #96]	; (80003fc <MX_SPI1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003a0:	4b16      	ldr	r3, [pc, #88]	; (80003fc <MX_SPI1_Init+0x74>)
 80003a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003a8:	4b14      	ldr	r3, [pc, #80]	; (80003fc <MX_SPI1_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <MX_SPI1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003b4:	4b11      	ldr	r3, [pc, #68]	; (80003fc <MX_SPI1_Init+0x74>)
 80003b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MX_SPI1_Init+0x74>)
 80003be:	2200      	movs	r2, #0
 80003c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <MX_SPI1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_SPI1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <MX_SPI1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_SPI1_Init+0x74>)
 80003d6:	2207      	movs	r2, #7
 80003d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <MX_SPI1_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_SPI1_Init+0x74>)
 80003e2:	2208      	movs	r2, #8
 80003e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <MX_SPI1_Init+0x74>)
 80003e8:	f004 f97e 	bl	80046e8 <HAL_SPI_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003f2:	f000 f8bf 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	200004d8 	.word	0x200004d8
 8000400:	40013000 	.word	0x40013000

08000404 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <MX_SPI2_Init+0x74>)
 800040a:	4a1c      	ldr	r2, [pc, #112]	; (800047c <MX_SPI2_Init+0x78>)
 800040c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800040e:	4b1a      	ldr	r3, [pc, #104]	; (8000478 <MX_SPI2_Init+0x74>)
 8000410:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000414:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000416:	4b18      	ldr	r3, [pc, #96]	; (8000478 <MX_SPI2_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <MX_SPI2_Init+0x74>)
 800041e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000422:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_SPI2_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800042a:	4b13      	ldr	r3, [pc, #76]	; (8000478 <MX_SPI2_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_SPI2_Init+0x74>)
 8000432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000436:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_SPI2_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_SPI2_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_SPI2_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <MX_SPI2_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_SPI2_Init+0x74>)
 8000452:	2207      	movs	r2, #7
 8000454:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <MX_SPI2_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_SPI2_Init+0x74>)
 800045e:	2208      	movs	r2, #8
 8000460:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <MX_SPI2_Init+0x74>)
 8000464:	f004 f940 	bl	80046e8 <HAL_SPI_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800046e:	f000 f881 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	200003c4 	.word	0x200003c4
 800047c:	40003800 	.word	0x40003800

08000480 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <MX_SPI3_Init+0x74>)
 8000486:	4a1c      	ldr	r2, [pc, #112]	; (80004f8 <MX_SPI3_Init+0x78>)
 8000488:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800048a:	4b1a      	ldr	r3, [pc, #104]	; (80004f4 <MX_SPI3_Init+0x74>)
 800048c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000490:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000492:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <MX_SPI3_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <MX_SPI3_Init+0x74>)
 800049a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800049e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004a0:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <MX_SPI3_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004a6:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <MX_SPI3_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <MX_SPI3_Init+0x74>)
 80004ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <MX_SPI3_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <MX_SPI3_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MX_SPI3_Init+0x74>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <MX_SPI3_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <MX_SPI3_Init+0x74>)
 80004ce:	2207      	movs	r2, #7
 80004d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <MX_SPI3_Init+0x74>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_SPI3_Init+0x74>)
 80004da:	2208      	movs	r2, #8
 80004dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <MX_SPI3_Init+0x74>)
 80004e0:	f004 f902 	bl	80046e8 <HAL_SPI_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80004ea:	f000 f843 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000474 	.word	0x20000474
 80004f8:	40003c00 	.word	0x40003c00

080004fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000502:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <MX_GPIO_Init+0x74>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	4a1a      	ldr	r2, [pc, #104]	; (8000570 <MX_GPIO_Init+0x74>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050e:	4b18      	ldr	r3, [pc, #96]	; (8000570 <MX_GPIO_Init+0x74>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_GPIO_Init+0x74>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	4a14      	ldr	r2, [pc, #80]	; (8000570 <MX_GPIO_Init+0x74>)
 8000520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <MX_GPIO_Init+0x74>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_GPIO_Init+0x74>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <MX_GPIO_Init+0x74>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <MX_GPIO_Init+0x74>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <MX_GPIO_Init+0x74>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	4a08      	ldr	r2, [pc, #32]	; (8000570 <MX_GPIO_Init+0x74>)
 8000550:	f043 0302 	orr.w	r3, r3, #2
 8000554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <MX_GPIO_Init+0x74>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	f003 0302 	and.w	r3, r3, #2
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]

}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
}
 800057a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800057c:	e7fe      	b.n	800057c <Error_Handler+0x8>
	...

08000580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_MspInit+0x44>)
 8000588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800058a:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <HAL_MspInit+0x44>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6613      	str	r3, [r2, #96]	; 0x60
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <HAL_MspInit+0x44>)
 8000594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_MspInit+0x44>)
 80005a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005a2:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <HAL_MspInit+0x44>)
 80005a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a8:	6593      	str	r3, [r2, #88]	; 0x58
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_MspInit+0x44>)
 80005ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005b6:	f002 fba3 	bl	8002d00 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000

080005c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b0ae      	sub	sp, #184	; 0xb8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	2294      	movs	r2, #148	; 0x94
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f008 fceb 	bl	8008fc4 <memset>
  if(hi2c->Instance==I2C1)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a21      	ldr	r2, [pc, #132]	; (8000678 <HAL_I2C_MspInit+0xb0>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d13a      	bne.n	800066e <HAL_I2C_MspInit+0xa6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005f8:	2340      	movs	r3, #64	; 0x40
 80005fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4618      	mov	r0, r3
 8000606:	f003 fb49 	bl	8003c9c <HAL_RCCEx_PeriphCLKConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000610:	f7ff ffb0 	bl	8000574 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <HAL_I2C_MspInit+0xb4>)
 8000616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000618:	4a18      	ldr	r2, [pc, #96]	; (800067c <HAL_I2C_MspInit+0xb4>)
 800061a:	f043 0302 	orr.w	r3, r3, #2
 800061e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <HAL_I2C_MspInit+0xb4>)
 8000622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000624:	f003 0302 	and.w	r3, r3, #2
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800062c:	23c0      	movs	r3, #192	; 0xc0
 800062e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000632:	2312      	movs	r3, #18
 8000634:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000644:	2304      	movs	r3, #4
 8000646:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800064e:	4619      	mov	r1, r3
 8000650:	480b      	ldr	r0, [pc, #44]	; (8000680 <HAL_I2C_MspInit+0xb8>)
 8000652:	f000 fb91 	bl	8000d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_I2C_MspInit+0xb4>)
 8000658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800065a:	4a08      	ldr	r2, [pc, #32]	; (800067c <HAL_I2C_MspInit+0xb4>)
 800065c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000660:	6593      	str	r3, [r2, #88]	; 0x58
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_I2C_MspInit+0xb4>)
 8000664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800066e:	bf00      	nop
 8000670:	37b8      	adds	r7, #184	; 0xb8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40005400 	.word	0x40005400
 800067c:	40021000 	.word	0x40021000
 8000680:	42020400 	.word	0x42020400

08000684 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08e      	sub	sp, #56	; 0x38
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a5c      	ldr	r2, [pc, #368]	; (8000814 <HAL_SPI_MspInit+0x190>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d128      	bne.n	80006f8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006a6:	4b5c      	ldr	r3, [pc, #368]	; (8000818 <HAL_SPI_MspInit+0x194>)
 80006a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006aa:	4a5b      	ldr	r2, [pc, #364]	; (8000818 <HAL_SPI_MspInit+0x194>)
 80006ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006b0:	6613      	str	r3, [r2, #96]	; 0x60
 80006b2:	4b59      	ldr	r3, [pc, #356]	; (8000818 <HAL_SPI_MspInit+0x194>)
 80006b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006ba:	623b      	str	r3, [r7, #32]
 80006bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b56      	ldr	r3, [pc, #344]	; (8000818 <HAL_SPI_MspInit+0x194>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a55      	ldr	r2, [pc, #340]	; (8000818 <HAL_SPI_MspInit+0x194>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b53      	ldr	r3, [pc, #332]	; (8000818 <HAL_SPI_MspInit+0x194>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	61fb      	str	r3, [r7, #28]
 80006d4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80006d6:	23c2      	movs	r3, #194	; 0xc2
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	2302      	movs	r3, #2
 80006dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006e6:	2305      	movs	r3, #5
 80006e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ee:	4619      	mov	r1, r3
 80006f0:	484a      	ldr	r0, [pc, #296]	; (800081c <HAL_SPI_MspInit+0x198>)
 80006f2:	f000 fb41 	bl	8000d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80006f6:	e088      	b.n	800080a <HAL_SPI_MspInit+0x186>
  else if(hspi->Instance==SPI2)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a48      	ldr	r2, [pc, #288]	; (8000820 <HAL_SPI_MspInit+0x19c>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d155      	bne.n	80007ae <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000702:	4b45      	ldr	r3, [pc, #276]	; (8000818 <HAL_SPI_MspInit+0x194>)
 8000704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000706:	4a44      	ldr	r2, [pc, #272]	; (8000818 <HAL_SPI_MspInit+0x194>)
 8000708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070c:	6593      	str	r3, [r2, #88]	; 0x58
 800070e:	4b42      	ldr	r3, [pc, #264]	; (8000818 <HAL_SPI_MspInit+0x194>)
 8000710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000716:	61bb      	str	r3, [r7, #24]
 8000718:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b3f      	ldr	r3, [pc, #252]	; (8000818 <HAL_SPI_MspInit+0x194>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a3e      	ldr	r2, [pc, #248]	; (8000818 <HAL_SPI_MspInit+0x194>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b3c      	ldr	r3, [pc, #240]	; (8000818 <HAL_SPI_MspInit+0x194>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b39      	ldr	r3, [pc, #228]	; (8000818 <HAL_SPI_MspInit+0x194>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a38      	ldr	r2, [pc, #224]	; (8000818 <HAL_SPI_MspInit+0x194>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b36      	ldr	r3, [pc, #216]	; (8000818 <HAL_SPI_MspInit+0x194>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800074a:	2302      	movs	r3, #2
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	2302      	movs	r3, #2
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800075a:	2303      	movs	r3, #3
 800075c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000762:	4619      	mov	r1, r3
 8000764:	482f      	ldr	r0, [pc, #188]	; (8000824 <HAL_SPI_MspInit+0x1a0>)
 8000766:	f000 fb07 	bl	8000d78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800076a:	2304      	movs	r3, #4
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800077a:	2305      	movs	r3, #5
 800077c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	4619      	mov	r1, r3
 8000784:	4827      	ldr	r0, [pc, #156]	; (8000824 <HAL_SPI_MspInit+0x1a0>)
 8000786:	f000 faf7 	bl	8000d78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800078a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800079c:	2305      	movs	r3, #5
 800079e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a4:	4619      	mov	r1, r3
 80007a6:	4820      	ldr	r0, [pc, #128]	; (8000828 <HAL_SPI_MspInit+0x1a4>)
 80007a8:	f000 fae6 	bl	8000d78 <HAL_GPIO_Init>
}
 80007ac:	e02d      	b.n	800080a <HAL_SPI_MspInit+0x186>
  else if(hspi->Instance==SPI3)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a1e      	ldr	r2, [pc, #120]	; (800082c <HAL_SPI_MspInit+0x1a8>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d128      	bne.n	800080a <HAL_SPI_MspInit+0x186>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <HAL_SPI_MspInit+0x194>)
 80007ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007bc:	4a16      	ldr	r2, [pc, #88]	; (8000818 <HAL_SPI_MspInit+0x194>)
 80007be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007c2:	6593      	str	r3, [r2, #88]	; 0x58
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <HAL_SPI_MspInit+0x194>)
 80007c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_SPI_MspInit+0x194>)
 80007d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d4:	4a10      	ldr	r2, [pc, #64]	; (8000818 <HAL_SPI_MspInit+0x194>)
 80007d6:	f043 0304 	orr.w	r3, r3, #4
 80007da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <HAL_SPI_MspInit+0x194>)
 80007de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e0:	f003 0304 	and.w	r3, r3, #4
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80007e8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007fa:	2306      	movs	r3, #6
 80007fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000802:	4619      	mov	r1, r3
 8000804:	4807      	ldr	r0, [pc, #28]	; (8000824 <HAL_SPI_MspInit+0x1a0>)
 8000806:	f000 fab7 	bl	8000d78 <HAL_GPIO_Init>
}
 800080a:	bf00      	nop
 800080c:	3738      	adds	r7, #56	; 0x38
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40013000 	.word	0x40013000
 8000818:	40021000 	.word	0x40021000
 800081c:	42020000 	.word	0x42020000
 8000820:	40003800 	.word	0x40003800
 8000824:	42020800 	.word	0x42020800
 8000828:	42020400 	.word	0x42020400
 800082c:	40003c00 	.word	0x40003c00

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <NMI_Handler+0x4>

08000836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <MemManage_Handler+0x4>

08000842 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <UsageFault_Handler+0x4>

0800084e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087c:	f000 f94c 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <USB_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt / USB FS wake-up interrupt through EXTI line 34.
  */
void USB_FS_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_FS_IRQn 0 */

  /* USER CODE END USB_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <USB_FS_IRQHandler+0x10>)
 800088a:	f000 fe32 	bl	80014f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_FS_IRQn 1 */

  /* USER CODE END USB_FS_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20001a10 	.word	0x20001a10

08000898 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <SystemInit+0x20>)
 800089e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008a2:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <SystemInit+0x20>)
 80008a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b087      	sub	sp, #28
 80008c0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80008c2:	4b4f      	ldr	r3, [pc, #316]	; (8000a00 <SystemCoreClockUpdate+0x144>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d107      	bne.n	80008de <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80008ce:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <SystemCoreClockUpdate+0x144>)
 80008d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008d4:	0a1b      	lsrs	r3, r3, #8
 80008d6:	f003 030f 	and.w	r3, r3, #15
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	e005      	b.n	80008ea <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80008de:	4b48      	ldr	r3, [pc, #288]	; (8000a00 <SystemCoreClockUpdate+0x144>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	091b      	lsrs	r3, r3, #4
 80008e4:	f003 030f 	and.w	r3, r3, #15
 80008e8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80008ea:	4a46      	ldr	r2, [pc, #280]	; (8000a04 <SystemCoreClockUpdate+0x148>)
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80008f4:	4b42      	ldr	r3, [pc, #264]	; (8000a00 <SystemCoreClockUpdate+0x144>)
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	f003 030c 	and.w	r3, r3, #12
 80008fc:	2b0c      	cmp	r3, #12
 80008fe:	d866      	bhi.n	80009ce <SystemCoreClockUpdate+0x112>
 8000900:	a201      	add	r2, pc, #4	; (adr r2, 8000908 <SystemCoreClockUpdate+0x4c>)
 8000902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000906:	bf00      	nop
 8000908:	0800093d 	.word	0x0800093d
 800090c:	080009cf 	.word	0x080009cf
 8000910:	080009cf 	.word	0x080009cf
 8000914:	080009cf 	.word	0x080009cf
 8000918:	08000945 	.word	0x08000945
 800091c:	080009cf 	.word	0x080009cf
 8000920:	080009cf 	.word	0x080009cf
 8000924:	080009cf 	.word	0x080009cf
 8000928:	0800094d 	.word	0x0800094d
 800092c:	080009cf 	.word	0x080009cf
 8000930:	080009cf 	.word	0x080009cf
 8000934:	080009cf 	.word	0x080009cf
 8000938:	08000955 	.word	0x08000955
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800093c:	4a32      	ldr	r2, [pc, #200]	; (8000a08 <SystemCoreClockUpdate+0x14c>)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	6013      	str	r3, [r2, #0]
      break;
 8000942:	e048      	b.n	80009d6 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000944:	4b30      	ldr	r3, [pc, #192]	; (8000a08 <SystemCoreClockUpdate+0x14c>)
 8000946:	4a31      	ldr	r2, [pc, #196]	; (8000a0c <SystemCoreClockUpdate+0x150>)
 8000948:	601a      	str	r2, [r3, #0]
      break;
 800094a:	e044      	b.n	80009d6 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800094c:	4b2e      	ldr	r3, [pc, #184]	; (8000a08 <SystemCoreClockUpdate+0x14c>)
 800094e:	4a30      	ldr	r2, [pc, #192]	; (8000a10 <SystemCoreClockUpdate+0x154>)
 8000950:	601a      	str	r2, [r3, #0]
      break;
 8000952:	e040      	b.n	80009d6 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000954:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <SystemCoreClockUpdate+0x144>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	f003 0303 	and.w	r3, r3, #3
 800095c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800095e:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <SystemCoreClockUpdate+0x144>)
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	091b      	lsrs	r3, r3, #4
 8000964:	f003 030f 	and.w	r3, r3, #15
 8000968:	3301      	adds	r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2b02      	cmp	r3, #2
 8000970:	d003      	beq.n	800097a <SystemCoreClockUpdate+0xbe>
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	2b03      	cmp	r3, #3
 8000976:	d006      	beq.n	8000986 <SystemCoreClockUpdate+0xca>
 8000978:	e00b      	b.n	8000992 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800097a:	4a24      	ldr	r2, [pc, #144]	; (8000a0c <SystemCoreClockUpdate+0x150>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000982:	613b      	str	r3, [r7, #16]
          break;
 8000984:	e00b      	b.n	800099e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000986:	4a22      	ldr	r2, [pc, #136]	; (8000a10 <SystemCoreClockUpdate+0x154>)
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	fbb2 f3f3 	udiv	r3, r2, r3
 800098e:	613b      	str	r3, [r7, #16]
          break;
 8000990:	e005      	b.n	800099e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000992:	697a      	ldr	r2, [r7, #20]
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	fbb2 f3f3 	udiv	r3, r2, r3
 800099a:	613b      	str	r3, [r7, #16]
          break;
 800099c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <SystemCoreClockUpdate+0x144>)
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	0a1b      	lsrs	r3, r3, #8
 80009a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	fb02 f303 	mul.w	r3, r2, r3
 80009ae:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <SystemCoreClockUpdate+0x144>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	0e5b      	lsrs	r3, r3, #25
 80009b6:	f003 0303 	and.w	r3, r3, #3
 80009ba:	3301      	adds	r3, #1
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c8:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <SystemCoreClockUpdate+0x14c>)
 80009ca:	6013      	str	r3, [r2, #0]
      break;
 80009cc:	e003      	b.n	80009d6 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80009ce:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <SystemCoreClockUpdate+0x14c>)
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	6013      	str	r3, [r2, #0]
      break;
 80009d4:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <SystemCoreClockUpdate+0x144>)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	091b      	lsrs	r3, r3, #4
 80009dc:	f003 030f 	and.w	r3, r3, #15
 80009e0:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <SystemCoreClockUpdate+0x158>)
 80009e2:	5cd3      	ldrb	r3, [r2, r3]
 80009e4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <SystemCoreClockUpdate+0x14c>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	fa22 f303 	lsr.w	r3, r2, r3
 80009f0:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <SystemCoreClockUpdate+0x14c>)
 80009f2:	6013      	str	r3, [r2, #0]
}
 80009f4:	bf00      	nop
 80009f6:	371c      	adds	r7, #28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	40021000 	.word	0x40021000
 8000a04:	08009044 	.word	0x08009044
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	00f42400 	.word	0x00f42400
 8000a10:	01e84800 	.word	0x01e84800
 8000a14:	08009034 	.word	0x08009034

08000a18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a1c:	f7ff ff3c 	bl	8000898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a22:	e003      	b.n	8000a2c <LoopCopyDataInit>

08000a24 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a26:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a28:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a2a:	3104      	adds	r1, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a2c:	480a      	ldr	r0, [pc, #40]	; (8000a58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a30:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a32:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a34:	d3f6      	bcc.n	8000a24 <CopyDataInit>
	ldr	r2, =_sbss
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a38:	e002      	b.n	8000a40 <LoopFillZerobss>

08000a3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a3a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a3c:	f842 3b04 	str.w	r3, [r2], #4

08000a40 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <LoopForever+0x16>)
	cmp	r2, r3
 8000a42:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a44:	d3f9      	bcc.n	8000a3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a46:	f008 fa99 	bl	8008f7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a4a:	f7ff fbf3 	bl	8000234 <main>

08000a4e <LoopForever>:

LoopForever:
    b LoopForever
 8000a4e:	e7fe      	b.n	8000a4e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000a50:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8000a54:	0800908c 	.word	0x0800908c
	ldr	r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a5c:	20000184 	.word	0x20000184
	ldr	r2, =_sbss
 8000a60:	20000184 	.word	0x20000184
	ldr	r3, = _ebss
 8000a64:	20001d04 	.word	0x20001d04

08000a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC1_2_IRQHandler>

08000a6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000a74:	2004      	movs	r0, #4
 8000a76:	f000 f93f 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000a7a:	f7ff ff1f 	bl	80008bc <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a7e:	2007      	movs	r0, #7
 8000a80:	f000 f80e 	bl	8000aa0 <HAL_InitTick>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d002      	beq.n	8000a90 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	71fb      	strb	r3, [r7, #7]
 8000a8e:	e001      	b.n	8000a94 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a90:	f7ff fd76 	bl	8000580 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a94:	79fb      	ldrb	r3, [r7, #7]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <HAL_InitTick+0x6c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d023      	beq.n	8000afc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <HAL_InitTick+0x70>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <HAL_InitTick+0x6c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f947 	bl	8000d5e <HAL_SYSTICK_Config>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d10f      	bne.n	8000af6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b07      	cmp	r3, #7
 8000ada:	d809      	bhi.n	8000af0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000adc:	2200      	movs	r2, #0
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	f000 f913 	bl	8000d0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <HAL_InitTick+0x74>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	e007      	b.n	8000b00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	73fb      	strb	r3, [r7, #15]
 8000af4:	e004      	b.n	8000b00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	73fb      	strb	r3, [r7, #15]
 8000afa:	e001      	b.n	8000b00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x20>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_IncTick+0x24>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	2000053c 	.word	0x2000053c

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	2000053c 	.word	0x2000053c

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db0b      	blt.n	8000be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 021f 	and.w	r2, r3, #31
 8000bd4:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <__NVIC_EnableIRQ+0x38>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	2001      	movs	r0, #1
 8000bde:	fa00 f202 	lsl.w	r2, r0, r2
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	; (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0152      	lsls	r2, r2, #5
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	; (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0152      	lsls	r2, r2, #5
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	bf28      	it	cs
 8000c6a:	2303      	movcs	r3, #3
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3303      	adds	r3, #3
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b04      	subs	r3, #4
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	; 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	2107      	movs	r1, #7
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f7ff ff8e 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff29 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1c:	f7ff ff40 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000d20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f7ff ff90 	bl	8000c4c <NVIC_EncodePriority>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff5f 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff33 	bl	8000bbc <__NVIC_EnableIRQ>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffa4 	bl	8000cb4 <SysTick_Config>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b087      	sub	sp, #28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d86:	e158      	b.n	800103a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	fa01 f303 	lsl.w	r3, r1, r3
 8000d94:	4013      	ands	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 814a 	beq.w	8001034 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d00b      	beq.n	8000dc0 <HAL_GPIO_Init+0x48>
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d007      	beq.n	8000dc0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db4:	2b11      	cmp	r3, #17
 8000db6:	d003      	beq.n	8000dc0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b12      	cmp	r3, #18
 8000dbe:	d130      	bne.n	8000e22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000df6:	2201      	movs	r2, #1
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	091b      	lsrs	r3, r3, #4
 8000e0c:	f003 0201 	and.w	r2, r3, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0xea>
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b12      	cmp	r3, #18
 8000e60:	d123      	bne.n	8000eaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	08da      	lsrs	r2, r3, #3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3208      	adds	r2, #8
 8000e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	691a      	ldr	r2, [r3, #16]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	6939      	ldr	r1, [r7, #16]
 8000ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0203 	and.w	r2, r3, #3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 80a4 	beq.w	8001034 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000eec:	4a5a      	ldr	r2, [pc, #360]	; (8001058 <HAL_GPIO_Init+0x2e0>)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3318      	adds	r3, #24
 8000ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	220f      	movs	r2, #15
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a52      	ldr	r2, [pc, #328]	; (800105c <HAL_GPIO_Init+0x2e4>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d025      	beq.n	8000f64 <HAL_GPIO_Init+0x1ec>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a51      	ldr	r2, [pc, #324]	; (8001060 <HAL_GPIO_Init+0x2e8>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d01f      	beq.n	8000f60 <HAL_GPIO_Init+0x1e8>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a50      	ldr	r2, [pc, #320]	; (8001064 <HAL_GPIO_Init+0x2ec>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d019      	beq.n	8000f5c <HAL_GPIO_Init+0x1e4>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a4f      	ldr	r2, [pc, #316]	; (8001068 <HAL_GPIO_Init+0x2f0>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d013      	beq.n	8000f58 <HAL_GPIO_Init+0x1e0>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a4e      	ldr	r2, [pc, #312]	; (800106c <HAL_GPIO_Init+0x2f4>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d00d      	beq.n	8000f54 <HAL_GPIO_Init+0x1dc>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a4d      	ldr	r2, [pc, #308]	; (8001070 <HAL_GPIO_Init+0x2f8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d007      	beq.n	8000f50 <HAL_GPIO_Init+0x1d8>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a4c      	ldr	r2, [pc, #304]	; (8001074 <HAL_GPIO_Init+0x2fc>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d101      	bne.n	8000f4c <HAL_GPIO_Init+0x1d4>
 8000f48:	2306      	movs	r3, #6
 8000f4a:	e00c      	b.n	8000f66 <HAL_GPIO_Init+0x1ee>
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	e00a      	b.n	8000f66 <HAL_GPIO_Init+0x1ee>
 8000f50:	2305      	movs	r3, #5
 8000f52:	e008      	b.n	8000f66 <HAL_GPIO_Init+0x1ee>
 8000f54:	2304      	movs	r3, #4
 8000f56:	e006      	b.n	8000f66 <HAL_GPIO_Init+0x1ee>
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e004      	b.n	8000f66 <HAL_GPIO_Init+0x1ee>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e002      	b.n	8000f66 <HAL_GPIO_Init+0x1ee>
 8000f60:	2301      	movs	r3, #1
 8000f62:	e000      	b.n	8000f66 <HAL_GPIO_Init+0x1ee>
 8000f64:	2300      	movs	r3, #0
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	f002 0203 	and.w	r2, r2, #3
 8000f6c:	00d2      	lsls	r2, r2, #3
 8000f6e:	4093      	lsls	r3, r2
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000f76:	4938      	ldr	r1, [pc, #224]	; (8001058 <HAL_GPIO_Init+0x2e0>)
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	3318      	adds	r3, #24
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f84:	4b34      	ldr	r3, [pc, #208]	; (8001058 <HAL_GPIO_Init+0x2e0>)
 8000f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000faa:	4a2b      	ldr	r2, [pc, #172]	; (8001058 <HAL_GPIO_Init+0x2e0>)
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000fb2:	4b29      	ldr	r3, [pc, #164]	; (8001058 <HAL_GPIO_Init+0x2e0>)
 8000fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fd8:	4a1f      	ldr	r2, [pc, #124]	; (8001058 <HAL_GPIO_Init+0x2e0>)
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <HAL_GPIO_Init+0x2e0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001004:	4a14      	ldr	r2, [pc, #80]	; (8001058 <HAL_GPIO_Init+0x2e0>)
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <HAL_GPIO_Init+0x2e0>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <HAL_GPIO_Init+0x2e0>)
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3301      	adds	r3, #1
 8001038:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	fa22 f303 	lsr.w	r3, r2, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	f47f ae9f 	bne.w	8000d88 <HAL_GPIO_Init+0x10>
  }
}
 800104a:	bf00      	nop
 800104c:	bf00      	nop
 800104e:	371c      	adds	r7, #28
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	4002f400 	.word	0x4002f400
 800105c:	42020000 	.word	0x42020000
 8001060:	42020400 	.word	0x42020400
 8001064:	42020800 	.word	0x42020800
 8001068:	42020c00 	.word	0x42020c00
 800106c:	42021000 	.word	0x42021000
 8001070:	42021400 	.word	0x42021400
 8001074:	42021800 	.word	0x42021800

08001078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e081      	b.n	800118e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d106      	bne.n	80010a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff fa92 	bl	80005c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2224      	movs	r2, #36	; 0x24
 80010a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0201 	bic.w	r2, r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d107      	bne.n	80010f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	e006      	b.n	8001100 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80010fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d104      	bne.n	8001112 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001110:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001124:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001134:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	691a      	ldr	r2, [r3, #16]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	ea42 0103 	orr.w	r1, r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	021a      	lsls	r2, r3, #8
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	430a      	orrs	r2, r1
 800114e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69d9      	ldr	r1, [r3, #28]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a1a      	ldr	r2, [r3, #32]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	430a      	orrs	r2, r1
 800115e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f042 0201 	orr.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2220      	movs	r2, #32
 800117a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b20      	cmp	r3, #32
 80011aa:	d138      	bne.n	800121e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d101      	bne.n	80011ba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e032      	b.n	8001220 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2224      	movs	r2, #36	; 0x24
 80011c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 0201 	bic.w	r2, r2, #1
 80011d8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011e8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6819      	ldr	r1, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f042 0201 	orr.w	r2, r2, #1
 8001208:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2220      	movs	r2, #32
 800120e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e000      	b.n	8001220 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800121e:	2302      	movs	r3, #2
  }
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b20      	cmp	r3, #32
 8001240:	d139      	bne.n	80012b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001248:	2b01      	cmp	r3, #1
 800124a:	d101      	bne.n	8001250 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800124c:	2302      	movs	r3, #2
 800124e:	e033      	b.n	80012b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2224      	movs	r2, #36	; 0x24
 800125c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800127e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f042 0201 	orr.w	r2, r2, #1
 80012a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2220      	movs	r2, #32
 80012a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80012b6:	2302      	movs	r3, #2
  }
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_ICACHE_Enable+0x1c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_ICACHE_Enable+0x1c>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	40030400 	.word	0x40030400

080012e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	b08b      	sub	sp, #44	; 0x2c
 80012e8:	af06      	add	r7, sp, #24
 80012ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e0d7      	b.n	80014a6 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d106      	bne.n	8001310 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f007 faf2 	bl	80088f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2203      	movs	r2, #3
 8001314:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f003 fa9d 	bl	800485c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	e04c      	b.n	80013c2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	1c5a      	adds	r2, r3, #1
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	440b      	add	r3, r1
 8001338:	3301      	adds	r3, #1
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	440b      	add	r3, r1
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001352:	7bfa      	ldrb	r2, [r7, #15]
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	b298      	uxth	r0, r3
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	440b      	add	r3, r1
 8001364:	3336      	adds	r3, #54	; 0x36
 8001366:	4602      	mov	r2, r0
 8001368:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	440b      	add	r3, r1
 800137a:	3303      	adds	r3, #3
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001380:	7bfa      	ldrb	r2, [r7, #15]
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	440b      	add	r3, r1
 800138e:	3338      	adds	r3, #56	; 0x38
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	440b      	add	r3, r1
 80013a2:	333c      	adds	r3, #60	; 0x3c
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	3340      	adds	r3, #64	; 0x40
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	3301      	adds	r3, #1
 80013c0:	73fb      	strb	r3, [r7, #15]
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d3ad      	bcc.n	8001328 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	e044      	b.n	800145c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013d2:	7bfa      	ldrb	r2, [r7, #15]
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	440b      	add	r3, r1
 80013e0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013e8:	7bfa      	ldrb	r2, [r7, #15]
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	440b      	add	r3, r1
 80013f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013fe:	7bfa      	ldrb	r2, [r7, #15]
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	440b      	add	r3, r1
 800140c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800142a:	7bfa      	ldrb	r2, [r7, #15]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	440b      	add	r3, r1
 8001438:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	440b      	add	r3, r1
 800144e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	3301      	adds	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	429a      	cmp	r2, r3
 8001464:	d3b5      	bcc.n	80013d2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	687e      	ldr	r6, [r7, #4]
 800146e:	466d      	mov	r5, sp
 8001470:	f106 0410 	add.w	r4, r6, #16
 8001474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	602b      	str	r3, [r5, #0]
 800147c:	1d33      	adds	r3, r6, #4
 800147e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001480:	6838      	ldr	r0, [r7, #0]
 8001482:	f003 fa06 	bl	8004892 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d102      	bne.n	80014a4 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f001 fb8a 	bl	8002bb8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <HAL_PCD_Start+0x16>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e012      	b.n	80014ea <HAL_PCD_Start+0x3c>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 f9ac 	bl	800482e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f005 fb5f 	bl	8006b9e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f005 fb64 	bl	8006bcc <USB_ReadInterrupts>
 8001504:	4603      	mov	r3, r0
 8001506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800150a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800150e:	d102      	bne.n	8001516 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fb4d 	bl	8001bb0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f005 fb56 	bl	8006bcc <USB_ReadInterrupts>
 8001520:	4603      	mov	r3, r0
 8001522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800152a:	d112      	bne.n	8001552 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001534:	b29a      	uxth	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800153e:	b292      	uxth	r2, r2
 8001540:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f007 faa2 	bl	8008a8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800154a:	2100      	movs	r1, #0
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f91e 	bl	800178e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f005 fb38 	bl	8006bcc <USB_ReadInterrupts>
 800155c:	4603      	mov	r3, r0
 800155e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001566:	d10b      	bne.n	8001580 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001570:	b29a      	uxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800157a:	b292      	uxth	r2, r2
 800157c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f005 fb21 	bl	8006bcc <USB_ReadInterrupts>
 800158a:	4603      	mov	r3, r0
 800158c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001594:	d10b      	bne.n	80015ae <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800159e:	b29a      	uxth	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015a8:	b292      	uxth	r2, r2
 80015aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f005 fb0a 	bl	8006bcc <USB_ReadInterrupts>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015c2:	d133      	bne.n	800162c <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0204 	bic.w	r2, r2, #4
 80015d6:	b292      	uxth	r2, r2
 80015d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0208 	bic.w	r2, r2, #8
 80015ee:	b292      	uxth	r2, r2
 80015f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d107      	bne.n	800160e <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001606:	2100      	movs	r1, #0
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f007 fc37 	bl	8008e7c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f007 fa76 	bl	8008b00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800161c:	b29a      	uxth	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001626:	b292      	uxth	r2, r2
 8001628:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f005 facb 	bl	8006bcc <USB_ReadInterrupts>
 8001636:	4603      	mov	r3, r0
 8001638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800163c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001640:	d126      	bne.n	8001690 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800164a:	b29a      	uxth	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f042 0208 	orr.w	r2, r2, #8
 8001654:	b292      	uxth	r2, r2
 8001656:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001662:	b29a      	uxth	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800166c:	b292      	uxth	r2, r2
 800166e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800167a:	b29a      	uxth	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0204 	orr.w	r2, r2, #4
 8001684:	b292      	uxth	r2, r2
 8001686:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f007 fa1e 	bl	8008acc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f005 fa99 	bl	8006bcc <USB_ReadInterrupts>
 800169a:	4603      	mov	r3, r0
 800169c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a0:	2b80      	cmp	r3, #128	; 0x80
 80016a2:	d13f      	bne.n	8001724 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016b6:	b292      	uxth	r2, r2
 80016b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d12b      	bne.n	800171e <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f042 0204 	orr.w	r2, r2, #4
 80016d8:	b292      	uxth	r2, r2
 80016da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f042 0208 	orr.w	r2, r2, #8
 80016f0:	b292      	uxth	r2, r2
 80016f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001706:	b29b      	uxth	r3, r3
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001714:	2101      	movs	r1, #1
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f007 fbb0 	bl	8008e7c <HAL_PCDEx_LPM_Callback>
 800171c:	e002      	b.n	8001724 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f007 f9d4 	bl	8008acc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f005 fa4f 	bl	8006bcc <USB_ReadInterrupts>
 800172e:	4603      	mov	r3, r0
 8001730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001738:	d10e      	bne.n	8001758 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001742:	b29a      	uxth	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800174c:	b292      	uxth	r2, r2
 800174e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f007 f98d 	bl	8008a72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f005 fa35 	bl	8006bcc <USB_ReadInterrupts>
 8001762:	4603      	mov	r3, r0
 8001764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800176c:	d10b      	bne.n	8001786 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001776:	b29a      	uxth	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001780:	b292      	uxth	r2, r2
 8001782:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_PCD_SetAddress+0x1a>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e013      	b.n	80017d0 <HAL_PCD_SetAddress+0x42>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	78fa      	ldrb	r2, [r7, #3]
 80017b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	78fa      	ldrb	r2, [r7, #3]
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f005 f9d8 	bl	8006b76 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	4608      	mov	r0, r1
 80017e2:	4611      	mov	r1, r2
 80017e4:	461a      	mov	r2, r3
 80017e6:	4603      	mov	r3, r0
 80017e8:	70fb      	strb	r3, [r7, #3]
 80017ea:	460b      	mov	r3, r1
 80017ec:	803b      	strh	r3, [r7, #0]
 80017ee:	4613      	mov	r3, r2
 80017f0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	da0e      	bge.n	800181c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2201      	movs	r2, #1
 8001818:	705a      	strb	r2, [r3, #1]
 800181a:	e00e      	b.n	800183a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	f003 0207 	and.w	r2, r3, #7
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	b2da      	uxtb	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001846:	883a      	ldrh	r2, [r7, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	78ba      	ldrb	r2, [r7, #2]
 8001850:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	785b      	ldrb	r3, [r3, #1]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d004      	beq.n	8001864 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b29a      	uxth	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001864:	78bb      	ldrb	r3, [r7, #2]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d102      	bne.n	8001870 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_PCD_EP_Open+0xa6>
 800187a:	2302      	movs	r3, #2
 800187c:	e00e      	b.n	800189c <HAL_PCD_EP_Open+0xc4>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68f9      	ldr	r1, [r7, #12]
 800188c:	4618      	mov	r0, r3
 800188e:	f003 f821 	bl	80048d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800189a:	7afb      	ldrb	r3, [r7, #11]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	da0e      	bge.n	80018d6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2201      	movs	r2, #1
 80018d2:	705a      	strb	r2, [r3, #1]
 80018d4:	e00e      	b.n	80018f4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	f003 0207 	and.w	r2, r3, #7
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_PCD_EP_Close+0x6a>
 800190a:	2302      	movs	r3, #2
 800190c:	e00e      	b.n	800192c <HAL_PCD_EP_Close+0x88>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68f9      	ldr	r1, [r7, #12]
 800191c:	4618      	mov	r0, r3
 800191e:	f003 fb47 	bl	8004fb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	460b      	mov	r3, r1
 8001942:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001944:	7afb      	ldrb	r3, [r7, #11]
 8001946:	f003 0207 	and.w	r2, r3, #7
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4413      	add	r3, r2
 800195a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2200      	movs	r2, #0
 8001972:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001974:	7afb      	ldrb	r3, [r7, #11]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	b2da      	uxtb	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001980:	7afb      	ldrb	r3, [r7, #11]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	2b00      	cmp	r3, #0
 8001988:	d106      	bne.n	8001998 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6979      	ldr	r1, [r7, #20]
 8001990:	4618      	mov	r0, r3
 8001992:	f003 fcfa 	bl	800538a <USB_EPStartXfer>
 8001996:	e005      	b.n	80019a4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6979      	ldr	r1, [r7, #20]
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 fcf3 	bl	800538a <USB_EPStartXfer>
  }

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	460b      	mov	r3, r1
 80019b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	f003 0207 	and.w	r2, r3, #7
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	440b      	add	r3, r1
 80019cc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80019d0:	681b      	ldr	r3, [r3, #0]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	603b      	str	r3, [r7, #0]
 80019ea:	460b      	mov	r3, r1
 80019ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ee:	7afb      	ldrb	r3, [r7, #11]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	4413      	add	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2200      	movs	r2, #0
 8001a22:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2201      	movs	r2, #1
 8001a28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a2a:	7afb      	ldrb	r3, [r7, #11]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a36:	7afb      	ldrb	r3, [r7, #11]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d106      	bne.n	8001a4e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6979      	ldr	r1, [r7, #20]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 fc9f 	bl	800538a <USB_EPStartXfer>
 8001a4c:	e005      	b.n	8001a5a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6979      	ldr	r1, [r7, #20]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f003 fc98 	bl	800538a <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	f003 0207 	and.w	r2, r3, #7
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d901      	bls.n	8001a82 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e03e      	b.n	8001b00 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	da0e      	bge.n	8001aa8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	705a      	strb	r2, [r3, #1]
 8001aa6:	e00c      	b.n	8001ac2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001aa8:	78fa      	ldrb	r2, [r7, #3]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_PCD_EP_SetStall+0x7e>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e00e      	b.n	8001b00 <HAL_PCD_EP_SetStall+0x9c>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68f9      	ldr	r1, [r7, #12]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f004 ff41 	bl	8006978 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	f003 020f 	and.w	r2, r3, #15
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d901      	bls.n	8001b26 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e040      	b.n	8001ba8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	da0e      	bge.n	8001b4c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b2e:	78fb      	ldrb	r3, [r7, #3]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2201      	movs	r2, #1
 8001b48:	705a      	strb	r2, [r3, #1]
 8001b4a:	e00e      	b.n	8001b6a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	f003 0207 	and.w	r2, r3, #7
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_PCD_EP_ClrStall+0x82>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e00e      	b.n	8001ba8 <HAL_PCD_EP_ClrStall+0xa0>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68f9      	ldr	r1, [r7, #12]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f004 ff3e 	bl	8006a1a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08e      	sub	sp, #56	; 0x38
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001bb8:	e2d6      	b.n	8002168 <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bc2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001bc4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001bd0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f040 815b 	bne.w	8001e90 <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001bda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bdc:	f003 0310 	and.w	r3, r3, #16
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d150      	bne.n	8001c86 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bf4:	81fb      	strh	r3, [r7, #14]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	89fb      	ldrh	r3, [r7, #14]
 8001bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3328      	adds	r3, #40	; 0x28
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	441a      	add	r2, r3
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c44:	2100      	movs	r1, #0
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f006 fef9 	bl	8008a3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 8287 	beq.w	8002168 <PCD_EP_ISR_Handler+0x5b8>
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f040 8282 	bne.w	8002168 <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	b292      	uxth	r2, r2
 8001c78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c84:	e270      	b.n	8002168 <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001c96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d032      	beq.n	8001d06 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	f004 ffc8 	bl	8006c70 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cec:	4013      	ands	r3, r2
 8001cee:	823b      	strh	r3, [r7, #16]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	8a3a      	ldrh	r2, [r7, #16]
 8001cf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f006 fe70 	bl	80089e4 <HAL_PCD_SetupStageCallback>
 8001d04:	e230      	b.n	8002168 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d06:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f280 822c 	bge.w	8002168 <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	83bb      	strh	r3, [r7, #28]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	8bba      	ldrh	r2, [r7, #28]
 8001d26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d2a:	b292      	uxth	r2, r2
 8001d2c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4413      	add	r3, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6812      	ldr	r2, [r2, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d019      	beq.n	8001d92 <PCD_EP_ISR_Handler+0x1e2>
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d015      	beq.n	8001d92 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	6959      	ldr	r1, [r3, #20]
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	f004 ff7a 	bl	8006c70 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	695a      	ldr	r2, [r3, #20]
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	441a      	add	r2, r3
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f006 fe3b 	bl	8008a08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 81e2 	bne.w	8002168 <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	61bb      	str	r3, [r7, #24]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	461a      	mov	r2, r3
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	4413      	add	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d112      	bne.n	8001df2 <PCD_EP_ISR_Handler+0x242>
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	801a      	strh	r2, [r3, #0]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	801a      	strh	r2, [r3, #0]
 8001df0:	e02f      	b.n	8001e52 <PCD_EP_ISR_Handler+0x2a2>
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	2b3e      	cmp	r3, #62	; 0x3e
 8001df8:	d813      	bhi.n	8001e22 <PCD_EP_ISR_Handler+0x272>
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	085b      	lsrs	r3, r3, #1
 8001e00:	633b      	str	r3, [r7, #48]	; 0x30
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <PCD_EP_ISR_Handler+0x264>
 8001e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e10:	3301      	adds	r3, #1
 8001e12:	633b      	str	r3, [r7, #48]	; 0x30
 8001e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	029b      	lsls	r3, r3, #10
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	801a      	strh	r2, [r3, #0]
 8001e20:	e017      	b.n	8001e52 <PCD_EP_ISR_Handler+0x2a2>
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	633b      	str	r3, [r7, #48]	; 0x30
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f003 031f 	and.w	r3, r3, #31
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d102      	bne.n	8001e3c <PCD_EP_ISR_Handler+0x28c>
 8001e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
 8001e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	029b      	lsls	r3, r3, #10
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e62:	827b      	strh	r3, [r7, #18]
 8001e64:	8a7b      	ldrh	r3, [r7, #18]
 8001e66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001e6a:	827b      	strh	r3, [r7, #18]
 8001e6c:	8a7b      	ldrh	r3, [r7, #18]
 8001e6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e72:	827b      	strh	r3, [r7, #18]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	8a7b      	ldrh	r3, [r7, #18]
 8001e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	8013      	strh	r3, [r2, #0]
 8001e8e:	e16b      	b.n	8002168 <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ea2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f280 80e4 	bge.w	8002074 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	853b      	strh	r3, [r7, #40]	; 0x28
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ed6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001eda:	b292      	uxth	r2, r2
 8001edc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ede:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	7b1b      	ldrb	r3, [r3, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d120      	bne.n	8001f3e <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	4413      	add	r3, r2
 8001f16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f20:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001f22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 8083 	beq.w	8002030 <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	6959      	ldr	r1, [r3, #20]
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	88da      	ldrh	r2, [r3, #6]
 8001f36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f38:	f004 fe9a 	bl	8006c70 <USB_ReadPMA>
 8001f3c:	e078      	b.n	8002030 <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	78db      	ldrb	r3, [r3, #3]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d108      	bne.n	8001f58 <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f48:	461a      	mov	r2, r3
 8001f4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f919 	bl	8002184 <HAL_PCD_EP_DB_Receive>
 8001f52:	4603      	mov	r3, r0
 8001f54:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001f56:	e06b      	b.n	8002030 <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f72:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	441a      	add	r2, r3
 8001f82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d01f      	beq.n	8001ff2 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fd6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001fd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d028      	beq.n	8002030 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6818      	ldr	r0, [r3, #0]
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	6959      	ldr	r1, [r3, #20]
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	891a      	ldrh	r2, [r3, #8]
 8001fea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fec:	f004 fe40 	bl	8006c70 <USB_ReadPMA>
 8001ff0:	e01e      	b.n	8002030 <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	4413      	add	r3, r2
 800200c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002016:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002018:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	6959      	ldr	r1, [r3, #20]
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	895a      	ldrh	r2, [r3, #10]
 800202a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800202c:	f004 fe20 	bl	8006c70 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	69da      	ldr	r2, [r3, #28]
 8002034:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002036:	441a      	add	r2, r3
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002042:	441a      	add	r2, r3
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d004      	beq.n	800205a <PCD_EP_ISR_Handler+0x4aa>
 8002050:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	429a      	cmp	r2, r3
 8002058:	d206      	bcs.n	8002068 <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	4619      	mov	r1, r3
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f006 fcd1 	bl	8008a08 <HAL_PCD_DataOutStageCallback>
 8002066:	e005      	b.n	8002074 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800206e:	4618      	mov	r0, r3
 8002070:	f003 f98b 	bl	800538a <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002074:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207a:	2b00      	cmp	r3, #0
 800207c:	d074      	beq.n	8002168 <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 800207e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	4413      	add	r3, r2
 8002090:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80020a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ac:	843b      	strh	r3, [r7, #32]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	441a      	add	r2, r3
 80020bc:	8c3b      	ldrh	r3, [r7, #32]
 80020be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	78db      	ldrb	r3, [r3, #3]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d144      	bne.n	800215c <PCD_EP_ISR_Handler+0x5ac>
 80020d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d13f      	bne.n	800215c <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	4413      	add	r3, r2
 80020f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002100:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	8bfb      	ldrh	r3, [r7, #30]
 8002108:	429a      	cmp	r2, r3
 800210a:	d906      	bls.n	800211a <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	699a      	ldr	r2, [r3, #24]
 8002110:	8bfb      	ldrh	r3, [r7, #30]
 8002112:	1ad2      	subs	r2, r2, r3
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	619a      	str	r2, [r3, #24]
 8002118:	e002      	b.n	8002120 <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d106      	bne.n	8002136 <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	4619      	mov	r1, r3
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f006 fc85 	bl	8008a3e <HAL_PCD_DataInStageCallback>
 8002134:	e018      	b.n	8002168 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	8bfb      	ldrh	r3, [r7, #30]
 800213c:	441a      	add	r2, r3
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	69da      	ldr	r2, [r3, #28]
 8002146:	8bfb      	ldrh	r3, [r7, #30]
 8002148:	441a      	add	r2, r3
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002154:	4618      	mov	r0, r3
 8002156:	f003 f918 	bl	800538a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800215a:	e005      	b.n	8002168 <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800215c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800215e:	461a      	mov	r2, r3
 8002160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f917 	bl	8002396 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002170:	b29b      	uxth	r3, r3
 8002172:	b21b      	sxth	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	f6ff ad20 	blt.w	8001bba <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3738      	adds	r7, #56	; 0x38
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	4613      	mov	r3, r2
 8002190:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d07c      	beq.n	8002296 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	461a      	mov	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4413      	add	r3, r2
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	4413      	add	r3, r2
 80021b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	699a      	ldr	r2, [r3, #24]
 80021c6:	8b7b      	ldrh	r3, [r7, #26]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d306      	bcc.n	80021da <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	699a      	ldr	r2, [r3, #24]
 80021d0:	8b7b      	ldrh	r3, [r7, #26]
 80021d2:	1ad2      	subs	r2, r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	619a      	str	r2, [r3, #24]
 80021d8:	e002      	b.n	80021e0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d123      	bne.n	8002230 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002202:	833b      	strh	r3, [r7, #24]
 8002204:	8b3b      	ldrh	r3, [r7, #24]
 8002206:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800220a:	833b      	strh	r3, [r7, #24]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	441a      	add	r2, r3
 800221a:	8b3b      	ldrh	r3, [r7, #24]
 800221c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222c:	b29b      	uxth	r3, r3
 800222e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002236:	2b00      	cmp	r3, #0
 8002238:	d01f      	beq.n	800227a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	b29b      	uxth	r3, r3
 800224c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002254:	82fb      	strh	r3, [r7, #22]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	441a      	add	r2, r3
 8002264:	8afb      	ldrh	r3, [r7, #22]
 8002266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800226a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800226e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002272:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002276:	b29b      	uxth	r3, r3
 8002278:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800227a:	8b7b      	ldrh	r3, [r7, #26]
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 8085 	beq.w	800238c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	6959      	ldr	r1, [r3, #20]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	891a      	ldrh	r2, [r3, #8]
 800228e:	8b7b      	ldrh	r3, [r7, #26]
 8002290:	f004 fcee 	bl	8006c70 <USB_ReadPMA>
 8002294:	e07a      	b.n	800238c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800229e:	b29b      	uxth	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	699a      	ldr	r2, [r3, #24]
 80022c0:	8b7b      	ldrh	r3, [r7, #26]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d306      	bcc.n	80022d4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	699a      	ldr	r2, [r3, #24]
 80022ca:	8b7b      	ldrh	r3, [r7, #26]
 80022cc:	1ad2      	subs	r2, r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	619a      	str	r2, [r3, #24]
 80022d2:	e002      	b.n	80022da <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2200      	movs	r2, #0
 80022d8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d123      	bne.n	800232a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022fc:	83fb      	strh	r3, [r7, #30]
 80022fe:	8bfb      	ldrh	r3, [r7, #30]
 8002300:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002304:	83fb      	strh	r3, [r7, #30]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	441a      	add	r2, r3
 8002314:	8bfb      	ldrh	r3, [r7, #30]
 8002316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800231a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800231e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002326:	b29b      	uxth	r3, r3
 8002328:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002330:	2b00      	cmp	r3, #0
 8002332:	d11f      	bne.n	8002374 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800234a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800234e:	83bb      	strh	r3, [r7, #28]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	441a      	add	r2, r3
 800235e:	8bbb      	ldrh	r3, [r7, #28]
 8002360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002370:	b29b      	uxth	r3, r3
 8002372:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002374:	8b7b      	ldrh	r3, [r7, #26]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	6959      	ldr	r1, [r3, #20]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	895a      	ldrh	r2, [r3, #10]
 8002386:	8b7b      	ldrh	r3, [r7, #26]
 8002388:	f004 fc72 	bl	8006c70 <USB_ReadPMA>
    }
  }

  return count;
 800238c:	8b7b      	ldrh	r3, [r7, #26]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3720      	adds	r7, #32
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b0a2      	sub	sp, #136	; 0x88
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	4613      	mov	r3, r2
 80023a2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 81c5 	beq.w	800273a <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	4413      	add	r3, r2
 80023ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	699a      	ldr	r2, [r3, #24]
 80023dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d907      	bls.n	80023f4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	699a      	ldr	r2, [r3, #24]
 80023e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023ec:	1ad2      	subs	r2, r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	619a      	str	r2, [r3, #24]
 80023f2:	e002      	b.n	80023fa <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2200      	movs	r2, #0
 80023f8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f040 80b9 	bne.w	8002576 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	785b      	ldrb	r3, [r3, #1]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d126      	bne.n	800245a <HAL_PCD_EP_DB_Transmit+0xc4>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800241a:	b29b      	uxth	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002420:	4413      	add	r3, r2
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	00da      	lsls	r2, r3, #3
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	4413      	add	r3, r2
 800242e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	b29b      	uxth	r3, r3
 800243a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800243e:	b29a      	uxth	r2, r3
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	801a      	strh	r2, [r3, #0]
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	b29b      	uxth	r3, r3
 800244a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800244e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002452:	b29a      	uxth	r2, r3
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	801a      	strh	r2, [r3, #0]
 8002458:	e01a      	b.n	8002490 <HAL_PCD_EP_DB_Transmit+0xfa>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	785b      	ldrb	r3, [r3, #1]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d116      	bne.n	8002490 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	633b      	str	r3, [r7, #48]	; 0x30
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002470:	b29b      	uxth	r3, r3
 8002472:	461a      	mov	r2, r3
 8002474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002476:	4413      	add	r3, r2
 8002478:	633b      	str	r3, [r7, #48]	; 0x30
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	00da      	lsls	r2, r3, #3
 8002480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002482:	4413      	add	r3, r2
 8002484:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	2200      	movs	r2, #0
 800248e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	623b      	str	r3, [r7, #32]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	785b      	ldrb	r3, [r3, #1]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d126      	bne.n	80024ec <HAL_PCD_EP_DB_Transmit+0x156>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	4413      	add	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	00da      	lsls	r2, r3, #3
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	4413      	add	r3, r2
 80024c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	801a      	strh	r2, [r3, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	801a      	strh	r2, [r3, #0]
 80024ea:	e017      	b.n	800251c <HAL_PCD_EP_DB_Transmit+0x186>
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	785b      	ldrb	r3, [r3, #1]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d113      	bne.n	800251c <HAL_PCD_EP_DB_Transmit+0x186>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	4413      	add	r3, r2
 8002504:	623b      	str	r3, [r7, #32]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	00da      	lsls	r2, r3, #3
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	4413      	add	r3, r2
 8002510:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	2200      	movs	r2, #0
 800251a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4619      	mov	r1, r3
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f006 fa8b 	bl	8008a3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 82d2 	beq.w	8002ad8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	b29b      	uxth	r3, r3
 8002546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800254a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254e:	827b      	strh	r3, [r7, #18]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	441a      	add	r2, r3
 800255e:	8a7b      	ldrh	r3, [r7, #18]
 8002560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002568:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800256c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002570:	b29b      	uxth	r3, r3
 8002572:	8013      	strh	r3, [r2, #0]
 8002574:	e2b0      	b.n	8002ad8 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d021      	beq.n	80025c4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	b29b      	uxth	r3, r3
 8002592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800259a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	441a      	add	r2, r3
 80025ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80025b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	f040 8284 	bne.w	8002ad8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025d8:	441a      	add	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	69da      	ldr	r2, [r3, #28]
 80025e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025e6:	441a      	add	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	6a1a      	ldr	r2, [r3, #32]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d309      	bcc.n	800260c <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	6a1a      	ldr	r2, [r3, #32]
 8002602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002604:	1ad2      	subs	r2, r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	621a      	str	r2, [r3, #32]
 800260a:	e015      	b.n	8002638 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d107      	bne.n	8002624 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 8002614:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002618:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002622:	e009      	b.n	8002638 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2200      	movs	r2, #0
 8002636:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	785b      	ldrb	r3, [r3, #1]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d155      	bne.n	80026ec <HAL_PCD_EP_DB_Transmit+0x356>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	63bb      	str	r3, [r7, #56]	; 0x38
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800264e:	b29b      	uxth	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002654:	4413      	add	r3, r2
 8002656:	63bb      	str	r3, [r7, #56]	; 0x38
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	00da      	lsls	r2, r3, #3
 800265e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002660:	4413      	add	r3, r2
 8002662:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002666:	637b      	str	r3, [r7, #52]	; 0x34
 8002668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800266a:	2b00      	cmp	r3, #0
 800266c:	d112      	bne.n	8002694 <HAL_PCD_EP_DB_Transmit+0x2fe>
 800266e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002678:	b29a      	uxth	r2, r3
 800267a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267c:	801a      	strh	r2, [r3, #0]
 800267e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	b29b      	uxth	r3, r3
 8002684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800268c:	b29a      	uxth	r2, r3
 800268e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002690:	801a      	strh	r2, [r3, #0]
 8002692:	e047      	b.n	8002724 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002696:	2b3e      	cmp	r3, #62	; 0x3e
 8002698:	d811      	bhi.n	80026be <HAL_PCD_EP_DB_Transmit+0x328>
 800269a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800269c:	085b      	lsrs	r3, r3, #1
 800269e:	64bb      	str	r3, [r7, #72]	; 0x48
 80026a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <HAL_PCD_EP_DB_Transmit+0x31a>
 80026aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ac:	3301      	adds	r3, #1
 80026ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80026b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	029b      	lsls	r3, r3, #10
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ba:	801a      	strh	r2, [r3, #0]
 80026bc:	e032      	b.n	8002724 <HAL_PCD_EP_DB_Transmit+0x38e>
 80026be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026c0:	095b      	lsrs	r3, r3, #5
 80026c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80026c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d102      	bne.n	80026d4 <HAL_PCD_EP_DB_Transmit+0x33e>
 80026ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d0:	3b01      	subs	r3, #1
 80026d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	029b      	lsls	r3, r3, #10
 80026da:	b29b      	uxth	r3, r3
 80026dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e8:	801a      	strh	r2, [r3, #0]
 80026ea:	e01b      	b.n	8002724 <HAL_PCD_EP_DB_Transmit+0x38e>
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	785b      	ldrb	r3, [r3, #1]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d117      	bne.n	8002724 <HAL_PCD_EP_DB_Transmit+0x38e>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	643b      	str	r3, [r7, #64]	; 0x40
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002702:	b29b      	uxth	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002708:	4413      	add	r3, r2
 800270a:	643b      	str	r3, [r7, #64]	; 0x40
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	00da      	lsls	r2, r3, #3
 8002712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002714:	4413      	add	r3, r2
 8002716:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800271a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800271c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800271e:	b29a      	uxth	r2, r3
 8002720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002722:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	6959      	ldr	r1, [r3, #20]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	891a      	ldrh	r2, [r3, #8]
 8002730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002732:	b29b      	uxth	r3, r3
 8002734:	f004 fa5a 	bl	8006bec <USB_WritePMA>
 8002738:	e1ce      	b.n	8002ad8 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002742:	b29b      	uxth	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4413      	add	r3, r2
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	4413      	add	r3, r2
 8002754:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800275e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800276a:	429a      	cmp	r2, r3
 800276c:	d307      	bcc.n	800277e <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002776:	1ad2      	subs	r2, r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	619a      	str	r2, [r3, #24]
 800277c:	e002      	b.n	8002784 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	f040 80c4 	bne.w	8002916 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	785b      	ldrb	r3, [r3, #1]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d126      	bne.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x44e>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027aa:	4413      	add	r3, r2
 80027ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	00da      	lsls	r2, r3, #3
 80027b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b6:	4413      	add	r3, r2
 80027b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80027be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027cc:	801a      	strh	r2, [r3, #0]
 80027ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027dc:	b29a      	uxth	r2, r3
 80027de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027e0:	801a      	strh	r2, [r3, #0]
 80027e2:	e01a      	b.n	800281a <HAL_PCD_EP_DB_Transmit+0x484>
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	785b      	ldrb	r3, [r3, #1]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d116      	bne.n	800281a <HAL_PCD_EP_DB_Transmit+0x484>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	677b      	str	r3, [r7, #116]	; 0x74
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002800:	4413      	add	r3, r2
 8002802:	677b      	str	r3, [r7, #116]	; 0x74
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	00da      	lsls	r2, r3, #3
 800280a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800280c:	4413      	add	r3, r2
 800280e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002812:	673b      	str	r3, [r7, #112]	; 0x70
 8002814:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002816:	2200      	movs	r2, #0
 8002818:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	785b      	ldrb	r3, [r3, #1]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d12f      	bne.n	8002888 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002838:	b29b      	uxth	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002840:	4413      	add	r3, r2
 8002842:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	00da      	lsls	r2, r3, #3
 800284c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002850:	4413      	add	r3, r2
 8002852:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002856:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800285a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	b29b      	uxth	r3, r3
 8002862:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002866:	b29a      	uxth	r2, r3
 8002868:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800286c:	801a      	strh	r2, [r3, #0]
 800286e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800287a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800287e:	b29a      	uxth	r2, r3
 8002880:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002884:	801a      	strh	r2, [r3, #0]
 8002886:	e017      	b.n	80028b8 <HAL_PCD_EP_DB_Transmit+0x522>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	785b      	ldrb	r3, [r3, #1]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d113      	bne.n	80028b8 <HAL_PCD_EP_DB_Transmit+0x522>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002898:	b29b      	uxth	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800289e:	4413      	add	r3, r2
 80028a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	00da      	lsls	r2, r3, #3
 80028a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028aa:	4413      	add	r3, r2
 80028ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028b4:	2200      	movs	r2, #0
 80028b6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	4619      	mov	r1, r3
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f006 f8bd 	bl	8008a3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f040 8104 	bne.w	8002ad8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	441a      	add	r2, r3
 80028fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002900:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002904:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002908:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800290c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002910:	b29b      	uxth	r3, r3
 8002912:	8013      	strh	r3, [r2, #0]
 8002914:	e0e0      	b.n	8002ad8 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d121      	bne.n	8002964 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	441a      	add	r2, r3
 800294c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002958:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800295c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002960:	b29b      	uxth	r3, r3
 8002962:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800296a:	2b01      	cmp	r3, #1
 800296c:	f040 80b4 	bne.w	8002ad8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	695a      	ldr	r2, [r3, #20]
 8002974:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002978:	441a      	add	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	69da      	ldr	r2, [r3, #28]
 8002982:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002986:	441a      	add	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	6a1a      	ldr	r2, [r3, #32]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	429a      	cmp	r2, r3
 8002996:	d309      	bcc.n	80029ac <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	6a1a      	ldr	r2, [r3, #32]
 80029a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029a4:	1ad2      	subs	r2, r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	621a      	str	r2, [r3, #32]
 80029aa:	e015      	b.n	80029d8 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d107      	bne.n	80029c4 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 80029b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029c2:	e009      	b.n	80029d8 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2200      	movs	r2, #0
 80029ce:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	667b      	str	r3, [r7, #100]	; 0x64
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	785b      	ldrb	r3, [r3, #1]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d155      	bne.n	8002a92 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029fa:	4413      	add	r3, r2
 80029fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	00da      	lsls	r2, r3, #3
 8002a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a06:	4413      	add	r3, r2
 8002a08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d112      	bne.n	8002a3a <HAL_PCD_EP_DB_Transmit+0x6a4>
 8002a14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a22:	801a      	strh	r2, [r3, #0]
 8002a24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a36:	801a      	strh	r2, [r3, #0]
 8002a38:	e044      	b.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a3c:	2b3e      	cmp	r3, #62	; 0x3e
 8002a3e:	d811      	bhi.n	8002a64 <HAL_PCD_EP_DB_Transmit+0x6ce>
 8002a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a42:	085b      	lsrs	r3, r3, #1
 8002a44:	657b      	str	r3, [r7, #84]	; 0x54
 8002a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <HAL_PCD_EP_DB_Transmit+0x6c0>
 8002a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a52:	3301      	adds	r3, #1
 8002a54:	657b      	str	r3, [r7, #84]	; 0x54
 8002a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	029b      	lsls	r3, r3, #10
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a60:	801a      	strh	r2, [r3, #0]
 8002a62:	e02f      	b.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	657b      	str	r3, [r7, #84]	; 0x54
 8002a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <HAL_PCD_EP_DB_Transmit+0x6e4>
 8002a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a76:	3b01      	subs	r3, #1
 8002a78:	657b      	str	r3, [r7, #84]	; 0x54
 8002a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	029b      	lsls	r3, r3, #10
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a8e:	801a      	strh	r2, [r3, #0]
 8002a90:	e018      	b.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	785b      	ldrb	r3, [r3, #1]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d114      	bne.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aa8:	4413      	add	r3, r2
 8002aaa:	667b      	str	r3, [r7, #100]	; 0x64
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	00da      	lsls	r2, r3, #3
 8002ab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002aba:	663b      	str	r3, [r7, #96]	; 0x60
 8002abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ac2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	6959      	ldr	r1, [r3, #20]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	895a      	ldrh	r2, [r3, #10]
 8002ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	f004 f88a 	bl	8006bec <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002af2:	823b      	strh	r3, [r7, #16]
 8002af4:	8a3b      	ldrh	r3, [r7, #16]
 8002af6:	f083 0310 	eor.w	r3, r3, #16
 8002afa:	823b      	strh	r3, [r7, #16]
 8002afc:	8a3b      	ldrh	r3, [r7, #16]
 8002afe:	f083 0320 	eor.w	r3, r3, #32
 8002b02:	823b      	strh	r3, [r7, #16]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	441a      	add	r2, r3
 8002b12:	8a3b      	ldrh	r3, [r7, #16]
 8002b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3788      	adds	r7, #136	; 0x88
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b087      	sub	sp, #28
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	607b      	str	r3, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	817b      	strh	r3, [r7, #10]
 8002b40:	4613      	mov	r3, r2
 8002b42:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b44:	897b      	ldrh	r3, [r7, #10]
 8002b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b50:	897b      	ldrh	r3, [r7, #10]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	e009      	b.n	8002b7c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b68:	897a      	ldrh	r2, [r7, #10]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4413      	add	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b7c:	893b      	ldrh	r3, [r7, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d107      	bne.n	8002b92 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2200      	movs	r2, #0
 8002b86:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	80da      	strh	r2, [r3, #6]
 8002b90:	e00b      	b.n	8002baa <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2201      	movs	r2, #1
 8002b96:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	0c1b      	lsrs	r3, r3, #16
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	f043 0302 	orr.w	r3, r3, #2
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40007000 	.word	0x40007000

08002c28 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002c30:	4b27      	ldr	r3, [pc, #156]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c38:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002c3a:	f000 f871 	bl	8002d20 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c44:	d101      	bne.n	8002c4a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e03e      	b.n	8002cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002c4a:	4b21      	ldr	r3, [pc, #132]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c56:	d101      	bne.n	8002c5c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e035      	b.n	8002cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d101      	bne.n	8002c68 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	e02f      	b.n	8002cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002c68:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002c70:	4917      	ldr	r1, [pc, #92]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002c78:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	4a16      	ldr	r2, [pc, #88]	; (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	09db      	lsrs	r3, r3, #7
 8002c86:	2232      	movs	r2, #50	; 0x32
 8002c88:	fb02 f303 	mul.w	r3, r2, r3
 8002c8c:	4a13      	ldr	r2, [pc, #76]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	08db      	lsrs	r3, r3, #3
 8002c94:	3301      	adds	r3, #1
 8002c96:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c98:	e002      	b.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cac:	d102      	bne.n	8002cb4 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f2      	bne.n	8002c9a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc0:	d101      	bne.n	8002cc6 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e000      	b.n	8002cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	20000000 	.word	0x20000000
 8002cd8:	0a7c5ac5 	.word	0x0a7c5ac5
 8002cdc:	cccccccd 	.word	0xcccccccd

08002ce0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_PWREx_EnableVddUSB+0x1c>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <HAL_PWREx_EnableVddUSB+0x1c>)
 8002cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cee:	6053      	str	r3, [r2, #4]
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40007000 	.word	0x40007000

08002d00 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002d0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d0e:	6093      	str	r3, [r2, #8]
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40007000 	.word	0x40007000

08002d20 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002d26:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d3a:	607b      	str	r3, [r7, #4]
 8002d3c:	e00a      	b.n	8002d54 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d103      	bne.n	8002d50 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002d48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d4c:	607b      	str	r3, [r7, #4]
 8002d4e:	e001      	b.n	8002d54 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002d50:	2300      	movs	r3, #0
 8002d52:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002d54:	687b      	ldr	r3, [r7, #4]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40007000 	.word	0x40007000

08002d68 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d102      	bne.n	8002d7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f000 bcd0 	b.w	800371c <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d7c:	4ba3      	ldr	r3, [pc, #652]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d86:	4ba1      	ldr	r3, [pc, #644]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 80e9 	beq.w	8002f70 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d006      	beq.n	8002db2 <HAL_RCC_OscConfig+0x4a>
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	f040 8083 	bne.w	8002eb2 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d17f      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002db2:	4b96      	ldr	r3, [pc, #600]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d006      	beq.n	8002dcc <HAL_RCC_OscConfig+0x64>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d102      	bne.n	8002dcc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f000 bca8 	b.w	800371c <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd0:	4b8e      	ldr	r3, [pc, #568]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d004      	beq.n	8002de6 <HAL_RCC_OscConfig+0x7e>
 8002ddc:	4b8b      	ldr	r3, [pc, #556]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de4:	e005      	b.n	8002df2 <HAL_RCC_OscConfig+0x8a>
 8002de6:	4b89      	ldr	r3, [pc, #548]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d224      	bcs.n	8002e40 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fe70 	bl	8003ae0 <RCC_SetFlashLatencyFromMSIRange>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f000 bc88 	b.w	800371c <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e0c:	4b7f      	ldr	r3, [pc, #508]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a7e      	ldr	r2, [pc, #504]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002e12:	f043 0308 	orr.w	r3, r3, #8
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	4b7c      	ldr	r3, [pc, #496]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	4979      	ldr	r1, [pc, #484]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e2a:	4b78      	ldr	r3, [pc, #480]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	4974      	ldr	r1, [pc, #464]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]
 8002e3e:	e026      	b.n	8002e8e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e40:	4b72      	ldr	r3, [pc, #456]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a71      	ldr	r2, [pc, #452]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002e46:	f043 0308 	orr.w	r3, r3, #8
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	4b6f      	ldr	r3, [pc, #444]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	496c      	ldr	r1, [pc, #432]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e5e:	4b6b      	ldr	r3, [pc, #428]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	4967      	ldr	r1, [pc, #412]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fe2f 	bl	8003ae0 <RCC_SetFlashLatencyFromMSIRange>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f000 bc47 	b.w	800371c <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e8e:	f000 fe13 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8002e92:	4603      	mov	r3, r0
 8002e94:	4a5e      	ldr	r2, [pc, #376]	; (8003010 <HAL_RCC_OscConfig+0x2a8>)
 8002e96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e98:	4b5e      	ldr	r3, [pc, #376]	; (8003014 <HAL_RCC_OscConfig+0x2ac>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fd fdff 	bl	8000aa0 <HAL_InitTick>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d060      	beq.n	8002f6e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	f000 bc35 	b.w	800371c <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d039      	beq.n	8002f2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002eba:	4b54      	ldr	r3, [pc, #336]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a53      	ldr	r2, [pc, #332]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ec6:	f7fd fe3b 	bl	8000b40 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ecc:	e00f      	b.n	8002eee <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ece:	f7fd fe37 	bl	8000b40 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d908      	bls.n	8002eee <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002edc:	4b4b      	ldr	r3, [pc, #300]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d102      	bne.n	8002eee <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	f000 bc17 	b.w	800371c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eee:	4b47      	ldr	r3, [pc, #284]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0e9      	beq.n	8002ece <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002efa:	4b44      	ldr	r3, [pc, #272]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a43      	ldr	r2, [pc, #268]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002f00:	f043 0308 	orr.w	r3, r3, #8
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b41      	ldr	r3, [pc, #260]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	493e      	ldr	r1, [pc, #248]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f18:	4b3c      	ldr	r3, [pc, #240]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	021b      	lsls	r3, r3, #8
 8002f26:	4939      	ldr	r1, [pc, #228]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
 8002f2c:	e020      	b.n	8002f70 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f2e:	4b37      	ldr	r3, [pc, #220]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a36      	ldr	r2, [pc, #216]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f3a:	f7fd fe01 	bl	8000b40 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f40:	e00e      	b.n	8002f60 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f42:	f7fd fdfd 	bl	8000b40 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d907      	bls.n	8002f60 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f50:	4b2e      	ldr	r3, [pc, #184]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e3dd      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f60:	4b2a      	ldr	r3, [pc, #168]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1ea      	bne.n	8002f42 <HAL_RCC_OscConfig+0x1da>
 8002f6c:	e000      	b.n	8002f70 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f6e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d07e      	beq.n	800307a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d005      	beq.n	8002f8e <HAL_RCC_OscConfig+0x226>
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	2b0c      	cmp	r3, #12
 8002f86:	d10e      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d10b      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8e:	4b1f      	ldr	r3, [pc, #124]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d06e      	beq.n	8003078 <HAL_RCC_OscConfig+0x310>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d16a      	bne.n	8003078 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e3ba      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fae:	d106      	bne.n	8002fbe <HAL_RCC_OscConfig+0x256>
 8002fb0:	4b16      	ldr	r3, [pc, #88]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a15      	ldr	r2, [pc, #84]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	e01d      	b.n	8002ffa <HAL_RCC_OscConfig+0x292>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc6:	d10c      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x27a>
 8002fc8:	4b10      	ldr	r3, [pc, #64]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a0f      	ldr	r2, [pc, #60]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002fce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	4b0d      	ldr	r3, [pc, #52]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a0c      	ldr	r2, [pc, #48]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fde:	6013      	str	r3, [r2, #0]
 8002fe0:	e00b      	b.n	8002ffa <HAL_RCC_OscConfig+0x292>
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a09      	ldr	r2, [pc, #36]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	4b07      	ldr	r3, [pc, #28]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a06      	ldr	r2, [pc, #24]	; (800300c <HAL_RCC_OscConfig+0x2a4>)
 8002ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d020      	beq.n	8003044 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003002:	f7fd fd9d 	bl	8000b40 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003008:	e015      	b.n	8003036 <HAL_RCC_OscConfig+0x2ce>
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000
 8003010:	20000000 	.word	0x20000000
 8003014:	20000004 	.word	0x20000004
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003018:	f7fd fd92 	bl	8000b40 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b64      	cmp	r3, #100	; 0x64
 8003024:	d907      	bls.n	8003036 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003026:	4b9f      	ldr	r3, [pc, #636]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e372      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003036:	4b9b      	ldr	r3, [pc, #620]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0ea      	beq.n	8003018 <HAL_RCC_OscConfig+0x2b0>
 8003042:	e01a      	b.n	800307a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fd fd7c 	bl	8000b40 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800304a:	e00e      	b.n	800306a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800304c:	f7fd fd78 	bl	8000b40 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d907      	bls.n	800306a <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800305a:	4b92      	ldr	r3, [pc, #584]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e358      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800306a:	4b8e      	ldr	r3, [pc, #568]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1ea      	bne.n	800304c <HAL_RCC_OscConfig+0x2e4>
 8003076:	e000      	b.n	800307a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d06c      	beq.n	8003160 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	2b04      	cmp	r3, #4
 800308a:	d005      	beq.n	8003098 <HAL_RCC_OscConfig+0x330>
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	2b0c      	cmp	r3, #12
 8003090:	d119      	bne.n	80030c6 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d116      	bne.n	80030c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003098:	4b82      	ldr	r3, [pc, #520]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_OscConfig+0x348>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e335      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	4b7c      	ldr	r3, [pc, #496]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	061b      	lsls	r3, r3, #24
 80030be:	4979      	ldr	r1, [pc, #484]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030c4:	e04c      	b.n	8003160 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d029      	beq.n	8003122 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ce:	4b75      	ldr	r3, [pc, #468]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a74      	ldr	r2, [pc, #464]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 80030d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030da:	f7fd fd31 	bl	8000b40 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e0:	e00e      	b.n	8003100 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e2:	f7fd fd2d 	bl	8000b40 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d907      	bls.n	8003100 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030f0:	4b6c      	ldr	r3, [pc, #432]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e30d      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003100:	4b68      	ldr	r3, [pc, #416]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0ea      	beq.n	80030e2 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310c:	4b65      	ldr	r3, [pc, #404]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	061b      	lsls	r3, r3, #24
 800311a:	4962      	ldr	r1, [pc, #392]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
 8003120:	e01e      	b.n	8003160 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003122:	4b60      	ldr	r3, [pc, #384]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a5f      	ldr	r2, [pc, #380]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 8003128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800312c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312e:	f7fd fd07 	bl	8000b40 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003134:	e00e      	b.n	8003154 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003136:	f7fd fd03 	bl	8000b40 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d907      	bls.n	8003154 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003144:	4b57      	ldr	r3, [pc, #348]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e2e3      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003154:	4b53      	ldr	r3, [pc, #332]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1ea      	bne.n	8003136 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d05f      	beq.n	800322c <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d038      	beq.n	80031e6 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d108      	bne.n	800318e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800317c:	4b49      	ldr	r3, [pc, #292]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 800317e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003182:	4a48      	ldr	r2, [pc, #288]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 8003184:	f023 0310 	bic.w	r3, r3, #16
 8003188:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800318c:	e007      	b.n	800319e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800318e:	4b45      	ldr	r3, [pc, #276]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 8003190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003194:	4a43      	ldr	r2, [pc, #268]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 8003196:	f043 0310 	orr.w	r3, r3, #16
 800319a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800319e:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 80031a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a4:	4a3f      	ldr	r2, [pc, #252]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ae:	f7fd fcc7 	bl	8000b40 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031b4:	e00f      	b.n	80031d6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b6:	f7fd fcc3 	bl	8000b40 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b07      	cmp	r3, #7
 80031c2:	d908      	bls.n	80031d6 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031c4:	4b37      	ldr	r3, [pc, #220]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 80031c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e2a2      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031d6:	4b33      	ldr	r3, [pc, #204]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 80031d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0e8      	beq.n	80031b6 <HAL_RCC_OscConfig+0x44e>
 80031e4:	e022      	b.n	800322c <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e6:	4b2f      	ldr	r3, [pc, #188]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 80031e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ec:	4a2d      	ldr	r2, [pc, #180]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f6:	f7fd fca3 	bl	8000b40 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031fc:	e00f      	b.n	800321e <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fe:	f7fd fc9f 	bl	8000b40 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b07      	cmp	r3, #7
 800320a:	d908      	bls.n	800321e <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800320c:	4b25      	ldr	r3, [pc, #148]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 800320e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e27e      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800321e:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 8003220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e8      	bne.n	80031fe <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 8131 	beq.w	800349c <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323a:	2300      	movs	r3, #0
 800323c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800323e:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 8003240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10d      	bne.n	8003266 <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324a:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 800324c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324e:	4a15      	ldr	r2, [pc, #84]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 8003250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003254:	6593      	str	r3, [r2, #88]	; 0x58
 8003256:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <HAL_RCC_OscConfig+0x53c>)
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003262:	2301      	movs	r3, #1
 8003264:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003266:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <HAL_RCC_OscConfig+0x540>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d122      	bne.n	80032b8 <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003272:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <HAL_RCC_OscConfig+0x540>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a0c      	ldr	r2, [pc, #48]	; (80032a8 <HAL_RCC_OscConfig+0x540>)
 8003278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800327e:	f7fd fc5f 	bl	8000b40 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003284:	e012      	b.n	80032ac <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003286:	f7fd fc5b 	bl	8000b40 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d90b      	bls.n	80032ac <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <HAL_RCC_OscConfig+0x540>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d105      	bne.n	80032ac <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e23b      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ac:	4bb8      	ldr	r3, [pc, #736]	; (8003590 <HAL_RCC_OscConfig+0x828>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0e6      	beq.n	8003286 <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01f      	beq.n	8003304 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d010      	beq.n	80032f2 <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80032d0:	4bb0      	ldr	r3, [pc, #704]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	4aaf      	ldr	r2, [pc, #700]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 80032d8:	f043 0304 	orr.w	r3, r3, #4
 80032dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032e0:	4bac      	ldr	r3, [pc, #688]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	4aab      	ldr	r2, [pc, #684]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032f0:	e018      	b.n	8003324 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032f2:	4ba8      	ldr	r3, [pc, #672]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f8:	4aa6      	ldr	r2, [pc, #664]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003302:	e00f      	b.n	8003324 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003304:	4ba3      	ldr	r3, [pc, #652]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330a:	4aa2      	ldr	r2, [pc, #648]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 800330c:	f023 0301 	bic.w	r3, r3, #1
 8003310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003314:	4b9f      	ldr	r3, [pc, #636]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331a:	4a9e      	ldr	r2, [pc, #632]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 800331c:	f023 0304 	bic.w	r3, r3, #4
 8003320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d068      	beq.n	80033fe <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7fd fc08 	bl	8000b40 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003332:	e011      	b.n	8003358 <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003334:	f7fd fc04 	bl	8000b40 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d908      	bls.n	8003358 <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003346:	4b93      	ldr	r3, [pc, #588]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 8003348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e1e1      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003358:	4b8e      	ldr	r3, [pc, #568]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0e6      	beq.n	8003334 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336e:	2b00      	cmp	r3, #0
 8003370:	d022      	beq.n	80033b8 <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003372:	4b88      	ldr	r3, [pc, #544]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 8003374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003378:	4a86      	ldr	r2, [pc, #536]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 800337a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800337e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003382:	e011      	b.n	80033a8 <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003384:	f7fd fbdc 	bl	8000b40 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d908      	bls.n	80033a8 <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003396:	4b7f      	ldr	r3, [pc, #508]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e1b9      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80033a8:	4b7a      	ldr	r3, [pc, #488]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0e6      	beq.n	8003384 <HAL_RCC_OscConfig+0x61c>
 80033b6:	e068      	b.n	800348a <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80033b8:	4b76      	ldr	r3, [pc, #472]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	4a75      	ldr	r2, [pc, #468]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 80033c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033c8:	e011      	b.n	80033ee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ca:	f7fd fbb9 	bl	8000b40 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d8:	4293      	cmp	r3, r2
 80033da:	d908      	bls.n	80033ee <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033dc:	4b6d      	ldr	r3, [pc, #436]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 80033de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e196      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033ee:	4b69      	ldr	r3, [pc, #420]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 80033f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1e6      	bne.n	80033ca <HAL_RCC_OscConfig+0x662>
 80033fc:	e045      	b.n	800348a <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fe:	f7fd fb9f 	bl	8000b40 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003404:	e011      	b.n	800342a <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	f7fd fb9b 	bl	8000b40 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f241 3288 	movw	r2, #5000	; 0x1388
 8003414:	4293      	cmp	r3, r2
 8003416:	d908      	bls.n	800342a <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003418:	4b5e      	ldr	r3, [pc, #376]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e178      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800342a:	4b5a      	ldr	r3, [pc, #360]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1e6      	bne.n	8003406 <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003438:	4b56      	ldr	r3, [pc, #344]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003442:	2b00      	cmp	r3, #0
 8003444:	d021      	beq.n	800348a <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003446:	4b53      	ldr	r3, [pc, #332]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 8003448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344c:	4a51      	ldr	r2, [pc, #324]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 800344e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003452:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003456:	e011      	b.n	800347c <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003458:	f7fd fb72 	bl	8000b40 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	; 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d908      	bls.n	800347c <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800346a:	4b4a      	ldr	r3, [pc, #296]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e14f      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800347c:	4b45      	ldr	r3, [pc, #276]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1e6      	bne.n	8003458 <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800348a:	7ffb      	ldrb	r3, [r7, #31]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d105      	bne.n	800349c <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003490:	4b40      	ldr	r3, [pc, #256]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003494:	4a3f      	ldr	r2, [pc, #252]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 8003496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800349a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d04a      	beq.n	800353e <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d023      	beq.n	80034f8 <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034b0:	4b38      	ldr	r3, [pc, #224]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 80034b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034b6:	4a37      	ldr	r2, [pc, #220]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c0:	f7fd fb3e 	bl	8000b40 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034c6:	e00f      	b.n	80034e8 <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034c8:	f7fd fb3a 	bl	8000b40 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d908      	bls.n	80034e8 <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034d6:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 80034d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e119      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034e8:	4b2a      	ldr	r3, [pc, #168]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 80034ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0e8      	beq.n	80034c8 <HAL_RCC_OscConfig+0x760>
 80034f6:	e022      	b.n	800353e <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034f8:	4b26      	ldr	r3, [pc, #152]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 80034fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034fe:	4a25      	ldr	r2, [pc, #148]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 8003500:	f023 0301 	bic.w	r3, r3, #1
 8003504:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003508:	f7fd fb1a 	bl	8000b40 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800350e:	e00f      	b.n	8003530 <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003510:	f7fd fb16 	bl	8000b40 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d908      	bls.n	8003530 <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800351e:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 8003520:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e0f5      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003530:	4b18      	ldr	r3, [pc, #96]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 8003532:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e8      	bne.n	8003510 <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 80e9 	beq.w	800371a <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003548:	4b12      	ldr	r3, [pc, #72]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 030c 	and.w	r3, r3, #12
 8003550:	2b0c      	cmp	r3, #12
 8003552:	f000 80a3 	beq.w	800369c <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	2b02      	cmp	r3, #2
 800355c:	d16a      	bne.n	8003634 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355e:	4b0d      	ldr	r3, [pc, #52]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a0c      	ldr	r2, [pc, #48]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 8003564:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fd fae9 	bl	8000b40 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003570:	e012      	b.n	8003598 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003572:	f7fd fae5 	bl	8000b40 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d90b      	bls.n	8003598 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003580:	4b04      	ldr	r3, [pc, #16]	; (8003594 <HAL_RCC_OscConfig+0x82c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e0c5      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
 8003590:	40007000 	.word	0x40007000
 8003594:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003598:	4b62      	ldr	r3, [pc, #392]	; (8003724 <HAL_RCC_OscConfig+0x9bc>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1e6      	bne.n	8003572 <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035a4:	4b5f      	ldr	r3, [pc, #380]	; (8003724 <HAL_RCC_OscConfig+0x9bc>)
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	4b5f      	ldr	r3, [pc, #380]	; (8003728 <HAL_RCC_OscConfig+0x9c0>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035b4:	3a01      	subs	r2, #1
 80035b6:	0112      	lsls	r2, r2, #4
 80035b8:	4311      	orrs	r1, r2
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035be:	0212      	lsls	r2, r2, #8
 80035c0:	4311      	orrs	r1, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035c6:	0852      	lsrs	r2, r2, #1
 80035c8:	3a01      	subs	r2, #1
 80035ca:	0552      	lsls	r2, r2, #21
 80035cc:	4311      	orrs	r1, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80035d2:	0852      	lsrs	r2, r2, #1
 80035d4:	3a01      	subs	r2, #1
 80035d6:	0652      	lsls	r2, r2, #25
 80035d8:	4311      	orrs	r1, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035de:	06d2      	lsls	r2, r2, #27
 80035e0:	430a      	orrs	r2, r1
 80035e2:	4950      	ldr	r1, [pc, #320]	; (8003724 <HAL_RCC_OscConfig+0x9bc>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e8:	4b4e      	ldr	r3, [pc, #312]	; (8003724 <HAL_RCC_OscConfig+0x9bc>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a4d      	ldr	r2, [pc, #308]	; (8003724 <HAL_RCC_OscConfig+0x9bc>)
 80035ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035f4:	4b4b      	ldr	r3, [pc, #300]	; (8003724 <HAL_RCC_OscConfig+0x9bc>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a4a      	ldr	r2, [pc, #296]	; (8003724 <HAL_RCC_OscConfig+0x9bc>)
 80035fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fd fa9e 	bl	8000b40 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003606:	e00e      	b.n	8003626 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003608:	f7fd fa9a 	bl	8000b40 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d907      	bls.n	8003626 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003616:	4b43      	ldr	r3, [pc, #268]	; (8003724 <HAL_RCC_OscConfig+0x9bc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e07a      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003626:	4b3f      	ldr	r3, [pc, #252]	; (8003724 <HAL_RCC_OscConfig+0x9bc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0ea      	beq.n	8003608 <HAL_RCC_OscConfig+0x8a0>
 8003632:	e072      	b.n	800371a <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003634:	4b3b      	ldr	r3, [pc, #236]	; (8003724 <HAL_RCC_OscConfig+0x9bc>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a3a      	ldr	r2, [pc, #232]	; (8003724 <HAL_RCC_OscConfig+0x9bc>)
 800363a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800363e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003640:	4b38      	ldr	r3, [pc, #224]	; (8003724 <HAL_RCC_OscConfig+0x9bc>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d105      	bne.n	8003658 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800364c:	4b35      	ldr	r3, [pc, #212]	; (8003724 <HAL_RCC_OscConfig+0x9bc>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	4a34      	ldr	r2, [pc, #208]	; (8003724 <HAL_RCC_OscConfig+0x9bc>)
 8003652:	f023 0303 	bic.w	r3, r3, #3
 8003656:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003658:	4b32      	ldr	r3, [pc, #200]	; (8003724 <HAL_RCC_OscConfig+0x9bc>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4a31      	ldr	r2, [pc, #196]	; (8003724 <HAL_RCC_OscConfig+0x9bc>)
 800365e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003666:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fd fa6a 	bl	8000b40 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800366e:	e00e      	b.n	800368e <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003670:	f7fd fa66 	bl	8000b40 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d907      	bls.n	800368e <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800367e:	4b29      	ldr	r3, [pc, #164]	; (8003724 <HAL_RCC_OscConfig+0x9bc>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e046      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800368e:	4b25      	ldr	r3, [pc, #148]	; (8003724 <HAL_RCC_OscConfig+0x9bc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1ea      	bne.n	8003670 <HAL_RCC_OscConfig+0x908>
 800369a:	e03e      	b.n	800371a <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e039      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80036a8:	4b1e      	ldr	r3, [pc, #120]	; (8003724 <HAL_RCC_OscConfig+0x9bc>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f003 0203 	and.w	r2, r3, #3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d12c      	bne.n	8003716 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c6:	3b01      	subs	r3, #1
 80036c8:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d123      	bne.n	8003716 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036da:	429a      	cmp	r2, r3
 80036dc:	d11b      	bne.n	8003716 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e8:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d113      	bne.n	8003716 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	085b      	lsrs	r3, r3, #1
 80036fa:	3b01      	subs	r3, #1
 80036fc:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036fe:	429a      	cmp	r2, r3
 8003700:	d109      	bne.n	8003716 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370c:	085b      	lsrs	r3, r3, #1
 800370e:	3b01      	subs	r3, #1
 8003710:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d001      	beq.n	800371a <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3720      	adds	r7, #32
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021000 	.word	0x40021000
 8003728:	019f800c 	.word	0x019f800c

0800372c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e10d      	b.n	8003960 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003744:	4b88      	ldr	r3, [pc, #544]	; (8003968 <HAL_RCC_ClockConfig+0x23c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 030f 	and.w	r3, r3, #15
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d910      	bls.n	8003774 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b85      	ldr	r3, [pc, #532]	; (8003968 <HAL_RCC_ClockConfig+0x23c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 020f 	bic.w	r2, r3, #15
 800375a:	4983      	ldr	r1, [pc, #524]	; (8003968 <HAL_RCC_ClockConfig+0x23c>)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4313      	orrs	r3, r2
 8003760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b81      	ldr	r3, [pc, #516]	; (8003968 <HAL_RCC_ClockConfig+0x23c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0f5      	b.n	8003960 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8094 	beq.w	80038aa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b03      	cmp	r3, #3
 8003788:	d134      	bne.n	80037f4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378a:	4b78      	ldr	r3, [pc, #480]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e0e2      	b.n	8003960 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800379a:	f000 fa05 	bl	8003ba8 <RCC_GetSysClockFreqFromPLLSource>
 800379e:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	4a73      	ldr	r2, [pc, #460]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d956      	bls.n	8003856 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80037a8:	4b70      	ldr	r3, [pc, #448]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037b4:	4b6d      	ldr	r3, [pc, #436]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037bc:	4a6b      	ldr	r2, [pc, #428]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 80037be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	e045      	b.n	8003856 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d03f      	beq.n	8003856 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d13b      	bne.n	8003856 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037de:	4b63      	ldr	r3, [pc, #396]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037e6:	4a61      	ldr	r2, [pc, #388]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 80037e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	e030      	b.n	8003856 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d107      	bne.n	800380c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037fc:	4b5b      	ldr	r3, [pc, #364]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d115      	bne.n	8003834 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0a9      	b.n	8003960 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d107      	bne.n	8003824 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003814:	4b55      	ldr	r3, [pc, #340]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d109      	bne.n	8003834 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e09d      	b.n	8003960 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003824:	4b51      	ldr	r3, [pc, #324]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e095      	b.n	8003960 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003834:	f000 f8a2 	bl	800397c <HAL_RCC_GetSysClockFreq>
 8003838:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4a4c      	ldr	r2, [pc, #304]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d909      	bls.n	8003856 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003842:	4b4a      	ldr	r3, [pc, #296]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800384a:	4a48      	ldr	r2, [pc, #288]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 800384c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003850:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003852:	2380      	movs	r3, #128	; 0x80
 8003854:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003856:	4b45      	ldr	r3, [pc, #276]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f023 0203 	bic.w	r2, r3, #3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	4942      	ldr	r1, [pc, #264]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 8003864:	4313      	orrs	r3, r2
 8003866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003868:	f7fd f96a 	bl	8000b40 <HAL_GetTick>
 800386c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386e:	e013      	b.n	8003898 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003870:	f7fd f966 	bl	8000b40 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f241 3288 	movw	r2, #5000	; 0x1388
 800387e:	4293      	cmp	r3, r2
 8003880:	d90a      	bls.n	8003898 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	4b3a      	ldr	r3, [pc, #232]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 020c 	and.w	r2, r3, #12
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	429a      	cmp	r2, r3
 8003892:	d001      	beq.n	8003898 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e063      	b.n	8003960 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003898:	4b34      	ldr	r3, [pc, #208]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 020c 	and.w	r2, r3, #12
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d1e2      	bne.n	8003870 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b6:	4b2d      	ldr	r3, [pc, #180]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	492a      	ldr	r1, [pc, #168]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	608b      	str	r3, [r1, #8]
 80038c8:	e008      	b.n	80038dc <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b80      	cmp	r3, #128	; 0x80
 80038ce:	d105      	bne.n	80038dc <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038d0:	4b26      	ldr	r3, [pc, #152]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a25      	ldr	r2, [pc, #148]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 80038d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038da:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038dc:	4b22      	ldr	r3, [pc, #136]	; (8003968 <HAL_RCC_ClockConfig+0x23c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d210      	bcs.n	800390c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b1f      	ldr	r3, [pc, #124]	; (8003968 <HAL_RCC_ClockConfig+0x23c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 020f 	bic.w	r2, r3, #15
 80038f2:	491d      	ldr	r1, [pc, #116]	; (8003968 <HAL_RCC_ClockConfig+0x23c>)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <HAL_RCC_ClockConfig+0x23c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e029      	b.n	8003960 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003918:	4b14      	ldr	r3, [pc, #80]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4911      	ldr	r1, [pc, #68]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003936:	4b0d      	ldr	r3, [pc, #52]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4909      	ldr	r1, [pc, #36]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800394a:	f000 f8b5 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 800394e:	4603      	mov	r3, r0
 8003950:	4a08      	ldr	r2, [pc, #32]	; (8003974 <HAL_RCC_ClockConfig+0x248>)
 8003952:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003954:	4b08      	ldr	r3, [pc, #32]	; (8003978 <HAL_RCC_ClockConfig+0x24c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f7fd f8a1 	bl	8000aa0 <HAL_InitTick>
 800395e:	4603      	mov	r3, r0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40022000 	.word	0x40022000
 800396c:	40021000 	.word	0x40021000
 8003970:	04c4b400 	.word	0x04c4b400
 8003974:	20000000 	.word	0x20000000
 8003978:	20000004 	.word	0x20000004

0800397c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800397c:	b480      	push	{r7}
 800397e:	b089      	sub	sp, #36	; 0x24
 8003980:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800398a:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003994:	4b44      	ldr	r3, [pc, #272]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x34>
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	d121      	bne.n	80039ee <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d11e      	bne.n	80039ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039b0:	4b3d      	ldr	r3, [pc, #244]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d107      	bne.n	80039cc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039bc:	4b3a      	ldr	r3, [pc, #232]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80039be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	e005      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039cc:	4b36      	ldr	r3, [pc, #216]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80039d8:	4a34      	ldr	r2, [pc, #208]	; (8003aac <HAL_RCC_GetSysClockFreq+0x130>)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10d      	bne.n	8003a04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039ec:	e00a      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d102      	bne.n	80039fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039f4:	4b2e      	ldr	r3, [pc, #184]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x134>)
 80039f6:	61bb      	str	r3, [r7, #24]
 80039f8:	e004      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a00:	4b2c      	ldr	r3, [pc, #176]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b0c      	cmp	r3, #12
 8003a08:	d146      	bne.n	8003a98 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003a0a:	4b27      	ldr	r3, [pc, #156]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a14:	4b24      	ldr	r3, [pc, #144]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	3301      	adds	r3, #1
 8003a20:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d003      	beq.n	8003a30 <HAL_RCC_GetSysClockFreq+0xb4>
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d00d      	beq.n	8003a4a <HAL_RCC_GetSysClockFreq+0xce>
 8003a2e:	e019      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a30:	4a1f      	ldr	r2, [pc, #124]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	4a1b      	ldr	r2, [pc, #108]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a3a:	68d2      	ldr	r2, [r2, #12]
 8003a3c:	0a12      	lsrs	r2, r2, #8
 8003a3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	617b      	str	r3, [r7, #20]
        break;
 8003a48:	e019      	b.n	8003a7e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a4a:	4a1a      	ldr	r2, [pc, #104]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a52:	4a15      	ldr	r2, [pc, #84]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a54:	68d2      	ldr	r2, [r2, #12]
 8003a56:	0a12      	lsrs	r2, r2, #8
 8003a58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a5c:	fb02 f303 	mul.w	r3, r2, r3
 8003a60:	617b      	str	r3, [r7, #20]
        break;
 8003a62:	e00c      	b.n	8003a7e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6c:	4a0e      	ldr	r2, [pc, #56]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a6e:	68d2      	ldr	r2, [r2, #12]
 8003a70:	0a12      	lsrs	r2, r2, #8
 8003a72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a76:	fb02 f303 	mul.w	r3, r2, r3
 8003a7a:	617b      	str	r3, [r7, #20]
        break;
 8003a7c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	0e5b      	lsrs	r3, r3, #25
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	3301      	adds	r3, #1
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a98:	69bb      	ldr	r3, [r7, #24]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3724      	adds	r7, #36	; 0x24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	08009044 	.word	0x08009044
 8003ab0:	00f42400 	.word	0x00f42400
 8003ab4:	01e84800 	.word	0x01e84800

08003ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003abc:	f7ff ff5e 	bl	800397c <HAL_RCC_GetSysClockFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <HAL_RCC_GetHCLKFreq+0x20>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	4903      	ldr	r1, [pc, #12]	; (8003adc <HAL_RCC_GetHCLKFreq+0x24>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	08009034 	.word	0x08009034

08003ae0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003aec:	4b2c      	ldr	r3, [pc, #176]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003af8:	f7ff f888 	bl	8002c0c <HAL_PWREx_GetVoltageRange>
 8003afc:	6138      	str	r0, [r7, #16]
 8003afe:	e014      	b.n	8003b2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b00:	4b27      	ldr	r3, [pc, #156]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b04:	4a26      	ldr	r2, [pc, #152]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b0c:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b18:	f7ff f878 	bl	8002c0c <HAL_PWREx_GetVoltageRange>
 8003b1c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b1e:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b22:	4a1f      	ldr	r2, [pc, #124]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b36:	d10b      	bne.n	8003b50 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b80      	cmp	r3, #128	; 0x80
 8003b3c:	d919      	bls.n	8003b72 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2ba0      	cmp	r3, #160	; 0xa0
 8003b42:	d902      	bls.n	8003b4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b44:	2302      	movs	r3, #2
 8003b46:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003b48:	e013      	b.n	8003b72 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003b4e:	e010      	b.n	8003b72 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b80      	cmp	r3, #128	; 0x80
 8003b54:	d902      	bls.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b56:	2303      	movs	r3, #3
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	e00a      	b.n	8003b72 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b80      	cmp	r3, #128	; 0x80
 8003b60:	d102      	bne.n	8003b68 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b62:	2302      	movs	r3, #2
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	e004      	b.n	8003b72 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b70      	cmp	r3, #112	; 0x70
 8003b6c:	d101      	bne.n	8003b72 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b6e:	2301      	movs	r3, #1
 8003b70:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 020f 	bic.w	r2, r3, #15
 8003b7a:	490a      	ldr	r1, [pc, #40]	; (8003ba4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003b82:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40022000 	.word	0x40022000

08003ba8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003bb2:	4b36      	ldr	r3, [pc, #216]	; (8003c8c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d118      	bne.n	8003bf0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bbe:	4b33      	ldr	r3, [pc, #204]	; (8003c8c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d107      	bne.n	8003bda <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bca:	4b30      	ldr	r3, [pc, #192]	; (8003c8c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd0:	0a1b      	lsrs	r3, r3, #8
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	e005      	b.n	8003be6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bda:	4b2c      	ldr	r3, [pc, #176]	; (8003c8c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	091b      	lsrs	r3, r3, #4
 8003be0:	f003 030f 	and.w	r3, r3, #15
 8003be4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003be6:	4a2a      	ldr	r2, [pc, #168]	; (8003c90 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bee:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bf0:	4b26      	ldr	r3, [pc, #152]	; (8003c8c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bfa:	4b24      	ldr	r3, [pc, #144]	; (8003c8c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	091b      	lsrs	r3, r3, #4
 8003c00:	f003 030f 	and.w	r3, r3, #15
 8003c04:	3301      	adds	r3, #1
 8003c06:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d003      	beq.n	8003c16 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d00d      	beq.n	8003c30 <RCC_GetSysClockFreqFromPLLSource+0x88>
 8003c14:	e019      	b.n	8003c4a <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c16:	4a1f      	ldr	r2, [pc, #124]	; (8003c94 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1e:	4a1b      	ldr	r2, [pc, #108]	; (8003c8c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c20:	68d2      	ldr	r2, [r2, #12]
 8003c22:	0a12      	lsrs	r2, r2, #8
 8003c24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c28:	fb02 f303 	mul.w	r3, r2, r3
 8003c2c:	613b      	str	r3, [r7, #16]
      break;
 8003c2e:	e019      	b.n	8003c64 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c30:	4a19      	ldr	r2, [pc, #100]	; (8003c98 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c38:	4a14      	ldr	r2, [pc, #80]	; (8003c8c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c3a:	68d2      	ldr	r2, [r2, #12]
 8003c3c:	0a12      	lsrs	r2, r2, #8
 8003c3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c42:	fb02 f303 	mul.w	r3, r2, r3
 8003c46:	613b      	str	r3, [r7, #16]
      break;
 8003c48:	e00c      	b.n	8003c64 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c52:	4a0e      	ldr	r2, [pc, #56]	; (8003c8c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c54:	68d2      	ldr	r2, [r2, #12]
 8003c56:	0a12      	lsrs	r2, r2, #8
 8003c58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c5c:	fb02 f303 	mul.w	r3, r2, r3
 8003c60:	613b      	str	r3, [r7, #16]
      break;
 8003c62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	0e5b      	lsrs	r3, r3, #25
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003c7e:	683b      	ldr	r3, [r7, #0]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	08009044 	.word	0x08009044
 8003c94:	00f42400 	.word	0x00f42400
 8003c98:	01e84800 	.word	0x01e84800

08003c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ca8:	2300      	movs	r3, #0
 8003caa:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d040      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cbc:	2b80      	cmp	r3, #128	; 0x80
 8003cbe:	d02a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003cc0:	2b80      	cmp	r3, #128	; 0x80
 8003cc2:	d825      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003cc4:	2b60      	cmp	r3, #96	; 0x60
 8003cc6:	d026      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003cc8:	2b60      	cmp	r3, #96	; 0x60
 8003cca:	d821      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ccc:	2b40      	cmp	r3, #64	; 0x40
 8003cce:	d006      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003cd0:	2b40      	cmp	r3, #64	; 0x40
 8003cd2:	d81d      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d009      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	d010      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003cdc:	e018      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cde:	4b8f      	ldr	r3, [pc, #572]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	4a8e      	ldr	r2, [pc, #568]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cea:	e015      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fb66 	bl	80043c4 <RCCEx_PLLSAI1_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cfc:	e00c      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3320      	adds	r3, #32
 8003d02:	2100      	movs	r1, #0
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fc43 	bl	8004590 <RCCEx_PLLSAI2_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d0e:	e003      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	77fb      	strb	r3, [r7, #31]
        break;
 8003d14:	e000      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d18:	7ffb      	ldrb	r3, [r7, #31]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10b      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d1e:	4b7f      	ldr	r3, [pc, #508]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d24:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d2c:	497b      	ldr	r1, [pc, #492]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003d34:	e001      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d36:	7ffb      	ldrb	r3, [r7, #31]
 8003d38:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d047      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4e:	d030      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d54:	d82a      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d5a:	d02a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d60:	d824      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d66:	d008      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6c:	d81e      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d76:	d010      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d78:	e018      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d7a:	4b68      	ldr	r3, [pc, #416]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	4a67      	ldr	r2, [pc, #412]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d84:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d86:	e015      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fb18 	bl	80043c4 <RCCEx_PLLSAI1_Config>
 8003d94:	4603      	mov	r3, r0
 8003d96:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d98:	e00c      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3320      	adds	r3, #32
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fbf5 	bl	8004590 <RCCEx_PLLSAI2_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003daa:	e003      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	77fb      	strb	r3, [r7, #31]
        break;
 8003db0:	e000      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db4:	7ffb      	ldrb	r3, [r7, #31]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10b      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dba:	4b58      	ldr	r3, [pc, #352]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc8:	4954      	ldr	r1, [pc, #336]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003dd0:	e001      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd2:	7ffb      	ldrb	r3, [r7, #31]
 8003dd4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80ab 	beq.w	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de4:	2300      	movs	r3, #0
 8003de6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de8:	4b4c      	ldr	r3, [pc, #304]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10d      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df4:	4b49      	ldr	r3, [pc, #292]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df8:	4a48      	ldr	r2, [pc, #288]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8003e00:	4b46      	ldr	r3, [pc, #280]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e10:	4b43      	ldr	r3, [pc, #268]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a42      	ldr	r2, [pc, #264]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e1c:	f7fc fe90 	bl	8000b40 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e22:	e00f      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e24:	f7fc fe8c 	bl	8000b40 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d908      	bls.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e32:	4b3b      	ldr	r3, [pc, #236]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d109      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003e42:	e006      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e44:	4b36      	ldr	r3, [pc, #216]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0e9      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003e50:	e000      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003e52:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003e54:	7ffb      	ldrb	r3, [r7, #31]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d164      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e5a:	4b30      	ldr	r3, [pc, #192]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e64:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d01f      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d019      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e78:	4b28      	ldr	r3, [pc, #160]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e82:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e84:	4b25      	ldr	r3, [pc, #148]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	4a24      	ldr	r2, [pc, #144]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e94:	4b21      	ldr	r3, [pc, #132]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9a:	4a20      	ldr	r2, [pc, #128]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ea4:	4a1d      	ldr	r2, [pc, #116]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d01f      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb6:	f7fc fe43 	bl	8000b40 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ebc:	e012      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ebe:	f7fc fe3f 	bl	8000b40 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d909      	bls.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ed0:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003ee2:	e007      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee4:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0e5      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003ef2:	e000      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003ef4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003ef6:	7ffb      	ldrb	r3, [r7, #31]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10c      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003efc:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0c:	4903      	ldr	r1, [pc, #12]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f14:	e008      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f16:	7ffb      	ldrb	r3, [r7, #31]
 8003f18:	77bb      	strb	r3, [r7, #30]
 8003f1a:	e005      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f24:	7ffb      	ldrb	r3, [r7, #31]
 8003f26:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d105      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2e:	4baf      	ldr	r3, [pc, #700]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f32:	4aae      	ldr	r2, [pc, #696]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f46:	4ba9      	ldr	r3, [pc, #676]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4c:	f023 0203 	bic.w	r2, r3, #3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f54:	49a5      	ldr	r1, [pc, #660]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f68:	4ba0      	ldr	r3, [pc, #640]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6e:	f023 020c 	bic.w	r2, r3, #12
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	499d      	ldr	r1, [pc, #628]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f8a:	4b98      	ldr	r3, [pc, #608]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f98:	4994      	ldr	r1, [pc, #592]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fac:	4b8f      	ldr	r3, [pc, #572]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	498c      	ldr	r1, [pc, #560]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fce:	4b87      	ldr	r3, [pc, #540]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fdc:	4983      	ldr	r1, [pc, #524]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ff0:	4b7e      	ldr	r3, [pc, #504]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffe:	497b      	ldr	r1, [pc, #492]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004012:	4b76      	ldr	r3, [pc, #472]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004018:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004020:	4972      	ldr	r1, [pc, #456]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004034:	4b6d      	ldr	r3, [pc, #436]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004042:	496a      	ldr	r1, [pc, #424]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004056:	4b65      	ldr	r3, [pc, #404]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004064:	4961      	ldr	r1, [pc, #388]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d031      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800407c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004080:	d00e      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004082:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004086:	d814      	bhi.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004088:	2b00      	cmp	r3, #0
 800408a:	d015      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800408c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004090:	d10f      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004092:	4b56      	ldr	r3, [pc, #344]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	4a55      	ldr	r2, [pc, #340]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004098:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800409c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800409e:	e00c      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3304      	adds	r3, #4
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 f98c 	bl	80043c4 <RCCEx_PLLSAI1_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80040b0:	e003      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	77fb      	strb	r3, [r7, #31]
        break;
 80040b6:	e000      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80040b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ba:	7ffb      	ldrb	r3, [r7, #31]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10b      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040c0:	4b4a      	ldr	r3, [pc, #296]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ce:	4947      	ldr	r1, [pc, #284]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040d6:	e001      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d8:	7ffb      	ldrb	r3, [r7, #31]
 80040da:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040e8:	4b40      	ldr	r3, [pc, #256]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f6:	493d      	ldr	r1, [pc, #244]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800410a:	4b38      	ldr	r3, [pc, #224]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004110:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004118:	4934      	ldr	r1, [pc, #208]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800412c:	4b2f      	ldr	r3, [pc, #188]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004132:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413a:	492c      	ldr	r1, [pc, #176]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800414e:	4b27      	ldr	r3, [pc, #156]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004150:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004154:	f023 0203 	bic.w	r2, r3, #3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415c:	4923      	ldr	r1, [pc, #140]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d028      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x526>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004170:	4b1e      	ldr	r3, [pc, #120]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417e:	491b      	ldr	r1, [pc, #108]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800418a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800418e:	d106      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004190:	4b16      	ldr	r3, [pc, #88]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	4a15      	ldr	r2, [pc, #84]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800419a:	60d3      	str	r3, [r2, #12]
 800419c:	e011      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x526>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041a6:	d10c      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	2101      	movs	r1, #1
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 f908 	bl	80043c4 <RCCEx_PLLSAI1_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80041b8:	7ffb      	ldrb	r3, [r7, #31]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x526>
        {
          /* set overall return value */
          status = ret;
 80041be:	7ffb      	ldrb	r3, [r7, #31]
 80041c0:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d04d      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041d6:	d10b      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80041d8:	4b04      	ldr	r3, [pc, #16]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80041da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041de:	4a03      	ldr	r2, [pc, #12]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80041e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041e4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80041e8:	e015      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80041ea:	bf00      	nop
 80041ec:	40021000 	.word	0x40021000
 80041f0:	4b6b      	ldr	r3, [pc, #428]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041fe:	4968      	ldr	r1, [pc, #416]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004206:	4b66      	ldr	r3, [pc, #408]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004208:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800420c:	4a64      	ldr	r2, [pc, #400]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800420e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004212:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800421a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800421e:	d10d      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3304      	adds	r3, #4
 8004224:	2101      	movs	r1, #1
 8004226:	4618      	mov	r0, r3
 8004228:	f000 f8cc 	bl	80043c4 <RCCEx_PLLSAI1_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004230:	7ffb      	ldrb	r3, [r7, #31]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d019      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8004236:	7ffb      	ldrb	r3, [r7, #31]
 8004238:	77bb      	strb	r3, [r7, #30]
 800423a:	e016      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004244:	d106      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004246:	4b56      	ldr	r3, [pc, #344]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	4a55      	ldr	r2, [pc, #340]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800424c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004250:	60d3      	str	r3, [r2, #12]
 8004252:	e00a      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800425c:	d105      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800425e:	4b50      	ldr	r3, [pc, #320]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	4a4f      	ldr	r2, [pc, #316]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004268:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d028      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004276:	4b4a      	ldr	r3, [pc, #296]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004284:	4946      	ldr	r1, [pc, #280]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004290:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004294:	d106      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004296:	4b42      	ldr	r3, [pc, #264]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	4a41      	ldr	r2, [pc, #260]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800429c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042a0:	60d3      	str	r3, [r2, #12]
 80042a2:	e011      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3304      	adds	r3, #4
 80042b2:	2101      	movs	r1, #1
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 f885 	bl	80043c4 <RCCEx_PLLSAI1_Config>
 80042ba:	4603      	mov	r3, r0
 80042bc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80042be:	7ffb      	ldrb	r3, [r7, #31]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80042c4:	7ffb      	ldrb	r3, [r7, #31]
 80042c6:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01e      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042d4:	4b32      	ldr	r3, [pc, #200]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e4:	492e      	ldr	r1, [pc, #184]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042f6:	d10c      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3304      	adds	r3, #4
 80042fc:	2102      	movs	r1, #2
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 f860 	bl	80043c4 <RCCEx_PLLSAI1_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004308:	7ffb      	ldrb	r3, [r7, #31]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800430e:	7ffb      	ldrb	r3, [r7, #31]
 8004310:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800431e:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004320:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004324:	f023 0204 	bic.w	r2, r3, #4
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432e:	491c      	ldr	r1, [pc, #112]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00b      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004342:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004344:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004348:	f023 0218 	bic.w	r2, r3, #24
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004352:	4913      	ldr	r1, [pc, #76]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d017      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004366:	4b0e      	ldr	r3, [pc, #56]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004368:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800436c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004376:	490a      	ldr	r1, [pc, #40]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004384:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004388:	d105      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800438a:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	4a04      	ldr	r2, [pc, #16]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004390:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004394:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004396:	7fbb      	ldrb	r3, [r7, #30]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3720      	adds	r7, #32
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40021000 	.word	0x40021000

080043a4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80043a8:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a04      	ldr	r2, [pc, #16]	; (80043c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80043ae:	f043 0304 	orr.w	r3, r3, #4
 80043b2:	6013      	str	r3, [r2, #0]
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40021000 	.word	0x40021000

080043c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d018      	beq.n	800440c <RCCEx_PLLSAI1_Config+0x48>
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d81f      	bhi.n	800441e <RCCEx_PLLSAI1_Config+0x5a>
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d002      	beq.n	80043e8 <RCCEx_PLLSAI1_Config+0x24>
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d009      	beq.n	80043fa <RCCEx_PLLSAI1_Config+0x36>
 80043e6:	e01a      	b.n	800441e <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043e8:	4b65      	ldr	r3, [pc, #404]	; (8004580 <RCCEx_PLLSAI1_Config+0x1bc>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d117      	bne.n	8004424 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f8:	e014      	b.n	8004424 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043fa:	4b61      	ldr	r3, [pc, #388]	; (8004580 <RCCEx_PLLSAI1_Config+0x1bc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004402:	2b00      	cmp	r3, #0
 8004404:	d110      	bne.n	8004428 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800440a:	e00d      	b.n	8004428 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800440c:	4b5c      	ldr	r3, [pc, #368]	; (8004580 <RCCEx_PLLSAI1_Config+0x1bc>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d109      	bne.n	800442c <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800441c:	e006      	b.n	800442c <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	73fb      	strb	r3, [r7, #15]
      break;
 8004422:	e004      	b.n	800442e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004424:	bf00      	nop
 8004426:	e002      	b.n	800442e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004428:	bf00      	nop
 800442a:	e000      	b.n	800442e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800442c:	bf00      	nop
  }

  if (status == HAL_OK)
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	2b00      	cmp	r3, #0
 8004432:	f040 809f 	bne.w	8004574 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004436:	4b52      	ldr	r3, [pc, #328]	; (8004580 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a51      	ldr	r2, [pc, #324]	; (8004580 <RCCEx_PLLSAI1_Config+0x1bc>)
 800443c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004442:	f7fc fb7d 	bl	8000b40 <HAL_GetTick>
 8004446:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004448:	e00f      	b.n	800446a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800444a:	f7fc fb79 	bl	8000b40 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d908      	bls.n	800446a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004458:	4b49      	ldr	r3, [pc, #292]	; (8004580 <RCCEx_PLLSAI1_Config+0x1bc>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d009      	beq.n	8004478 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004468:	e006      	b.n	8004478 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800446a:	4b45      	ldr	r3, [pc, #276]	; (8004580 <RCCEx_PLLSAI1_Config+0x1bc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1e9      	bne.n	800444a <RCCEx_PLLSAI1_Config+0x86>
 8004476:	e000      	b.n	800447a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004478:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d179      	bne.n	8004574 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d116      	bne.n	80044b4 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004486:	4b3e      	ldr	r3, [pc, #248]	; (8004580 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	4b3e      	ldr	r3, [pc, #248]	; (8004584 <RCCEx_PLLSAI1_Config+0x1c0>)
 800448c:	4013      	ands	r3, r2
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6892      	ldr	r2, [r2, #8]
 8004492:	0211      	lsls	r1, r2, #8
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	68d2      	ldr	r2, [r2, #12]
 8004498:	06d2      	lsls	r2, r2, #27
 800449a:	4311      	orrs	r1, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6852      	ldr	r2, [r2, #4]
 80044a0:	3a01      	subs	r2, #1
 80044a2:	0112      	lsls	r2, r2, #4
 80044a4:	4311      	orrs	r1, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	4934      	ldr	r1, [pc, #208]	; (8004580 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	610b      	str	r3, [r1, #16]
 80044b2:	e033      	b.n	800451c <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d118      	bne.n	80044ec <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044ba:	4b31      	ldr	r3, [pc, #196]	; (8004580 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	4b32      	ldr	r3, [pc, #200]	; (8004588 <RCCEx_PLLSAI1_Config+0x1c4>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6892      	ldr	r2, [r2, #8]
 80044c6:	0211      	lsls	r1, r2, #8
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6912      	ldr	r2, [r2, #16]
 80044cc:	0852      	lsrs	r2, r2, #1
 80044ce:	3a01      	subs	r2, #1
 80044d0:	0552      	lsls	r2, r2, #21
 80044d2:	4311      	orrs	r1, r2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6852      	ldr	r2, [r2, #4]
 80044d8:	3a01      	subs	r2, #1
 80044da:	0112      	lsls	r2, r2, #4
 80044dc:	4311      	orrs	r1, r2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6812      	ldr	r2, [r2, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	4926      	ldr	r1, [pc, #152]	; (8004580 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	610b      	str	r3, [r1, #16]
 80044ea:	e017      	b.n	800451c <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044ec:	4b24      	ldr	r3, [pc, #144]	; (8004580 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	4b26      	ldr	r3, [pc, #152]	; (800458c <RCCEx_PLLSAI1_Config+0x1c8>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6892      	ldr	r2, [r2, #8]
 80044f8:	0211      	lsls	r1, r2, #8
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6952      	ldr	r2, [r2, #20]
 80044fe:	0852      	lsrs	r2, r2, #1
 8004500:	3a01      	subs	r2, #1
 8004502:	0652      	lsls	r2, r2, #25
 8004504:	4311      	orrs	r1, r2
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6852      	ldr	r2, [r2, #4]
 800450a:	3a01      	subs	r2, #1
 800450c:	0112      	lsls	r2, r2, #4
 800450e:	4311      	orrs	r1, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	491a      	ldr	r1, [pc, #104]	; (8004580 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004518:	4313      	orrs	r3, r2
 800451a:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800451c:	4b18      	ldr	r3, [pc, #96]	; (8004580 <RCCEx_PLLSAI1_Config+0x1bc>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a17      	ldr	r2, [pc, #92]	; (8004580 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004522:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004526:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004528:	f7fc fb0a 	bl	8000b40 <HAL_GetTick>
 800452c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800452e:	e00f      	b.n	8004550 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004530:	f7fc fb06 	bl	8000b40 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d908      	bls.n	8004550 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800453e:	4b10      	ldr	r3, [pc, #64]	; (8004580 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d109      	bne.n	800455e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800454e:	e006      	b.n	800455e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0e9      	beq.n	8004530 <RCCEx_PLLSAI1_Config+0x16c>
 800455c:	e000      	b.n	8004560 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800455e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004566:	4b06      	ldr	r3, [pc, #24]	; (8004580 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	4904      	ldr	r1, [pc, #16]	; (8004580 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004570:	4313      	orrs	r3, r2
 8004572:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004574:	7bfb      	ldrb	r3, [r7, #15]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40021000 	.word	0x40021000
 8004584:	07ff800c 	.word	0x07ff800c
 8004588:	ff9f800c 	.word	0xff9f800c
 800458c:	f9ff800c 	.word	0xf9ff800c

08004590 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d018      	beq.n	80045d8 <RCCEx_PLLSAI2_Config+0x48>
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d81f      	bhi.n	80045ea <RCCEx_PLLSAI2_Config+0x5a>
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d002      	beq.n	80045b4 <RCCEx_PLLSAI2_Config+0x24>
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d009      	beq.n	80045c6 <RCCEx_PLLSAI2_Config+0x36>
 80045b2:	e01a      	b.n	80045ea <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045b4:	4b4a      	ldr	r3, [pc, #296]	; (80046e0 <RCCEx_PLLSAI2_Config+0x150>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d117      	bne.n	80045f0 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c4:	e014      	b.n	80045f0 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045c6:	4b46      	ldr	r3, [pc, #280]	; (80046e0 <RCCEx_PLLSAI2_Config+0x150>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d110      	bne.n	80045f4 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d6:	e00d      	b.n	80045f4 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80045d8:	4b41      	ldr	r3, [pc, #260]	; (80046e0 <RCCEx_PLLSAI2_Config+0x150>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d109      	bne.n	80045f8 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e8:	e006      	b.n	80045f8 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
      break;
 80045ee:	e004      	b.n	80045fa <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80045f0:	bf00      	nop
 80045f2:	e002      	b.n	80045fa <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80045f4:	bf00      	nop
 80045f6:	e000      	b.n	80045fa <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80045f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d169      	bne.n	80046d4 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004600:	4b37      	ldr	r3, [pc, #220]	; (80046e0 <RCCEx_PLLSAI2_Config+0x150>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a36      	ldr	r2, [pc, #216]	; (80046e0 <RCCEx_PLLSAI2_Config+0x150>)
 8004606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800460a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800460c:	f7fc fa98 	bl	8000b40 <HAL_GetTick>
 8004610:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004612:	e00f      	b.n	8004634 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004614:	f7fc fa94 	bl	8000b40 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d908      	bls.n	8004634 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004622:	4b2f      	ldr	r3, [pc, #188]	; (80046e0 <RCCEx_PLLSAI2_Config+0x150>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004632:	e006      	b.n	8004642 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004634:	4b2a      	ldr	r3, [pc, #168]	; (80046e0 <RCCEx_PLLSAI2_Config+0x150>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e9      	bne.n	8004614 <RCCEx_PLLSAI2_Config+0x84>
 8004640:	e000      	b.n	8004644 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8004642:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d144      	bne.n	80046d4 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d115      	bne.n	800467c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004650:	4b23      	ldr	r3, [pc, #140]	; (80046e0 <RCCEx_PLLSAI2_Config+0x150>)
 8004652:	695a      	ldr	r2, [r3, #20]
 8004654:	4b23      	ldr	r3, [pc, #140]	; (80046e4 <RCCEx_PLLSAI2_Config+0x154>)
 8004656:	4013      	ands	r3, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6892      	ldr	r2, [r2, #8]
 800465c:	0211      	lsls	r1, r2, #8
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	68d2      	ldr	r2, [r2, #12]
 8004662:	06d2      	lsls	r2, r2, #27
 8004664:	4311      	orrs	r1, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6852      	ldr	r2, [r2, #4]
 800466a:	3a01      	subs	r2, #1
 800466c:	0112      	lsls	r2, r2, #4
 800466e:	4311      	orrs	r1, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6812      	ldr	r2, [r2, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	491a      	ldr	r1, [pc, #104]	; (80046e0 <RCCEx_PLLSAI2_Config+0x150>)
 8004678:	4313      	orrs	r3, r2
 800467a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800467c:	4b18      	ldr	r3, [pc, #96]	; (80046e0 <RCCEx_PLLSAI2_Config+0x150>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a17      	ldr	r2, [pc, #92]	; (80046e0 <RCCEx_PLLSAI2_Config+0x150>)
 8004682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004686:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004688:	f7fc fa5a 	bl	8000b40 <HAL_GetTick>
 800468c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800468e:	e00f      	b.n	80046b0 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004690:	f7fc fa56 	bl	8000b40 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d908      	bls.n	80046b0 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800469e:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <RCCEx_PLLSAI2_Config+0x150>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d109      	bne.n	80046be <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80046ae:	e006      	b.n	80046be <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <RCCEx_PLLSAI2_Config+0x150>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0e9      	beq.n	8004690 <RCCEx_PLLSAI2_Config+0x100>
 80046bc:	e000      	b.n	80046c0 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80046be:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80046c6:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <RCCEx_PLLSAI2_Config+0x150>)
 80046c8:	695a      	ldr	r2, [r3, #20]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	4904      	ldr	r1, [pc, #16]	; (80046e0 <RCCEx_PLLSAI2_Config+0x150>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40021000 	.word	0x40021000
 80046e4:	07ff800c 	.word	0x07ff800c

080046e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e095      	b.n	8004826 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d108      	bne.n	8004714 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800470a:	d009      	beq.n	8004720 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	61da      	str	r2, [r3, #28]
 8004712:	e005      	b.n	8004720 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fb ffa2 	bl	8000684 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004756:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004760:	d902      	bls.n	8004768 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	e002      	b.n	800476e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800476c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004776:	d007      	beq.n	8004788 <HAL_SPI_Init+0xa0>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004780:	d002      	beq.n	8004788 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ca:	ea42 0103 	orr.w	r1, r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	0c1b      	lsrs	r3, r3, #16
 80047e4:	f003 0204 	and.w	r2, r3, #4
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004804:	ea42 0103 	orr.w	r1, r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800482e:	b480      	push	{r7}
 8004830:	b085      	sub	sp, #20
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800483e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004842:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	b29a      	uxth	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004864:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004868:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	b29b      	uxth	r3, r3
 8004876:	43db      	mvns	r3, r3
 8004878:	b29b      	uxth	r3, r3
 800487a:	4013      	ands	r3, r2
 800487c:	b29a      	uxth	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004892:	b084      	sub	sp, #16
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	f107 0014 	add.w	r0, r7, #20
 80048a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	b004      	add	sp, #16
 80048d2:	4770      	bx	lr

080048d4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b09b      	sub	sp, #108	; 0x6c
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80048f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	78db      	ldrb	r3, [r3, #3]
 8004902:	2b03      	cmp	r3, #3
 8004904:	d81f      	bhi.n	8004946 <USB_ActivateEndpoint+0x72>
 8004906:	a201      	add	r2, pc, #4	; (adr r2, 800490c <USB_ActivateEndpoint+0x38>)
 8004908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490c:	0800491d 	.word	0x0800491d
 8004910:	08004939 	.word	0x08004939
 8004914:	0800494f 	.word	0x0800494f
 8004918:	0800492b 	.word	0x0800492b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800491c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004920:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004924:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004928:	e012      	b.n	8004950 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800492a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800492e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004932:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004936:	e00b      	b.n	8004950 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004938:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800493c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004940:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004944:	e004      	b.n	8004950 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800494c:	e000      	b.n	8004950 <USB_ActivateEndpoint+0x7c>
      break;
 800494e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	441a      	add	r2, r3
 800495a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800495e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800496a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496e:	b29b      	uxth	r3, r3
 8004970:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	b29b      	uxth	r3, r3
 8004980:	b21b      	sxth	r3, r3
 8004982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498a:	b21a      	sxth	r2, r3
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	b21b      	sxth	r3, r3
 8004992:	4313      	orrs	r3, r2
 8004994:	b21b      	sxth	r3, r3
 8004996:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	441a      	add	r2, r3
 80049a4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80049a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	7b1b      	ldrb	r3, [r3, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f040 8149 	bne.w	8004c58 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	785b      	ldrb	r3, [r3, #1]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 8084 	beq.w	8004ad8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049da:	b29b      	uxth	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	4413      	add	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	00da      	lsls	r2, r3, #3
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	88db      	ldrh	r3, [r3, #6]
 80049f8:	085b      	lsrs	r3, r3, #1
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	81fb      	strh	r3, [r7, #14]
 8004a12:	89fb      	ldrh	r3, [r7, #14]
 8004a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01b      	beq.n	8004a54 <USB_ActivateEndpoint+0x180>
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a32:	81bb      	strh	r3, [r7, #12]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	441a      	add	r2, r3
 8004a3e:	89bb      	ldrh	r3, [r7, #12]
 8004a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	78db      	ldrb	r3, [r3, #3]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d020      	beq.n	8004a9e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a72:	813b      	strh	r3, [r7, #8]
 8004a74:	893b      	ldrh	r3, [r7, #8]
 8004a76:	f083 0320 	eor.w	r3, r3, #32
 8004a7a:	813b      	strh	r3, [r7, #8]
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	441a      	add	r2, r3
 8004a86:	893b      	ldrh	r3, [r7, #8]
 8004a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	8013      	strh	r3, [r2, #0]
 8004a9c:	e27f      	b.n	8004f9e <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ab4:	817b      	strh	r3, [r7, #10]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	441a      	add	r2, r3
 8004ac0:	897b      	ldrh	r3, [r7, #10]
 8004ac2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	8013      	strh	r3, [r2, #0]
 8004ad6:	e262      	b.n	8004f9e <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae8:	4413      	add	r3, r2
 8004aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	00da      	lsls	r2, r3, #3
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	4413      	add	r3, r2
 8004af6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	88db      	ldrh	r3, [r3, #6]
 8004b00:	085b      	lsrs	r3, r3, #1
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	4413      	add	r3, r2
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	00da      	lsls	r2, r3, #3
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	4413      	add	r3, r2
 8004b2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b2e:	623b      	str	r3, [r7, #32]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d112      	bne.n	8004b5e <USB_ActivateEndpoint+0x28a>
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	801a      	strh	r2, [r3, #0]
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	801a      	strh	r2, [r3, #0]
 8004b5c:	e02f      	b.n	8004bbe <USB_ActivateEndpoint+0x2ea>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	2b3e      	cmp	r3, #62	; 0x3e
 8004b64:	d813      	bhi.n	8004b8e <USB_ActivateEndpoint+0x2ba>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	085b      	lsrs	r3, r3, #1
 8004b6c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <USB_ActivateEndpoint+0x2ac>
 8004b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	663b      	str	r3, [r7, #96]	; 0x60
 8004b80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	029b      	lsls	r3, r3, #10
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	801a      	strh	r2, [r3, #0]
 8004b8c:	e017      	b.n	8004bbe <USB_ActivateEndpoint+0x2ea>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	663b      	str	r3, [r7, #96]	; 0x60
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 031f 	and.w	r3, r3, #31
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d102      	bne.n	8004ba8 <USB_ActivateEndpoint+0x2d4>
 8004ba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ba8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	029b      	lsls	r3, r3, #10
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	83fb      	strh	r3, [r7, #30]
 8004bcc:	8bfb      	ldrh	r3, [r7, #30]
 8004bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d01b      	beq.n	8004c0e <USB_ActivateEndpoint+0x33a>
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bec:	83bb      	strh	r3, [r7, #28]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	441a      	add	r2, r3
 8004bf8:	8bbb      	ldrh	r3, [r7, #28]
 8004bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c24:	837b      	strh	r3, [r7, #26]
 8004c26:	8b7b      	ldrh	r3, [r7, #26]
 8004c28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c2c:	837b      	strh	r3, [r7, #26]
 8004c2e:	8b7b      	ldrh	r3, [r7, #26]
 8004c30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c34:	837b      	strh	r3, [r7, #26]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	441a      	add	r2, r3
 8004c40:	8b7b      	ldrh	r3, [r7, #26]
 8004c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	8013      	strh	r3, [r2, #0]
 8004c56:	e1a2      	b.n	8004f9e <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	441a      	add	r2, r3
 8004c7c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c88:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ca4:	4413      	add	r3, r2
 8004ca6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	00da      	lsls	r2, r3, #3
 8004cae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cb6:	657b      	str	r3, [r7, #84]	; 0x54
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	891b      	ldrh	r3, [r3, #8]
 8004cbc:	085b      	lsrs	r3, r3, #1
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc6:	801a      	strh	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	653b      	str	r3, [r7, #80]	; 0x50
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cd8:	4413      	add	r3, r2
 8004cda:	653b      	str	r3, [r7, #80]	; 0x50
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	00da      	lsls	r2, r3, #3
 8004ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	895b      	ldrh	r3, [r3, #10]
 8004cf0:	085b      	lsrs	r3, r3, #1
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cfa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	785b      	ldrb	r3, [r3, #1]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f040 8091 	bne.w	8004e28 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004d14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d01b      	beq.n	8004d56 <USB_ActivateEndpoint+0x482>
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d34:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	441a      	add	r2, r3
 8004d40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	873b      	strh	r3, [r7, #56]	; 0x38
 8004d64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01b      	beq.n	8004da6 <USB_ActivateEndpoint+0x4d2>
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d84:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	441a      	add	r2, r3
 8004d90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dbc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004dbe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004dc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004dc4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004dc6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004dc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004dcc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	441a      	add	r2, r3
 8004dd8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e04:	867b      	strh	r3, [r7, #50]	; 0x32
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	441a      	add	r2, r3
 8004e10:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	8013      	strh	r3, [r2, #0]
 8004e26:	e0ba      	b.n	8004f9e <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004e38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01d      	beq.n	8004e80 <USB_ActivateEndpoint+0x5ac>
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	441a      	add	r2, r3
 8004e68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004e90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01d      	beq.n	8004ed8 <USB_ActivateEndpoint+0x604>
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	441a      	add	r2, r3
 8004ec0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	78db      	ldrb	r3, [r3, #3]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d024      	beq.n	8004f2a <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004efa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004efe:	f083 0320 	eor.w	r3, r3, #32
 8004f02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	441a      	add	r2, r3
 8004f10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	8013      	strh	r3, [r2, #0]
 8004f28:	e01d      	b.n	8004f66 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	441a      	add	r2, r3
 8004f4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	441a      	add	r2, r3
 8004f88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004f9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	376c      	adds	r7, #108	; 0x6c
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop

08004fb0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b08d      	sub	sp, #52	; 0x34
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	7b1b      	ldrb	r3, [r3, #12]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f040 808e 	bne.w	80050e0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	785b      	ldrb	r3, [r3, #1]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d044      	beq.n	8005056 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	81bb      	strh	r3, [r7, #12]
 8004fda:	89bb      	ldrh	r3, [r7, #12]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d01b      	beq.n	800501c <USB_DeactivateEndpoint+0x6c>
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffa:	817b      	strh	r3, [r7, #10]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	441a      	add	r2, r3
 8005006:	897b      	ldrh	r3, [r7, #10]
 8005008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800500c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005014:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005018:	b29b      	uxth	r3, r3
 800501a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	b29b      	uxth	r3, r3
 800502a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800502e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005032:	813b      	strh	r3, [r7, #8]
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	441a      	add	r2, r3
 800503e:	893b      	ldrh	r3, [r7, #8]
 8005040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800504c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005050:	b29b      	uxth	r3, r3
 8005052:	8013      	strh	r3, [r2, #0]
 8005054:	e192      	b.n	800537c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	827b      	strh	r3, [r7, #18]
 8005064:	8a7b      	ldrh	r3, [r7, #18]
 8005066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d01b      	beq.n	80050a6 <USB_DeactivateEndpoint+0xf6>
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	b29b      	uxth	r3, r3
 800507c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005084:	823b      	strh	r3, [r7, #16]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	441a      	add	r2, r3
 8005090:	8a3b      	ldrh	r3, [r7, #16]
 8005092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800509a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800509e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050bc:	81fb      	strh	r3, [r7, #14]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	441a      	add	r2, r3
 80050c8:	89fb      	ldrh	r3, [r7, #14]
 80050ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050da:	b29b      	uxth	r3, r3
 80050dc:	8013      	strh	r3, [r2, #0]
 80050de:	e14d      	b.n	800537c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	785b      	ldrb	r3, [r3, #1]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f040 80a5 	bne.w	8005234 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	843b      	strh	r3, [r7, #32]
 80050f8:	8c3b      	ldrh	r3, [r7, #32]
 80050fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d01b      	beq.n	800513a <USB_DeactivateEndpoint+0x18a>
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	b29b      	uxth	r3, r3
 8005110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005118:	83fb      	strh	r3, [r7, #30]
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	441a      	add	r2, r3
 8005124:	8bfb      	ldrh	r3, [r7, #30]
 8005126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800512a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800512e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005136:	b29b      	uxth	r3, r3
 8005138:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	83bb      	strh	r3, [r7, #28]
 8005148:	8bbb      	ldrh	r3, [r7, #28]
 800514a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514e:	2b00      	cmp	r3, #0
 8005150:	d01b      	beq.n	800518a <USB_DeactivateEndpoint+0x1da>
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	b29b      	uxth	r3, r3
 8005160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005168:	837b      	strh	r3, [r7, #26]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	441a      	add	r2, r3
 8005174:	8b7b      	ldrh	r3, [r7, #26]
 8005176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800517a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800517e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005182:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005186:	b29b      	uxth	r3, r3
 8005188:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800519c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a0:	833b      	strh	r3, [r7, #24]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	441a      	add	r2, r3
 80051ac:	8b3b      	ldrh	r3, [r7, #24]
 80051ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051be:	b29b      	uxth	r3, r3
 80051c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d8:	82fb      	strh	r3, [r7, #22]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	441a      	add	r2, r3
 80051e4:	8afb      	ldrh	r3, [r7, #22]
 80051e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005210:	82bb      	strh	r3, [r7, #20]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	441a      	add	r2, r3
 800521c:	8abb      	ldrh	r3, [r7, #20]
 800521e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522e:	b29b      	uxth	r3, r3
 8005230:	8013      	strh	r3, [r2, #0]
 8005232:	e0a3      	b.n	800537c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005242:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01b      	beq.n	8005284 <USB_DeactivateEndpoint+0x2d4>
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800525e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005262:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	441a      	add	r2, r3
 800526e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800527c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005280:	b29b      	uxth	r3, r3
 8005282:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005292:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01b      	beq.n	80052d4 <USB_DeactivateEndpoint+0x324>
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	881b      	ldrh	r3, [r3, #0]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b2:	853b      	strh	r3, [r7, #40]	; 0x28
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	441a      	add	r2, r3
 80052be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80052c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	441a      	add	r2, r3
 80052f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80052f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005300:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005308:	b29b      	uxth	r3, r3
 800530a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	b29b      	uxth	r3, r3
 800531a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005322:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	441a      	add	r2, r3
 800532e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800533c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005340:	b29b      	uxth	r3, r3
 8005342:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	b29b      	uxth	r3, r3
 8005352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535a:	847b      	strh	r3, [r7, #34]	; 0x22
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	441a      	add	r2, r3
 8005366:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800536c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005378:	b29b      	uxth	r3, r3
 800537a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3734      	adds	r7, #52	; 0x34
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b0cc      	sub	sp, #304	; 0x130
 800538e:	af00      	add	r7, sp, #0
 8005390:	1d3b      	adds	r3, r7, #4
 8005392:	6018      	str	r0, [r3, #0]
 8005394:	463b      	mov	r3, r7
 8005396:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005398:	463b      	mov	r3, r7
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	785b      	ldrb	r3, [r3, #1]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	f040 872e 	bne.w	8006200 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80053a4:	463b      	mov	r3, r7
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	463b      	mov	r3, r7
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d905      	bls.n	80053c0 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80053b4:	463b      	mov	r3, r7
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80053be:	e004      	b.n	80053ca <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80053c0:	463b      	mov	r3, r7
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80053ca:	463b      	mov	r3, r7
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	7b1b      	ldrb	r3, [r3, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d134      	bne.n	800543e <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80053d4:	463b      	mov	r3, r7
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6959      	ldr	r1, [r3, #20]
 80053da:	463b      	mov	r3, r7
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	88da      	ldrh	r2, [r3, #6]
 80053e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	1d38      	adds	r0, r7, #4
 80053e8:	6800      	ldr	r0, [r0, #0]
 80053ea:	f001 fbff 	bl	8006bec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80053ee:	f107 0310 	add.w	r3, r7, #16
 80053f2:	1d3a      	adds	r2, r7, #4
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	1d3b      	adds	r3, r7, #4
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005400:	b29b      	uxth	r3, r3
 8005402:	4619      	mov	r1, r3
 8005404:	f107 0310 	add.w	r3, r7, #16
 8005408:	f107 0210 	add.w	r2, r7, #16
 800540c:	6812      	ldr	r2, [r2, #0]
 800540e:	440a      	add	r2, r1
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	463b      	mov	r3, r7
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	00da      	lsls	r2, r3, #3
 800541a:	f107 0310 	add.w	r3, r7, #16
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4413      	add	r3, r2
 8005422:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005426:	f107 030c 	add.w	r3, r7, #12
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005430:	b29a      	uxth	r2, r3
 8005432:	f107 030c 	add.w	r3, r7, #12
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	801a      	strh	r2, [r3, #0]
 800543a:	f000 beac 	b.w	8006196 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800543e:	463b      	mov	r3, r7
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	78db      	ldrb	r3, [r3, #3]
 8005444:	2b02      	cmp	r3, #2
 8005446:	f040 838c 	bne.w	8005b62 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800544a:	463b      	mov	r3, r7
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6a1a      	ldr	r2, [r3, #32]
 8005450:	463b      	mov	r3, r7
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	429a      	cmp	r2, r3
 8005458:	f240 8330 	bls.w	8005abc <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800545c:	1d3b      	adds	r3, r7, #4
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	463b      	mov	r3, r7
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800547a:	1d3b      	adds	r3, r7, #4
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	463b      	mov	r3, r7
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	441a      	add	r2, r3
 8005488:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800548c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005494:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549c:	b29b      	uxth	r3, r3
 800549e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80054a0:	463b      	mov	r3, r7
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6a1a      	ldr	r2, [r3, #32]
 80054a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054aa:	1ad2      	subs	r2, r2, r3
 80054ac:	463b      	mov	r3, r7
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80054b2:	1d3b      	adds	r3, r7, #4
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	463b      	mov	r3, r7
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 819e 	beq.w	800580a <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054d2:	1d3a      	adds	r2, r7, #4
 80054d4:	6812      	ldr	r2, [r2, #0]
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	463b      	mov	r3, r7
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	785b      	ldrb	r3, [r3, #1]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d17a      	bne.n	80055d8 <USB_EPStartXfer+0x24e>
 80054e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054e6:	1d3a      	adds	r2, r7, #4
 80054e8:	6812      	ldr	r2, [r2, #0]
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	1d3b      	adds	r3, r7, #4
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	4619      	mov	r1, r3
 80054f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005500:	6812      	ldr	r2, [r2, #0]
 8005502:	440a      	add	r2, r1
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	463b      	mov	r3, r7
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	00da      	lsls	r2, r3, #3
 800550e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4413      	add	r3, r2
 8005516:	f203 4206 	addw	r2, r3, #1030	; 0x406
 800551a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005524:	2b00      	cmp	r3, #0
 8005526:	d11a      	bne.n	800555e <USB_EPStartXfer+0x1d4>
 8005528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b29b      	uxth	r3, r3
 8005532:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005536:	b29a      	uxth	r2, r3
 8005538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	801a      	strh	r2, [r3, #0]
 8005540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	b29b      	uxth	r3, r3
 800554a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800554e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005552:	b29a      	uxth	r2, r3
 8005554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	801a      	strh	r2, [r3, #0]
 800555c:	e062      	b.n	8005624 <USB_EPStartXfer+0x29a>
 800555e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005562:	2b3e      	cmp	r3, #62	; 0x3e
 8005564:	d819      	bhi.n	800559a <USB_EPStartXfer+0x210>
 8005566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800556a:	085b      	lsrs	r3, r3, #1
 800556c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <USB_EPStartXfer+0x1fc>
 800557c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005580:	3301      	adds	r3, #1
 8005582:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005586:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800558a:	b29b      	uxth	r3, r3
 800558c:	029b      	lsls	r3, r3, #10
 800558e:	b29a      	uxth	r2, r3
 8005590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	801a      	strh	r2, [r3, #0]
 8005598:	e044      	b.n	8005624 <USB_EPStartXfer+0x29a>
 800559a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800559e:	095b      	lsrs	r3, r3, #5
 80055a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80055a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055a8:	f003 031f 	and.w	r3, r3, #31
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d104      	bne.n	80055ba <USB_EPStartXfer+0x230>
 80055b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055b4:	3b01      	subs	r3, #1
 80055b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80055ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055be:	b29b      	uxth	r3, r3
 80055c0:	029b      	lsls	r3, r3, #10
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	801a      	strh	r2, [r3, #0]
 80055d6:	e025      	b.n	8005624 <USB_EPStartXfer+0x29a>
 80055d8:	463b      	mov	r3, r7
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	785b      	ldrb	r3, [r3, #1]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d120      	bne.n	8005624 <USB_EPStartXfer+0x29a>
 80055e2:	1d3b      	adds	r3, r7, #4
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	4619      	mov	r1, r3
 80055ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80055f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80055f6:	6812      	ldr	r2, [r2, #0]
 80055f8:	440a      	add	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	463b      	mov	r3, r7
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	00da      	lsls	r2, r3, #3
 8005604:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4413      	add	r3, r2
 800560c:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8005610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800561a:	b29a      	uxth	r2, r3
 800561c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005624:	463b      	mov	r3, r7
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	895b      	ldrh	r3, [r3, #10]
 800562a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800562e:	463b      	mov	r3, r7
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6959      	ldr	r1, [r3, #20]
 8005634:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005638:	b29b      	uxth	r3, r3
 800563a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800563e:	1d38      	adds	r0, r7, #4
 8005640:	6800      	ldr	r0, [r0, #0]
 8005642:	f001 fad3 	bl	8006bec <USB_WritePMA>
            ep->xfer_buff += len;
 8005646:	463b      	mov	r3, r7
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	695a      	ldr	r2, [r3, #20]
 800564c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005650:	441a      	add	r2, r3
 8005652:	463b      	mov	r3, r7
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005658:	463b      	mov	r3, r7
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6a1a      	ldr	r2, [r3, #32]
 800565e:	463b      	mov	r3, r7
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	429a      	cmp	r2, r3
 8005666:	d909      	bls.n	800567c <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005668:	463b      	mov	r3, r7
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6a1a      	ldr	r2, [r3, #32]
 800566e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005672:	1ad2      	subs	r2, r2, r3
 8005674:	463b      	mov	r3, r7
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	621a      	str	r2, [r3, #32]
 800567a:	e008      	b.n	800568e <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800567c:	463b      	mov	r3, r7
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005686:	463b      	mov	r3, r7
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2200      	movs	r2, #0
 800568c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800568e:	463b      	mov	r3, r7
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	785b      	ldrb	r3, [r3, #1]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d17a      	bne.n	800578e <USB_EPStartXfer+0x404>
 8005698:	f107 0318 	add.w	r3, r7, #24
 800569c:	1d3a      	adds	r2, r7, #4
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	1d3b      	adds	r3, r7, #4
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	4619      	mov	r1, r3
 80056ae:	f107 0318 	add.w	r3, r7, #24
 80056b2:	f107 0218 	add.w	r2, r7, #24
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	440a      	add	r2, r1
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	463b      	mov	r3, r7
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	00da      	lsls	r2, r3, #3
 80056c4:	f107 0318 	add.w	r3, r7, #24
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4413      	add	r3, r2
 80056cc:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80056d0:	f107 0314 	add.w	r3, r7, #20
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d11a      	bne.n	8005714 <USB_EPStartXfer+0x38a>
 80056de:	f107 0314 	add.w	r3, r7, #20
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	f107 0314 	add.w	r3, r7, #20
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	801a      	strh	r2, [r3, #0]
 80056f6:	f107 0314 	add.w	r3, r7, #20
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005708:	b29a      	uxth	r2, r3
 800570a:	f107 0314 	add.w	r3, r7, #20
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	801a      	strh	r2, [r3, #0]
 8005712:	e067      	b.n	80057e4 <USB_EPStartXfer+0x45a>
 8005714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005718:	2b3e      	cmp	r3, #62	; 0x3e
 800571a:	d819      	bhi.n	8005750 <USB_EPStartXfer+0x3c6>
 800571c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005720:	085b      	lsrs	r3, r3, #1
 8005722:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d004      	beq.n	800573c <USB_EPStartXfer+0x3b2>
 8005732:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005736:	3301      	adds	r3, #1
 8005738:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800573c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005740:	b29b      	uxth	r3, r3
 8005742:	029b      	lsls	r3, r3, #10
 8005744:	b29a      	uxth	r2, r3
 8005746:	f107 0314 	add.w	r3, r7, #20
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	801a      	strh	r2, [r3, #0]
 800574e:	e049      	b.n	80057e4 <USB_EPStartXfer+0x45a>
 8005750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005754:	095b      	lsrs	r3, r3, #5
 8005756:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800575a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800575e:	f003 031f 	and.w	r3, r3, #31
 8005762:	2b00      	cmp	r3, #0
 8005764:	d104      	bne.n	8005770 <USB_EPStartXfer+0x3e6>
 8005766:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800576a:	3b01      	subs	r3, #1
 800576c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005770:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005774:	b29b      	uxth	r3, r3
 8005776:	029b      	lsls	r3, r3, #10
 8005778:	b29b      	uxth	r3, r3
 800577a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800577e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005782:	b29a      	uxth	r2, r3
 8005784:	f107 0314 	add.w	r3, r7, #20
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	801a      	strh	r2, [r3, #0]
 800578c:	e02a      	b.n	80057e4 <USB_EPStartXfer+0x45a>
 800578e:	463b      	mov	r3, r7
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d125      	bne.n	80057e4 <USB_EPStartXfer+0x45a>
 8005798:	f107 0320 	add.w	r3, r7, #32
 800579c:	1d3a      	adds	r2, r7, #4
 800579e:	6812      	ldr	r2, [r2, #0]
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	1d3b      	adds	r3, r7, #4
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	4619      	mov	r1, r3
 80057ae:	f107 0320 	add.w	r3, r7, #32
 80057b2:	f107 0220 	add.w	r2, r7, #32
 80057b6:	6812      	ldr	r2, [r2, #0]
 80057b8:	440a      	add	r2, r1
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	463b      	mov	r3, r7
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	00da      	lsls	r2, r3, #3
 80057c4:	f107 0320 	add.w	r3, r7, #32
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4413      	add	r3, r2
 80057cc:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80057d0:	f107 031c 	add.w	r3, r7, #28
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057da:	b29a      	uxth	r2, r3
 80057dc:	f107 031c 	add.w	r3, r7, #28
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80057e4:	463b      	mov	r3, r7
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	891b      	ldrh	r3, [r3, #8]
 80057ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057ee:	463b      	mov	r3, r7
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6959      	ldr	r1, [r3, #20]
 80057f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80057fe:	1d38      	adds	r0, r7, #4
 8005800:	6800      	ldr	r0, [r0, #0]
 8005802:	f001 f9f3 	bl	8006bec <USB_WritePMA>
 8005806:	f000 bcc6 	b.w	8006196 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800580a:	463b      	mov	r3, r7
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	785b      	ldrb	r3, [r3, #1]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d164      	bne.n	80058de <USB_EPStartXfer+0x554>
 8005814:	1d3b      	adds	r3, r7, #4
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	64bb      	str	r3, [r7, #72]	; 0x48
 800581a:	1d3b      	adds	r3, r7, #4
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005822:	b29b      	uxth	r3, r3
 8005824:	461a      	mov	r2, r3
 8005826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005828:	4413      	add	r3, r2
 800582a:	64bb      	str	r3, [r7, #72]	; 0x48
 800582c:	463b      	mov	r3, r7
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	00da      	lsls	r2, r3, #3
 8005834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005836:	4413      	add	r3, r2
 8005838:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800583c:	647b      	str	r3, [r7, #68]	; 0x44
 800583e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005842:	2b00      	cmp	r3, #0
 8005844:	d112      	bne.n	800586c <USB_EPStartXfer+0x4e2>
 8005846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	b29b      	uxth	r3, r3
 800584c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005850:	b29a      	uxth	r2, r3
 8005852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005854:	801a      	strh	r2, [r3, #0]
 8005856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	b29b      	uxth	r3, r3
 800585c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005864:	b29a      	uxth	r2, r3
 8005866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005868:	801a      	strh	r2, [r3, #0]
 800586a:	e057      	b.n	800591c <USB_EPStartXfer+0x592>
 800586c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005870:	2b3e      	cmp	r3, #62	; 0x3e
 8005872:	d817      	bhi.n	80058a4 <USB_EPStartXfer+0x51a>
 8005874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005878:	085b      	lsrs	r3, r3, #1
 800587a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800587e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d004      	beq.n	8005894 <USB_EPStartXfer+0x50a>
 800588a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800588e:	3301      	adds	r3, #1
 8005890:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005894:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005898:	b29b      	uxth	r3, r3
 800589a:	029b      	lsls	r3, r3, #10
 800589c:	b29a      	uxth	r2, r3
 800589e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058a0:	801a      	strh	r2, [r3, #0]
 80058a2:	e03b      	b.n	800591c <USB_EPStartXfer+0x592>
 80058a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a8:	095b      	lsrs	r3, r3, #5
 80058aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80058ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b2:	f003 031f 	and.w	r3, r3, #31
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d104      	bne.n	80058c4 <USB_EPStartXfer+0x53a>
 80058ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058be:	3b01      	subs	r3, #1
 80058c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80058c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	029b      	lsls	r3, r3, #10
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058da:	801a      	strh	r2, [r3, #0]
 80058dc:	e01e      	b.n	800591c <USB_EPStartXfer+0x592>
 80058de:	463b      	mov	r3, r7
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	785b      	ldrb	r3, [r3, #1]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d119      	bne.n	800591c <USB_EPStartXfer+0x592>
 80058e8:	1d3b      	adds	r3, r7, #4
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	653b      	str	r3, [r7, #80]	; 0x50
 80058ee:	1d3b      	adds	r3, r7, #4
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058fc:	4413      	add	r3, r2
 80058fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005900:	463b      	mov	r3, r7
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	00da      	lsls	r2, r3, #3
 8005908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800590a:	4413      	add	r3, r2
 800590c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005910:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005916:	b29a      	uxth	r2, r3
 8005918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800591c:	463b      	mov	r3, r7
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	891b      	ldrh	r3, [r3, #8]
 8005922:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005926:	463b      	mov	r3, r7
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6959      	ldr	r1, [r3, #20]
 800592c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005930:	b29b      	uxth	r3, r3
 8005932:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005936:	1d38      	adds	r0, r7, #4
 8005938:	6800      	ldr	r0, [r0, #0]
 800593a:	f001 f957 	bl	8006bec <USB_WritePMA>
            ep->xfer_buff += len;
 800593e:	463b      	mov	r3, r7
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695a      	ldr	r2, [r3, #20]
 8005944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005948:	441a      	add	r2, r3
 800594a:	463b      	mov	r3, r7
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005950:	463b      	mov	r3, r7
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6a1a      	ldr	r2, [r3, #32]
 8005956:	463b      	mov	r3, r7
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	429a      	cmp	r2, r3
 800595e:	d909      	bls.n	8005974 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005960:	463b      	mov	r3, r7
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6a1a      	ldr	r2, [r3, #32]
 8005966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800596a:	1ad2      	subs	r2, r2, r3
 800596c:	463b      	mov	r3, r7
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	621a      	str	r2, [r3, #32]
 8005972:	e008      	b.n	8005986 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005974:	463b      	mov	r3, r7
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800597e:	463b      	mov	r3, r7
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2200      	movs	r2, #0
 8005984:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005986:	1d3b      	adds	r3, r7, #4
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	643b      	str	r3, [r7, #64]	; 0x40
 800598c:	463b      	mov	r3, r7
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d164      	bne.n	8005a60 <USB_EPStartXfer+0x6d6>
 8005996:	1d3b      	adds	r3, r7, #4
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	63bb      	str	r3, [r7, #56]	; 0x38
 800599c:	1d3b      	adds	r3, r7, #4
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	461a      	mov	r2, r3
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	4413      	add	r3, r2
 80059ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80059ae:	463b      	mov	r3, r7
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	00da      	lsls	r2, r3, #3
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	4413      	add	r3, r2
 80059ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059be:	637b      	str	r3, [r7, #52]	; 0x34
 80059c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d112      	bne.n	80059ee <USB_EPStartXfer+0x664>
 80059c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d6:	801a      	strh	r2, [r3, #0]
 80059d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	801a      	strh	r2, [r3, #0]
 80059ec:	e054      	b.n	8005a98 <USB_EPStartXfer+0x70e>
 80059ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f2:	2b3e      	cmp	r3, #62	; 0x3e
 80059f4:	d817      	bhi.n	8005a26 <USB_EPStartXfer+0x69c>
 80059f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059fa:	085b      	lsrs	r3, r3, #1
 80059fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d004      	beq.n	8005a16 <USB_EPStartXfer+0x68c>
 8005a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a10:	3301      	adds	r3, #1
 8005a12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	029b      	lsls	r3, r3, #10
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a22:	801a      	strh	r2, [r3, #0]
 8005a24:	e038      	b.n	8005a98 <USB_EPStartXfer+0x70e>
 8005a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a34:	f003 031f 	and.w	r3, r3, #31
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d104      	bne.n	8005a46 <USB_EPStartXfer+0x6bc>
 8005a3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a40:	3b01      	subs	r3, #1
 8005a42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	029b      	lsls	r3, r3, #10
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	e01b      	b.n	8005a98 <USB_EPStartXfer+0x70e>
 8005a60:	463b      	mov	r3, r7
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	785b      	ldrb	r3, [r3, #1]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d116      	bne.n	8005a98 <USB_EPStartXfer+0x70e>
 8005a6a:	1d3b      	adds	r3, r7, #4
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	461a      	mov	r2, r3
 8005a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a78:	4413      	add	r3, r2
 8005a7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	00da      	lsls	r2, r3, #3
 8005a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a86:	4413      	add	r3, r2
 8005a88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a98:	463b      	mov	r3, r7
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	895b      	ldrh	r3, [r3, #10]
 8005a9e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005aa2:	463b      	mov	r3, r7
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6959      	ldr	r1, [r3, #20]
 8005aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ab2:	1d38      	adds	r0, r7, #4
 8005ab4:	6800      	ldr	r0, [r0, #0]
 8005ab6:	f001 f899 	bl	8006bec <USB_WritePMA>
 8005aba:	e36c      	b.n	8006196 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005abc:	463b      	mov	r3, r7
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005ac6:	1d3b      	adds	r3, r7, #4
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	463b      	mov	r3, r7
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005ae4:	1d3b      	adds	r3, r7, #4
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	463b      	mov	r3, r7
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	441a      	add	r2, r3
 8005af2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b0a:	1d3b      	adds	r3, r7, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b10:	1d3b      	adds	r3, r7, #4
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b1e:	4413      	add	r3, r2
 8005b20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b22:	463b      	mov	r3, r7
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	00da      	lsls	r2, r3, #3
 8005b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b32:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b3c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b3e:	463b      	mov	r3, r7
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	891b      	ldrh	r3, [r3, #8]
 8005b44:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b48:	463b      	mov	r3, r7
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6959      	ldr	r1, [r3, #20]
 8005b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b58:	1d38      	adds	r0, r7, #4
 8005b5a:	6800      	ldr	r0, [r0, #0]
 8005b5c:	f001 f846 	bl	8006bec <USB_WritePMA>
 8005b60:	e319      	b.n	8006196 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005b62:	1d3b      	adds	r3, r7, #4
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	463b      	mov	r3, r7
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005b80:	1d3b      	adds	r3, r7, #4
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	463b      	mov	r3, r7
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	441a      	add	r2, r3
 8005b8e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b9a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005ba6:	463b      	mov	r3, r7
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6a1a      	ldr	r2, [r3, #32]
 8005bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb0:	1ad2      	subs	r2, r2, r3
 8005bb2:	463b      	mov	r3, r7
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005bb8:	1d3b      	adds	r3, r7, #4
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	463b      	mov	r3, r7
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 8162 	beq.w	8005e98 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bd4:	1d3b      	adds	r3, r7, #4
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bdc:	463b      	mov	r3, r7
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	785b      	ldrb	r3, [r3, #1]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d164      	bne.n	8005cb0 <USB_EPStartXfer+0x926>
 8005be6:	1d3b      	adds	r3, r7, #4
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bec:	1d3b      	adds	r3, r7, #4
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bfa:	4413      	add	r3, r2
 8005bfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bfe:	463b      	mov	r3, r7
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	00da      	lsls	r2, r3, #3
 8005c06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c08:	4413      	add	r3, r2
 8005c0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c0e:	677b      	str	r3, [r7, #116]	; 0x74
 8005c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d112      	bne.n	8005c3e <USB_EPStartXfer+0x8b4>
 8005c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c26:	801a      	strh	r2, [r3, #0]
 8005c28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c3a:	801a      	strh	r2, [r3, #0]
 8005c3c:	e057      	b.n	8005cee <USB_EPStartXfer+0x964>
 8005c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c42:	2b3e      	cmp	r3, #62	; 0x3e
 8005c44:	d817      	bhi.n	8005c76 <USB_EPStartXfer+0x8ec>
 8005c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c4a:	085b      	lsrs	r3, r3, #1
 8005c4c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d004      	beq.n	8005c66 <USB_EPStartXfer+0x8dc>
 8005c5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c60:	3301      	adds	r3, #1
 8005c62:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c66:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	029b      	lsls	r3, r3, #10
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c72:	801a      	strh	r2, [r3, #0]
 8005c74:	e03b      	b.n	8005cee <USB_EPStartXfer+0x964>
 8005c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c84:	f003 031f 	and.w	r3, r3, #31
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d104      	bne.n	8005c96 <USB_EPStartXfer+0x90c>
 8005c8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c90:	3b01      	subs	r3, #1
 8005c92:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c96:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	029b      	lsls	r3, r3, #10
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cac:	801a      	strh	r2, [r3, #0]
 8005cae:	e01e      	b.n	8005cee <USB_EPStartXfer+0x964>
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	785b      	ldrb	r3, [r3, #1]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d119      	bne.n	8005cee <USB_EPStartXfer+0x964>
 8005cba:	1d3b      	adds	r3, r7, #4
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cca:	4413      	add	r3, r2
 8005ccc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cd0:	463b      	mov	r3, r7
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	00da      	lsls	r2, r3, #3
 8005cd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cdc:	4413      	add	r3, r2
 8005cde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ce2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005cee:	463b      	mov	r3, r7
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	895b      	ldrh	r3, [r3, #10]
 8005cf4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cf8:	463b      	mov	r3, r7
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6959      	ldr	r1, [r3, #20]
 8005cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d08:	1d38      	adds	r0, r7, #4
 8005d0a:	6800      	ldr	r0, [r0, #0]
 8005d0c:	f000 ff6e 	bl	8006bec <USB_WritePMA>
          ep->xfer_buff += len;
 8005d10:	463b      	mov	r3, r7
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695a      	ldr	r2, [r3, #20]
 8005d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d1a:	441a      	add	r2, r3
 8005d1c:	463b      	mov	r3, r7
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005d22:	463b      	mov	r3, r7
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6a1a      	ldr	r2, [r3, #32]
 8005d28:	463b      	mov	r3, r7
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d909      	bls.n	8005d46 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005d32:	463b      	mov	r3, r7
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6a1a      	ldr	r2, [r3, #32]
 8005d38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d3c:	1ad2      	subs	r2, r2, r3
 8005d3e:	463b      	mov	r3, r7
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	621a      	str	r2, [r3, #32]
 8005d44:	e008      	b.n	8005d58 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005d46:	463b      	mov	r3, r7
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005d50:	463b      	mov	r3, r7
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2200      	movs	r2, #0
 8005d56:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 821a 	beq.w	8006196 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d62:	463b      	mov	r3, r7
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	785b      	ldrb	r3, [r3, #1]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d164      	bne.n	8005e36 <USB_EPStartXfer+0xaac>
 8005d6c:	1d3b      	adds	r3, r7, #4
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d72:	1d3b      	adds	r3, r7, #4
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d80:	4413      	add	r3, r2
 8005d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d84:	463b      	mov	r3, r7
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	00da      	lsls	r2, r3, #3
 8005d8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d8e:	4413      	add	r3, r2
 8005d90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d94:	667b      	str	r3, [r7, #100]	; 0x64
 8005d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d112      	bne.n	8005dc4 <USB_EPStartXfer+0xa3a>
 8005d9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dac:	801a      	strh	r2, [r3, #0]
 8005dae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dc0:	801a      	strh	r2, [r3, #0]
 8005dc2:	e057      	b.n	8005e74 <USB_EPStartXfer+0xaea>
 8005dc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dc8:	2b3e      	cmp	r3, #62	; 0x3e
 8005dca:	d817      	bhi.n	8005dfc <USB_EPStartXfer+0xa72>
 8005dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd0:	085b      	lsrs	r3, r3, #1
 8005dd2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d004      	beq.n	8005dec <USB_EPStartXfer+0xa62>
 8005de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de6:	3301      	adds	r3, #1
 8005de8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	029b      	lsls	r3, r3, #10
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005df8:	801a      	strh	r2, [r3, #0]
 8005dfa:	e03b      	b.n	8005e74 <USB_EPStartXfer+0xaea>
 8005dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e00:	095b      	lsrs	r3, r3, #5
 8005e02:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e0a:	f003 031f 	and.w	r3, r3, #31
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d104      	bne.n	8005e1c <USB_EPStartXfer+0xa92>
 8005e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e16:	3b01      	subs	r3, #1
 8005e18:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	029b      	lsls	r3, r3, #10
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e32:	801a      	strh	r2, [r3, #0]
 8005e34:	e01e      	b.n	8005e74 <USB_EPStartXfer+0xaea>
 8005e36:	463b      	mov	r3, r7
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d119      	bne.n	8005e74 <USB_EPStartXfer+0xaea>
 8005e40:	1d3b      	adds	r3, r7, #4
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	673b      	str	r3, [r7, #112]	; 0x70
 8005e46:	1d3b      	adds	r3, r7, #4
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	461a      	mov	r2, r3
 8005e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e54:	4413      	add	r3, r2
 8005e56:	673b      	str	r3, [r7, #112]	; 0x70
 8005e58:	463b      	mov	r3, r7
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	00da      	lsls	r2, r3, #3
 8005e60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e62:	4413      	add	r3, r2
 8005e64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e74:	463b      	mov	r3, r7
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	891b      	ldrh	r3, [r3, #8]
 8005e7a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e7e:	463b      	mov	r3, r7
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6959      	ldr	r1, [r3, #20]
 8005e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e8e:	1d38      	adds	r0, r7, #4
 8005e90:	6800      	ldr	r0, [r0, #0]
 8005e92:	f000 feab 	bl	8006bec <USB_WritePMA>
 8005e96:	e17e      	b.n	8006196 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e98:	463b      	mov	r3, r7
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	785b      	ldrb	r3, [r3, #1]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d16f      	bne.n	8005f82 <USB_EPStartXfer+0xbf8>
 8005ea2:	1d3b      	adds	r3, r7, #4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005eaa:	1d3b      	adds	r3, r7, #4
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005eba:	4413      	add	r3, r2
 8005ebc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ec0:	463b      	mov	r3, r7
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	00da      	lsls	r2, r3, #3
 8005ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ecc:	4413      	add	r3, r2
 8005ece:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ed2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d116      	bne.n	8005f0c <USB_EPStartXfer+0xb82>
 8005ede:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ef0:	801a      	strh	r2, [r3, #0]
 8005ef2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f08:	801a      	strh	r2, [r3, #0]
 8005f0a:	e05f      	b.n	8005fcc <USB_EPStartXfer+0xc42>
 8005f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f10:	2b3e      	cmp	r3, #62	; 0x3e
 8005f12:	d818      	bhi.n	8005f46 <USB_EPStartXfer+0xbbc>
 8005f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f18:	085b      	lsrs	r3, r3, #1
 8005f1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d004      	beq.n	8005f34 <USB_EPStartXfer+0xbaa>
 8005f2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005f2e:	3301      	adds	r3, #1
 8005f30:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005f34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	029b      	lsls	r3, r3, #10
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f42:	801a      	strh	r2, [r3, #0]
 8005f44:	e042      	b.n	8005fcc <USB_EPStartXfer+0xc42>
 8005f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d104      	bne.n	8005f66 <USB_EPStartXfer+0xbdc>
 8005f5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005f60:	3b01      	subs	r3, #1
 8005f62:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005f66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	029b      	lsls	r3, r3, #10
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f7e:	801a      	strh	r2, [r3, #0]
 8005f80:	e024      	b.n	8005fcc <USB_EPStartXfer+0xc42>
 8005f82:	463b      	mov	r3, r7
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	785b      	ldrb	r3, [r3, #1]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d11f      	bne.n	8005fcc <USB_EPStartXfer+0xc42>
 8005f8c:	1d3b      	adds	r3, r7, #4
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005f94:	1d3b      	adds	r3, r7, #4
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005faa:	463b      	mov	r3, r7
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	00da      	lsls	r2, r3, #3
 8005fb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005fbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005fcc:	463b      	mov	r3, r7
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	891b      	ldrh	r3, [r3, #8]
 8005fd2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fd6:	463b      	mov	r3, r7
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6959      	ldr	r1, [r3, #20]
 8005fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005fe6:	1d38      	adds	r0, r7, #4
 8005fe8:	6800      	ldr	r0, [r0, #0]
 8005fea:	f000 fdff 	bl	8006bec <USB_WritePMA>
          ep->xfer_buff += len;
 8005fee:	463b      	mov	r3, r7
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	695a      	ldr	r2, [r3, #20]
 8005ff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff8:	441a      	add	r2, r3
 8005ffa:	463b      	mov	r3, r7
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006000:	463b      	mov	r3, r7
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6a1a      	ldr	r2, [r3, #32]
 8006006:	463b      	mov	r3, r7
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	429a      	cmp	r2, r3
 800600e:	d909      	bls.n	8006024 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8006010:	463b      	mov	r3, r7
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6a1a      	ldr	r2, [r3, #32]
 8006016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800601a:	1ad2      	subs	r2, r2, r3
 800601c:	463b      	mov	r3, r7
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	621a      	str	r2, [r3, #32]
 8006022:	e008      	b.n	8006036 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8006024:	463b      	mov	r3, r7
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800602e:	463b      	mov	r3, r7
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2200      	movs	r2, #0
 8006034:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006036:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 80ab 	beq.w	8006196 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006040:	1d3b      	adds	r3, r7, #4
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006048:	463b      	mov	r3, r7
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	785b      	ldrb	r3, [r3, #1]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d16f      	bne.n	8006132 <USB_EPStartXfer+0xda8>
 8006052:	1d3b      	adds	r3, r7, #4
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800605a:	1d3b      	adds	r3, r7, #4
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006062:	b29b      	uxth	r3, r3
 8006064:	461a      	mov	r2, r3
 8006066:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800606a:	4413      	add	r3, r2
 800606c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006070:	463b      	mov	r3, r7
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	00da      	lsls	r2, r3, #3
 8006078:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800607c:	4413      	add	r3, r2
 800607e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006082:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d116      	bne.n	80060bc <USB_EPStartXfer+0xd32>
 800608e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	b29b      	uxth	r3, r3
 8006096:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800609a:	b29a      	uxth	r2, r3
 800609c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060b8:	801a      	strh	r2, [r3, #0]
 80060ba:	e05b      	b.n	8006174 <USB_EPStartXfer+0xdea>
 80060bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c0:	2b3e      	cmp	r3, #62	; 0x3e
 80060c2:	d818      	bhi.n	80060f6 <USB_EPStartXfer+0xd6c>
 80060c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c8:	085b      	lsrs	r3, r3, #1
 80060ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80060ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d004      	beq.n	80060e4 <USB_EPStartXfer+0xd5a>
 80060da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060de:	3301      	adds	r3, #1
 80060e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80060e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	029b      	lsls	r3, r3, #10
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060f2:	801a      	strh	r2, [r3, #0]
 80060f4:	e03e      	b.n	8006174 <USB_EPStartXfer+0xdea>
 80060f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006104:	f003 031f 	and.w	r3, r3, #31
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <USB_EPStartXfer+0xd8c>
 800610c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006110:	3b01      	subs	r3, #1
 8006112:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800611a:	b29b      	uxth	r3, r3
 800611c:	029b      	lsls	r3, r3, #10
 800611e:	b29b      	uxth	r3, r3
 8006120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006128:	b29a      	uxth	r2, r3
 800612a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800612e:	801a      	strh	r2, [r3, #0]
 8006130:	e020      	b.n	8006174 <USB_EPStartXfer+0xdea>
 8006132:	463b      	mov	r3, r7
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	785b      	ldrb	r3, [r3, #1]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d11b      	bne.n	8006174 <USB_EPStartXfer+0xdea>
 800613c:	1d3b      	adds	r3, r7, #4
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006144:	b29b      	uxth	r3, r3
 8006146:	461a      	mov	r2, r3
 8006148:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800614c:	4413      	add	r3, r2
 800614e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006152:	463b      	mov	r3, r7
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	00da      	lsls	r2, r3, #3
 800615a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800615e:	4413      	add	r3, r2
 8006160:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006164:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800616c:	b29a      	uxth	r2, r3
 800616e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006172:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006174:	463b      	mov	r3, r7
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	895b      	ldrh	r3, [r3, #10]
 800617a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800617e:	463b      	mov	r3, r7
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6959      	ldr	r1, [r3, #20]
 8006184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006188:	b29b      	uxth	r3, r3
 800618a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800618e:	1d38      	adds	r0, r7, #4
 8006190:	6800      	ldr	r0, [r0, #0]
 8006192:	f000 fd2b 	bl	8006bec <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006196:	1d3b      	adds	r3, r7, #4
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	463b      	mov	r3, r7
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	f107 020a 	add.w	r2, r7, #10
 80061ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061b4:	8013      	strh	r3, [r2, #0]
 80061b6:	f107 030a 	add.w	r3, r7, #10
 80061ba:	f107 020a 	add.w	r2, r7, #10
 80061be:	8812      	ldrh	r2, [r2, #0]
 80061c0:	f082 0210 	eor.w	r2, r2, #16
 80061c4:	801a      	strh	r2, [r3, #0]
 80061c6:	f107 030a 	add.w	r3, r7, #10
 80061ca:	f107 020a 	add.w	r2, r7, #10
 80061ce:	8812      	ldrh	r2, [r2, #0]
 80061d0:	f082 0220 	eor.w	r2, r2, #32
 80061d4:	801a      	strh	r2, [r3, #0]
 80061d6:	1d3b      	adds	r3, r7, #4
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	463b      	mov	r3, r7
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	441a      	add	r2, r3
 80061e4:	f107 030a 	add.w	r3, r7, #10
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	8013      	strh	r3, [r2, #0]
 80061fe:	e3b5      	b.n	800696c <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006200:	463b      	mov	r3, r7
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	7b1b      	ldrb	r3, [r3, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f040 8090 	bne.w	800632c <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800620c:	463b      	mov	r3, r7
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	463b      	mov	r3, r7
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	429a      	cmp	r2, r3
 800621a:	d90e      	bls.n	800623a <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800621c:	463b      	mov	r3, r7
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006226:	463b      	mov	r3, r7
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	699a      	ldr	r2, [r3, #24]
 800622c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006230:	1ad2      	subs	r2, r2, r3
 8006232:	463b      	mov	r3, r7
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	619a      	str	r2, [r3, #24]
 8006238:	e008      	b.n	800624c <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800623a:	463b      	mov	r3, r7
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006244:	463b      	mov	r3, r7
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2200      	movs	r2, #0
 800624a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800624c:	1d3b      	adds	r3, r7, #4
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006254:	1d3b      	adds	r3, r7, #4
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800625c:	b29b      	uxth	r3, r3
 800625e:	461a      	mov	r2, r3
 8006260:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006264:	4413      	add	r3, r2
 8006266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800626a:	463b      	mov	r3, r7
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	00da      	lsls	r2, r3, #3
 8006272:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006276:	4413      	add	r3, r2
 8006278:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800627c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006284:	2b00      	cmp	r3, #0
 8006286:	d116      	bne.n	80062b6 <USB_EPStartXfer+0xf2c>
 8006288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	b29b      	uxth	r3, r3
 8006290:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006294:	b29a      	uxth	r2, r3
 8006296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800629a:	801a      	strh	r2, [r3, #0]
 800629c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062b2:	801a      	strh	r2, [r3, #0]
 80062b4:	e32c      	b.n	8006910 <USB_EPStartXfer+0x1586>
 80062b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ba:	2b3e      	cmp	r3, #62	; 0x3e
 80062bc:	d818      	bhi.n	80062f0 <USB_EPStartXfer+0xf66>
 80062be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c2:	085b      	lsrs	r3, r3, #1
 80062c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80062c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d004      	beq.n	80062de <USB_EPStartXfer+0xf54>
 80062d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062d8:	3301      	adds	r3, #1
 80062da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80062de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	029b      	lsls	r3, r3, #10
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062ec:	801a      	strh	r2, [r3, #0]
 80062ee:	e30f      	b.n	8006910 <USB_EPStartXfer+0x1586>
 80062f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f4:	095b      	lsrs	r3, r3, #5
 80062f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80062fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	2b00      	cmp	r3, #0
 8006304:	d104      	bne.n	8006310 <USB_EPStartXfer+0xf86>
 8006306:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800630a:	3b01      	subs	r3, #1
 800630c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006310:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006314:	b29b      	uxth	r3, r3
 8006316:	029b      	lsls	r3, r3, #10
 8006318:	b29b      	uxth	r3, r3
 800631a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006322:	b29a      	uxth	r2, r3
 8006324:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006328:	801a      	strh	r2, [r3, #0]
 800632a:	e2f1      	b.n	8006910 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800632c:	463b      	mov	r3, r7
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	78db      	ldrb	r3, [r3, #3]
 8006332:	2b02      	cmp	r3, #2
 8006334:	f040 818f 	bne.w	8006656 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006338:	463b      	mov	r3, r7
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	785b      	ldrb	r3, [r3, #1]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d175      	bne.n	800642e <USB_EPStartXfer+0x10a4>
 8006342:	1d3b      	adds	r3, r7, #4
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800634a:	1d3b      	adds	r3, r7, #4
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006352:	b29b      	uxth	r3, r3
 8006354:	461a      	mov	r2, r3
 8006356:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800635a:	4413      	add	r3, r2
 800635c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006360:	463b      	mov	r3, r7
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	00da      	lsls	r2, r3, #3
 8006368:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800636c:	4413      	add	r3, r2
 800636e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006372:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006376:	463b      	mov	r3, r7
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d116      	bne.n	80063ae <USB_EPStartXfer+0x1024>
 8006380:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	b29b      	uxth	r3, r3
 8006388:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800638c:	b29a      	uxth	r2, r3
 800638e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006392:	801a      	strh	r2, [r3, #0]
 8006394:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063aa:	801a      	strh	r2, [r3, #0]
 80063ac:	e065      	b.n	800647a <USB_EPStartXfer+0x10f0>
 80063ae:	463b      	mov	r3, r7
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	2b3e      	cmp	r3, #62	; 0x3e
 80063b6:	d81a      	bhi.n	80063ee <USB_EPStartXfer+0x1064>
 80063b8:	463b      	mov	r3, r7
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	085b      	lsrs	r3, r3, #1
 80063c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063c4:	463b      	mov	r3, r7
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d004      	beq.n	80063dc <USB_EPStartXfer+0x1052>
 80063d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d6:	3301      	adds	r3, #1
 80063d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	029b      	lsls	r3, r3, #10
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063ea:	801a      	strh	r2, [r3, #0]
 80063ec:	e045      	b.n	800647a <USB_EPStartXfer+0x10f0>
 80063ee:	463b      	mov	r3, r7
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063fa:	463b      	mov	r3, r7
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	f003 031f 	and.w	r3, r3, #31
 8006404:	2b00      	cmp	r3, #0
 8006406:	d104      	bne.n	8006412 <USB_EPStartXfer+0x1088>
 8006408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800640c:	3b01      	subs	r3, #1
 800640e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006416:	b29b      	uxth	r3, r3
 8006418:	029b      	lsls	r3, r3, #10
 800641a:	b29b      	uxth	r3, r3
 800641c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006424:	b29a      	uxth	r2, r3
 8006426:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800642a:	801a      	strh	r2, [r3, #0]
 800642c:	e025      	b.n	800647a <USB_EPStartXfer+0x10f0>
 800642e:	463b      	mov	r3, r7
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	785b      	ldrb	r3, [r3, #1]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d120      	bne.n	800647a <USB_EPStartXfer+0x10f0>
 8006438:	1d3b      	adds	r3, r7, #4
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006440:	1d3b      	adds	r3, r7, #4
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006448:	b29b      	uxth	r3, r3
 800644a:	461a      	mov	r2, r3
 800644c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006450:	4413      	add	r3, r2
 8006452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006456:	463b      	mov	r3, r7
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	00da      	lsls	r2, r3, #3
 800645e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006462:	4413      	add	r3, r2
 8006464:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006468:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800646c:	463b      	mov	r3, r7
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	b29a      	uxth	r2, r3
 8006474:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006478:	801a      	strh	r2, [r3, #0]
 800647a:	1d3b      	adds	r3, r7, #4
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006482:	463b      	mov	r3, r7
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	785b      	ldrb	r3, [r3, #1]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d175      	bne.n	8006578 <USB_EPStartXfer+0x11ee>
 800648c:	1d3b      	adds	r3, r7, #4
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006494:	1d3b      	adds	r3, r7, #4
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800649c:	b29b      	uxth	r3, r3
 800649e:	461a      	mov	r2, r3
 80064a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064a4:	4413      	add	r3, r2
 80064a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80064aa:	463b      	mov	r3, r7
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	00da      	lsls	r2, r3, #3
 80064b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064b6:	4413      	add	r3, r2
 80064b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064c0:	463b      	mov	r3, r7
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d116      	bne.n	80064f8 <USB_EPStartXfer+0x116e>
 80064ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064dc:	801a      	strh	r2, [r3, #0]
 80064de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064f4:	801a      	strh	r2, [r3, #0]
 80064f6:	e061      	b.n	80065bc <USB_EPStartXfer+0x1232>
 80064f8:	463b      	mov	r3, r7
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b3e      	cmp	r3, #62	; 0x3e
 8006500:	d81a      	bhi.n	8006538 <USB_EPStartXfer+0x11ae>
 8006502:	463b      	mov	r3, r7
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	085b      	lsrs	r3, r3, #1
 800650a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800650e:	463b      	mov	r3, r7
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d004      	beq.n	8006526 <USB_EPStartXfer+0x119c>
 800651c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006520:	3301      	adds	r3, #1
 8006522:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006526:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800652a:	b29b      	uxth	r3, r3
 800652c:	029b      	lsls	r3, r3, #10
 800652e:	b29a      	uxth	r2, r3
 8006530:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006534:	801a      	strh	r2, [r3, #0]
 8006536:	e041      	b.n	80065bc <USB_EPStartXfer+0x1232>
 8006538:	463b      	mov	r3, r7
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006544:	463b      	mov	r3, r7
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f003 031f 	and.w	r3, r3, #31
 800654e:	2b00      	cmp	r3, #0
 8006550:	d104      	bne.n	800655c <USB_EPStartXfer+0x11d2>
 8006552:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006556:	3b01      	subs	r3, #1
 8006558:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800655c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006560:	b29b      	uxth	r3, r3
 8006562:	029b      	lsls	r3, r3, #10
 8006564:	b29b      	uxth	r3, r3
 8006566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800656a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800656e:	b29a      	uxth	r2, r3
 8006570:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006574:	801a      	strh	r2, [r3, #0]
 8006576:	e021      	b.n	80065bc <USB_EPStartXfer+0x1232>
 8006578:	463b      	mov	r3, r7
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	785b      	ldrb	r3, [r3, #1]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d11c      	bne.n	80065bc <USB_EPStartXfer+0x1232>
 8006582:	1d3b      	adds	r3, r7, #4
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800658a:	b29b      	uxth	r3, r3
 800658c:	461a      	mov	r2, r3
 800658e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006592:	4413      	add	r3, r2
 8006594:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006598:	463b      	mov	r3, r7
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	00da      	lsls	r2, r3, #3
 80065a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065a4:	4413      	add	r3, r2
 80065a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065ae:	463b      	mov	r3, r7
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065ba:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80065bc:	463b      	mov	r3, r7
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 81a4 	beq.w	8006910 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80065c8:	1d3b      	adds	r3, r7, #4
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	463b      	mov	r3, r7
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80065dc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80065e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d005      	beq.n	80065f4 <USB_EPStartXfer+0x126a>
 80065e8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80065ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10d      	bne.n	8006610 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80065f4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80065f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f040 8187 	bne.w	8006910 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006602:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660a:	2b00      	cmp	r3, #0
 800660c:	f040 8180 	bne.w	8006910 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006610:	1d3b      	adds	r3, r7, #4
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	463b      	mov	r3, r7
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	b29b      	uxth	r3, r3
 8006622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800662e:	1d3b      	adds	r3, r7, #4
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	463b      	mov	r3, r7
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	441a      	add	r2, r3
 800663c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800664c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006650:	b29b      	uxth	r3, r3
 8006652:	8013      	strh	r3, [r2, #0]
 8006654:	e15c      	b.n	8006910 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006656:	463b      	mov	r3, r7
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	78db      	ldrb	r3, [r3, #3]
 800665c:	2b01      	cmp	r3, #1
 800665e:	f040 8155 	bne.w	800690c <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006662:	463b      	mov	r3, r7
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	699a      	ldr	r2, [r3, #24]
 8006668:	463b      	mov	r3, r7
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	429a      	cmp	r2, r3
 8006670:	d90e      	bls.n	8006690 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006672:	463b      	mov	r3, r7
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800667c:	463b      	mov	r3, r7
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006686:	1ad2      	subs	r2, r2, r3
 8006688:	463b      	mov	r3, r7
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	619a      	str	r2, [r3, #24]
 800668e:	e008      	b.n	80066a2 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8006690:	463b      	mov	r3, r7
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800669a:	463b      	mov	r3, r7
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2200      	movs	r2, #0
 80066a0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80066a2:	463b      	mov	r3, r7
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	785b      	ldrb	r3, [r3, #1]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d16f      	bne.n	800678c <USB_EPStartXfer+0x1402>
 80066ac:	1d3b      	adds	r3, r7, #4
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80066b4:	1d3b      	adds	r3, r7, #4
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066bc:	b29b      	uxth	r3, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80066c4:	4413      	add	r3, r2
 80066c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80066ca:	463b      	mov	r3, r7
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	00da      	lsls	r2, r3, #3
 80066d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80066d6:	4413      	add	r3, r2
 80066d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d116      	bne.n	8006716 <USB_EPStartXfer+0x138c>
 80066e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066fa:	801a      	strh	r2, [r3, #0]
 80066fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	b29b      	uxth	r3, r3
 8006704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670c:	b29a      	uxth	r2, r3
 800670e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006712:	801a      	strh	r2, [r3, #0]
 8006714:	e05f      	b.n	80067d6 <USB_EPStartXfer+0x144c>
 8006716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800671a:	2b3e      	cmp	r3, #62	; 0x3e
 800671c:	d818      	bhi.n	8006750 <USB_EPStartXfer+0x13c6>
 800671e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006722:	085b      	lsrs	r3, r3, #1
 8006724:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <USB_EPStartXfer+0x13b4>
 8006734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006738:	3301      	adds	r3, #1
 800673a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800673e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006742:	b29b      	uxth	r3, r3
 8006744:	029b      	lsls	r3, r3, #10
 8006746:	b29a      	uxth	r2, r3
 8006748:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800674c:	801a      	strh	r2, [r3, #0]
 800674e:	e042      	b.n	80067d6 <USB_EPStartXfer+0x144c>
 8006750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006754:	095b      	lsrs	r3, r3, #5
 8006756:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800675a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800675e:	f003 031f 	and.w	r3, r3, #31
 8006762:	2b00      	cmp	r3, #0
 8006764:	d104      	bne.n	8006770 <USB_EPStartXfer+0x13e6>
 8006766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800676a:	3b01      	subs	r3, #1
 800676c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006774:	b29b      	uxth	r3, r3
 8006776:	029b      	lsls	r3, r3, #10
 8006778:	b29b      	uxth	r3, r3
 800677a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800677e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006782:	b29a      	uxth	r2, r3
 8006784:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006788:	801a      	strh	r2, [r3, #0]
 800678a:	e024      	b.n	80067d6 <USB_EPStartXfer+0x144c>
 800678c:	463b      	mov	r3, r7
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	785b      	ldrb	r3, [r3, #1]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d11f      	bne.n	80067d6 <USB_EPStartXfer+0x144c>
 8006796:	1d3b      	adds	r3, r7, #4
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800679e:	1d3b      	adds	r3, r7, #4
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	461a      	mov	r2, r3
 80067aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ae:	4413      	add	r3, r2
 80067b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80067b4:	463b      	mov	r3, r7
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	00da      	lsls	r2, r3, #3
 80067bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c0:	4413      	add	r3, r2
 80067c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80067ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80067d4:	801a      	strh	r2, [r3, #0]
 80067d6:	1d3b      	adds	r3, r7, #4
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067de:	463b      	mov	r3, r7
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	785b      	ldrb	r3, [r3, #1]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d16f      	bne.n	80068c8 <USB_EPStartXfer+0x153e>
 80067e8:	1d3b      	adds	r3, r7, #4
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067f0:	1d3b      	adds	r3, r7, #4
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	461a      	mov	r2, r3
 80067fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006800:	4413      	add	r3, r2
 8006802:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006806:	463b      	mov	r3, r7
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	00da      	lsls	r2, r3, #3
 800680e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006812:	4413      	add	r3, r2
 8006814:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006818:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800681c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006820:	2b00      	cmp	r3, #0
 8006822:	d116      	bne.n	8006852 <USB_EPStartXfer+0x14c8>
 8006824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	b29b      	uxth	r3, r3
 800682c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006830:	b29a      	uxth	r2, r3
 8006832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006836:	801a      	strh	r2, [r3, #0]
 8006838:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	b29b      	uxth	r3, r3
 8006840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006848:	b29a      	uxth	r2, r3
 800684a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800684e:	801a      	strh	r2, [r3, #0]
 8006850:	e05e      	b.n	8006910 <USB_EPStartXfer+0x1586>
 8006852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006856:	2b3e      	cmp	r3, #62	; 0x3e
 8006858:	d818      	bhi.n	800688c <USB_EPStartXfer+0x1502>
 800685a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800685e:	085b      	lsrs	r3, r3, #1
 8006860:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d004      	beq.n	800687a <USB_EPStartXfer+0x14f0>
 8006870:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006874:	3301      	adds	r3, #1
 8006876:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800687a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800687e:	b29b      	uxth	r3, r3
 8006880:	029b      	lsls	r3, r3, #10
 8006882:	b29a      	uxth	r2, r3
 8006884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006888:	801a      	strh	r2, [r3, #0]
 800688a:	e041      	b.n	8006910 <USB_EPStartXfer+0x1586>
 800688c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006890:	095b      	lsrs	r3, r3, #5
 8006892:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800689a:	f003 031f 	and.w	r3, r3, #31
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d104      	bne.n	80068ac <USB_EPStartXfer+0x1522>
 80068a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068a6:	3b01      	subs	r3, #1
 80068a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	029b      	lsls	r3, r3, #10
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068be:	b29a      	uxth	r2, r3
 80068c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068c4:	801a      	strh	r2, [r3, #0]
 80068c6:	e023      	b.n	8006910 <USB_EPStartXfer+0x1586>
 80068c8:	463b      	mov	r3, r7
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	785b      	ldrb	r3, [r3, #1]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d11e      	bne.n	8006910 <USB_EPStartXfer+0x1586>
 80068d2:	1d3b      	adds	r3, r7, #4
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068da:	b29b      	uxth	r3, r3
 80068dc:	461a      	mov	r2, r3
 80068de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e2:	4413      	add	r3, r2
 80068e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068e8:	463b      	mov	r3, r7
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	00da      	lsls	r2, r3, #3
 80068f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f4:	4413      	add	r3, r2
 80068f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006902:	b29a      	uxth	r2, r3
 8006904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006908:	801a      	strh	r2, [r3, #0]
 800690a:	e001      	b.n	8006910 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e02e      	b.n	800696e <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006910:	1d3b      	adds	r3, r7, #4
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	463b      	mov	r3, r7
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	b29b      	uxth	r3, r3
 8006922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800692e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006932:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006936:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800693a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800693e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006942:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006946:	1d3b      	adds	r3, r7, #4
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	463b      	mov	r3, r7
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	441a      	add	r2, r3
 8006954:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800695c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006968:	b29b      	uxth	r3, r3
 800696a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	785b      	ldrb	r3, [r3, #1]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d020      	beq.n	80069cc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	b29b      	uxth	r3, r3
 8006998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800699c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a0:	81bb      	strh	r3, [r7, #12]
 80069a2:	89bb      	ldrh	r3, [r7, #12]
 80069a4:	f083 0310 	eor.w	r3, r3, #16
 80069a8:	81bb      	strh	r3, [r7, #12]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	441a      	add	r2, r3
 80069b4:	89bb      	ldrh	r3, [r7, #12]
 80069b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	8013      	strh	r3, [r2, #0]
 80069ca:	e01f      	b.n	8006a0c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e2:	81fb      	strh	r3, [r7, #14]
 80069e4:	89fb      	ldrh	r3, [r7, #14]
 80069e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069ea:	81fb      	strh	r3, [r7, #14]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	441a      	add	r2, r3
 80069f6:	89fb      	ldrh	r3, [r7, #14]
 80069f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b087      	sub	sp, #28
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	7b1b      	ldrb	r3, [r3, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f040 809d 	bne.w	8006b68 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	785b      	ldrb	r3, [r3, #1]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d04c      	beq.n	8006ad0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	823b      	strh	r3, [r7, #16]
 8006a44:	8a3b      	ldrh	r3, [r7, #16]
 8006a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d01b      	beq.n	8006a86 <USB_EPClearStall+0x6c>
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a64:	81fb      	strh	r3, [r7, #14]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	441a      	add	r2, r3
 8006a70:	89fb      	ldrh	r3, [r7, #14]
 8006a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	78db      	ldrb	r3, [r3, #3]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d06c      	beq.n	8006b68 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aa4:	81bb      	strh	r3, [r7, #12]
 8006aa6:	89bb      	ldrh	r3, [r7, #12]
 8006aa8:	f083 0320 	eor.w	r3, r3, #32
 8006aac:	81bb      	strh	r3, [r7, #12]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	441a      	add	r2, r3
 8006ab8:	89bb      	ldrh	r3, [r7, #12]
 8006aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	8013      	strh	r3, [r2, #0]
 8006ace:	e04b      	b.n	8006b68 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	82fb      	strh	r3, [r7, #22]
 8006ade:	8afb      	ldrh	r3, [r7, #22]
 8006ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01b      	beq.n	8006b20 <USB_EPClearStall+0x106>
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afe:	82bb      	strh	r3, [r7, #20]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	441a      	add	r2, r3
 8006b0a:	8abb      	ldrh	r3, [r7, #20]
 8006b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b36:	827b      	strh	r3, [r7, #18]
 8006b38:	8a7b      	ldrh	r3, [r7, #18]
 8006b3a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b3e:	827b      	strh	r3, [r7, #18]
 8006b40:	8a7b      	ldrh	r3, [r7, #18]
 8006b42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b46:	827b      	strh	r3, [r7, #18]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	441a      	add	r2, r3
 8006b52:	8a7b      	ldrh	r3, [r7, #18]
 8006b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	371c      	adds	r7, #28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	460b      	mov	r3, r1
 8006b80:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d103      	bne.n	8006b90 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2280      	movs	r2, #128	; 0x80
 8006b8c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006bde:	68fb      	ldr	r3, [r7, #12]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b08d      	sub	sp, #52	; 0x34
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	80fb      	strh	r3, [r7, #6]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006c02:	88bb      	ldrh	r3, [r7, #4]
 8006c04:	3301      	adds	r3, #1
 8006c06:	085b      	lsrs	r3, r3, #1
 8006c08:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c12:	88fa      	ldrh	r2, [r7, #6]
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c1c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c22:	e01b      	b.n	8006c5c <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	021b      	lsls	r3, r3, #8
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c48:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	3302      	adds	r3, #2
 8006c4e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	3301      	adds	r3, #1
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1e0      	bne.n	8006c24 <USB_WritePMA+0x38>
  }
}
 8006c62:	bf00      	nop
 8006c64:	bf00      	nop
 8006c66:	3734      	adds	r7, #52	; 0x34
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b08b      	sub	sp, #44	; 0x2c
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	460b      	mov	r3, r1
 8006c80:	80fb      	strh	r3, [r7, #6]
 8006c82:	4613      	mov	r3, r2
 8006c84:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c86:	88bb      	ldrh	r3, [r7, #4]
 8006c88:	085b      	lsrs	r3, r3, #1
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c96:	88fa      	ldrh	r2, [r7, #6]
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ca0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca6:	e018      	b.n	8006cda <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	3302      	adds	r3, #2
 8006cb4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	0a1b      	lsrs	r3, r3, #8
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e3      	bne.n	8006ca8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006ce0:	88bb      	ldrh	r3, [r7, #4]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d007      	beq.n	8006cfc <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	701a      	strb	r2, [r3, #0]
  }
}
 8006cfc:	bf00      	nop
 8006cfe:	372c      	adds	r7, #44	; 0x2c
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	460b      	mov	r3, r1
 8006d12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d14:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d18:	f002 f8e6 	bl	8008ee8 <USBD_static_malloc>
 8006d1c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d105      	bne.n	8006d30 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e066      	b.n	8006dfe <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	7c1b      	ldrb	r3, [r3, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d119      	bne.n	8006d74 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d44:	2202      	movs	r2, #2
 8006d46:	2181      	movs	r1, #129	; 0x81
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f001 ff72 	bl	8008c32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d58:	2202      	movs	r2, #2
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f001 ff68 	bl	8008c32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2210      	movs	r2, #16
 8006d6e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006d72:	e016      	b.n	8006da2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d74:	2340      	movs	r3, #64	; 0x40
 8006d76:	2202      	movs	r2, #2
 8006d78:	2181      	movs	r1, #129	; 0x81
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f001 ff59 	bl	8008c32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d86:	2340      	movs	r3, #64	; 0x40
 8006d88:	2202      	movs	r2, #2
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 ff50 	bl	8008c32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2210      	movs	r2, #16
 8006d9e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006da2:	2308      	movs	r3, #8
 8006da4:	2203      	movs	r2, #3
 8006da6:	2182      	movs	r1, #130	; 0x82
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 ff42 	bl	8008c32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	7c1b      	ldrb	r3, [r3, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d109      	bne.n	8006dec <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006de2:	2101      	movs	r1, #1
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f002 f814 	bl	8008e12 <USBD_LL_PrepareReceive>
 8006dea:	e007      	b.n	8006dfc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006df2:	2340      	movs	r3, #64	; 0x40
 8006df4:	2101      	movs	r1, #1
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f002 f80b 	bl	8008e12 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b082      	sub	sp, #8
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006e12:	2181      	movs	r1, #129	; 0x81
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f001 ff32 	bl	8008c7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006e20:	2101      	movs	r1, #1
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 ff2b 	bl	8008c7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006e30:	2182      	movs	r1, #130	; 0x82
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f001 ff23 	bl	8008c7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00e      	beq.n	8006e70 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e62:	4618      	mov	r0, r3
 8006e64:	f002 f84e 	bl	8008f04 <USBD_static_free>
    pdev->pClassData = NULL;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
	...

08006e7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e8c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e0af      	b.n	8007004 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d03f      	beq.n	8006f30 <USBD_CDC_Setup+0xb4>
 8006eb0:	2b20      	cmp	r3, #32
 8006eb2:	f040 809f 	bne.w	8006ff4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	88db      	ldrh	r3, [r3, #6]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d02e      	beq.n	8006f1c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	b25b      	sxtb	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	da16      	bge.n	8006ef6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006ed4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	88d2      	ldrh	r2, [r2, #6]
 8006eda:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	88db      	ldrh	r3, [r3, #6]
 8006ee0:	2b07      	cmp	r3, #7
 8006ee2:	bf28      	it	cs
 8006ee4:	2307      	movcs	r3, #7
 8006ee6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	89fa      	ldrh	r2, [r7, #14]
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f001 fa9f 	bl	8008432 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006ef4:	e085      	b.n	8007002 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	785a      	ldrb	r2, [r3, #1]
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	88db      	ldrh	r3, [r3, #6]
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006f0c:	6939      	ldr	r1, [r7, #16]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	88db      	ldrh	r3, [r3, #6]
 8006f12:	461a      	mov	r2, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 fab8 	bl	800848a <USBD_CtlPrepareRx>
      break;
 8006f1a:	e072      	b.n	8007002 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	7850      	ldrb	r0, [r2, #1]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	4798      	blx	r3
      break;
 8006f2e:	e068      	b.n	8007002 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	785b      	ldrb	r3, [r3, #1]
 8006f34:	2b0b      	cmp	r3, #11
 8006f36:	d852      	bhi.n	8006fde <USBD_CDC_Setup+0x162>
 8006f38:	a201      	add	r2, pc, #4	; (adr r2, 8006f40 <USBD_CDC_Setup+0xc4>)
 8006f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3e:	bf00      	nop
 8006f40:	08006f71 	.word	0x08006f71
 8006f44:	08006fed 	.word	0x08006fed
 8006f48:	08006fdf 	.word	0x08006fdf
 8006f4c:	08006fdf 	.word	0x08006fdf
 8006f50:	08006fdf 	.word	0x08006fdf
 8006f54:	08006fdf 	.word	0x08006fdf
 8006f58:	08006fdf 	.word	0x08006fdf
 8006f5c:	08006fdf 	.word	0x08006fdf
 8006f60:	08006fdf 	.word	0x08006fdf
 8006f64:	08006fdf 	.word	0x08006fdf
 8006f68:	08006f9b 	.word	0x08006f9b
 8006f6c:	08006fc5 	.word	0x08006fc5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b03      	cmp	r3, #3
 8006f7a:	d107      	bne.n	8006f8c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f7c:	f107 030a 	add.w	r3, r7, #10
 8006f80:	2202      	movs	r2, #2
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f001 fa54 	bl	8008432 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f8a:	e032      	b.n	8006ff2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 f9de 	bl	8008350 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f94:	2303      	movs	r3, #3
 8006f96:	75fb      	strb	r3, [r7, #23]
          break;
 8006f98:	e02b      	b.n	8006ff2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d107      	bne.n	8006fb6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006fa6:	f107 030d 	add.w	r3, r7, #13
 8006faa:	2201      	movs	r2, #1
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f001 fa3f 	bl	8008432 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fb4:	e01d      	b.n	8006ff2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f001 f9c9 	bl	8008350 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	75fb      	strb	r3, [r7, #23]
          break;
 8006fc2:	e016      	b.n	8006ff2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d00f      	beq.n	8006ff0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f001 f9bc 	bl	8008350 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006fdc:	e008      	b.n	8006ff0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f001 f9b5 	bl	8008350 <USBD_CtlError>
          ret = USBD_FAIL;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	75fb      	strb	r3, [r7, #23]
          break;
 8006fea:	e002      	b.n	8006ff2 <USBD_CDC_Setup+0x176>
          break;
 8006fec:	bf00      	nop
 8006fee:	e008      	b.n	8007002 <USBD_CDC_Setup+0x186>
          break;
 8006ff0:	bf00      	nop
      }
      break;
 8006ff2:	e006      	b.n	8007002 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f001 f9aa 	bl	8008350 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8007000:	bf00      	nop
  }

  return (uint8_t)ret;
 8007002:	7dfb      	ldrb	r3, [r7, #23]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	460b      	mov	r3, r1
 8007016:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800701e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800702a:	2303      	movs	r3, #3
 800702c:	e04f      	b.n	80070ce <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007034:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007036:	78fa      	ldrb	r2, [r7, #3]
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	4613      	mov	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	440b      	add	r3, r1
 8007044:	3318      	adds	r3, #24
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d029      	beq.n	80070a0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800704c:	78fa      	ldrb	r2, [r7, #3]
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	4613      	mov	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	440b      	add	r3, r1
 800705a:	3318      	adds	r3, #24
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	78f9      	ldrb	r1, [r7, #3]
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	460b      	mov	r3, r1
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	440b      	add	r3, r1
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	4403      	add	r3, r0
 800706c:	3338      	adds	r3, #56	; 0x38
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	fbb2 f1f3 	udiv	r1, r2, r3
 8007074:	fb03 f301 	mul.w	r3, r3, r1
 8007078:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800707a:	2b00      	cmp	r3, #0
 800707c:	d110      	bne.n	80070a0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800707e:	78fa      	ldrb	r2, [r7, #3]
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	440b      	add	r3, r1
 800708c:	3318      	adds	r3, #24
 800708e:	2200      	movs	r2, #0
 8007090:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007092:	78f9      	ldrb	r1, [r7, #3]
 8007094:	2300      	movs	r3, #0
 8007096:	2200      	movs	r2, #0
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f001 fe99 	bl	8008dd0 <USBD_LL_Transmit>
 800709e:	e015      	b.n	80070cc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00b      	beq.n	80070cc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80070c8:	78fa      	ldrb	r2, [r7, #3]
 80070ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	460b      	mov	r3, r1
 80070e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e015      	b.n	8007124 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f001 fea9 	bl	8008e54 <USBD_LL_GetRxDataSize>
 8007102:	4602      	mov	r2, r0
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800711e:	4611      	mov	r1, r2
 8007120:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800713a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007142:	2303      	movs	r3, #3
 8007144:	e01b      	b.n	800717e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d015      	beq.n	800717c <USBD_CDC_EP0_RxReady+0x50>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007156:	2bff      	cmp	r3, #255	; 0xff
 8007158:	d010      	beq.n	800717c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007168:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007170:	b292      	uxth	r2, r2
 8007172:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	22ff      	movs	r2, #255	; 0xff
 8007178:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2243      	movs	r2, #67	; 0x43
 8007194:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007196:	4b03      	ldr	r3, [pc, #12]	; (80071a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	20000094 	.word	0x20000094

080071a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2243      	movs	r2, #67	; 0x43
 80071b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80071b6:	4b03      	ldr	r3, [pc, #12]	; (80071c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	20000050 	.word	0x20000050

080071c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2243      	movs	r2, #67	; 0x43
 80071d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80071d6:	4b03      	ldr	r3, [pc, #12]	; (80071e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80071d8:	4618      	mov	r0, r3
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	200000d8 	.word	0x200000d8

080071e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	220a      	movs	r2, #10
 80071f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80071f6:	4b03      	ldr	r3, [pc, #12]	; (8007204 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	2000000c 	.word	0x2000000c

08007208 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007218:	2303      	movs	r3, #3
 800721a:	e004      	b.n	8007226 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007232:	b480      	push	{r7}
 8007234:	b087      	sub	sp, #28
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007244:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800724c:	2303      	movs	r3, #3
 800724e:	e008      	b.n	8007262 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	371c      	adds	r7, #28
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800726e:	b480      	push	{r7}
 8007270:	b085      	sub	sp, #20
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800727e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007286:	2303      	movs	r3, #3
 8007288:	e004      	b.n	8007294 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e016      	b.n	80072ec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	7c1b      	ldrb	r3, [r3, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d109      	bne.n	80072da <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072d0:	2101      	movs	r1, #1
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 fd9d 	bl	8008e12 <USBD_LL_PrepareReceive>
 80072d8:	e007      	b.n	80072ea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072e0:	2340      	movs	r3, #64	; 0x40
 80072e2:	2101      	movs	r1, #1
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f001 fd94 	bl	8008e12 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	4613      	mov	r3, r2
 8007300:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007308:	2303      	movs	r3, #3
 800730a:	e01f      	b.n	800734c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	79fa      	ldrb	r2, [r7, #7]
 800733e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f001 fbf9 	bl	8008b38 <USBD_LL_Init>
 8007346:	4603      	mov	r3, r0
 8007348:	75fb      	strb	r3, [r7, #23]

  return ret;
 800734a:	7dfb      	ldrb	r3, [r7, #23]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007368:	2303      	movs	r3, #3
 800736a:	e016      	b.n	800739a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00b      	beq.n	8007398 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	f107 020e 	add.w	r2, r7, #14
 800738c:	4610      	mov	r0, r2
 800738e:	4798      	blx	r3
 8007390:	4602      	mov	r2, r0
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b082      	sub	sp, #8
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 fc26 	bl	8008bfc <USBD_LL_Start>
 80073b0:	4603      	mov	r3, r0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b083      	sub	sp, #12
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	460b      	mov	r3, r1
 80073da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80073dc:	2303      	movs	r3, #3
 80073de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d009      	beq.n	80073fe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	78fa      	ldrb	r2, [r7, #3]
 80073f4:	4611      	mov	r1, r2
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	4798      	blx	r3
 80073fa:	4603      	mov	r3, r0
 80073fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741a:	2b00      	cmp	r3, #0
 800741c:	d007      	beq.n	800742e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	78fa      	ldrb	r2, [r7, #3]
 8007428:	4611      	mov	r1, r2
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	4798      	blx	r3
  }

  return USBD_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	4618      	mov	r0, r3
 800744c:	f000 ff46 	bl	80082dc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800745e:	461a      	mov	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	2b02      	cmp	r3, #2
 8007472:	d01a      	beq.n	80074aa <USBD_LL_SetupStage+0x72>
 8007474:	2b02      	cmp	r3, #2
 8007476:	d822      	bhi.n	80074be <USBD_LL_SetupStage+0x86>
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <USBD_LL_SetupStage+0x4a>
 800747c:	2b01      	cmp	r3, #1
 800747e:	d00a      	beq.n	8007496 <USBD_LL_SetupStage+0x5e>
 8007480:	e01d      	b.n	80074be <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f9ee 	bl	800786c <USBD_StdDevReq>
 8007490:	4603      	mov	r3, r0
 8007492:	73fb      	strb	r3, [r7, #15]
      break;
 8007494:	e020      	b.n	80074d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800749c:	4619      	mov	r1, r3
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fa52 	bl	8007948 <USBD_StdItfReq>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73fb      	strb	r3, [r7, #15]
      break;
 80074a8:	e016      	b.n	80074d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074b0:	4619      	mov	r1, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fa91 	bl	80079da <USBD_StdEPReq>
 80074b8:	4603      	mov	r3, r0
 80074ba:	73fb      	strb	r3, [r7, #15]
      break;
 80074bc:	e00c      	b.n	80074d8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80074c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f001 fbf5 	bl	8008cbc <USBD_LL_StallEP>
 80074d2:	4603      	mov	r3, r0
 80074d4:	73fb      	strb	r3, [r7, #15]
      break;
 80074d6:	bf00      	nop
  }

  return ret;
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b086      	sub	sp, #24
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	460b      	mov	r3, r1
 80074ec:	607a      	str	r2, [r7, #4]
 80074ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80074f0:	7afb      	ldrb	r3, [r7, #11]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d138      	bne.n	8007568 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80074fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007504:	2b03      	cmp	r3, #3
 8007506:	d14a      	bne.n	800759e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	689a      	ldr	r2, [r3, #8]
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	429a      	cmp	r2, r3
 8007512:	d913      	bls.n	800753c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	1ad2      	subs	r2, r2, r3
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	68da      	ldr	r2, [r3, #12]
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	4293      	cmp	r3, r2
 800752c:	bf28      	it	cs
 800752e:	4613      	movcs	r3, r2
 8007530:	461a      	mov	r2, r3
 8007532:	6879      	ldr	r1, [r7, #4]
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 ffc5 	bl	80084c4 <USBD_CtlContinueRx>
 800753a:	e030      	b.n	800759e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b03      	cmp	r3, #3
 8007546:	d10b      	bne.n	8007560 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 ffc0 	bl	80084e6 <USBD_CtlSendStatus>
 8007566:	e01a      	b.n	800759e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b03      	cmp	r3, #3
 8007572:	d114      	bne.n	800759e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00e      	beq.n	800759e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	7afa      	ldrb	r2, [r7, #11]
 800758a:	4611      	mov	r1, r2
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	4798      	blx	r3
 8007590:	4603      	mov	r3, r0
 8007592:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007594:	7dfb      	ldrb	r3, [r7, #23]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	e000      	b.n	80075a0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3718      	adds	r7, #24
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	460b      	mov	r3, r1
 80075b2:	607a      	str	r2, [r7, #4]
 80075b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80075b6:	7afb      	ldrb	r3, [r7, #11]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d16b      	bne.n	8007694 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	3314      	adds	r3, #20
 80075c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d156      	bne.n	800767a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	689a      	ldr	r2, [r3, #8]
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d914      	bls.n	8007602 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	689a      	ldr	r2, [r3, #8]
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	1ad2      	subs	r2, r2, r3
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	461a      	mov	r2, r3
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 ff3a 	bl	8008468 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075f4:	2300      	movs	r3, #0
 80075f6:	2200      	movs	r2, #0
 80075f8:	2100      	movs	r1, #0
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f001 fc09 	bl	8008e12 <USBD_LL_PrepareReceive>
 8007600:	e03b      	b.n	800767a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	68da      	ldr	r2, [r3, #12]
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	429a      	cmp	r2, r3
 800760c:	d11c      	bne.n	8007648 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007616:	429a      	cmp	r2, r3
 8007618:	d316      	bcc.n	8007648 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007624:	429a      	cmp	r2, r3
 8007626:	d20f      	bcs.n	8007648 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007628:	2200      	movs	r2, #0
 800762a:	2100      	movs	r1, #0
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 ff1b 	bl	8008468 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800763a:	2300      	movs	r3, #0
 800763c:	2200      	movs	r2, #0
 800763e:	2100      	movs	r1, #0
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f001 fbe6 	bl	8008e12 <USBD_LL_PrepareReceive>
 8007646:	e018      	b.n	800767a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b03      	cmp	r3, #3
 8007652:	d10b      	bne.n	800766c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d005      	beq.n	800766c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800766c:	2180      	movs	r1, #128	; 0x80
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f001 fb24 	bl	8008cbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 ff49 	bl	800850c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007680:	2b01      	cmp	r3, #1
 8007682:	d122      	bne.n	80076ca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f7ff fe98 	bl	80073ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007692:	e01a      	b.n	80076ca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b03      	cmp	r3, #3
 800769e:	d114      	bne.n	80076ca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00e      	beq.n	80076ca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	7afa      	ldrb	r2, [r7, #11]
 80076b6:	4611      	mov	r1, r2
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	4798      	blx	r3
 80076bc:	4603      	mov	r3, r0
 80076be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80076c0:	7dfb      	ldrb	r3, [r7, #23]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d001      	beq.n	80076ca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
 80076c8:	e000      	b.n	80076cc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3718      	adds	r7, #24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007704:	2303      	movs	r3, #3
 8007706:	e02f      	b.n	8007768 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00f      	beq.n	8007732 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d009      	beq.n	8007732 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	6852      	ldr	r2, [r2, #4]
 800772a:	b2d2      	uxtb	r2, r2
 800772c:	4611      	mov	r1, r2
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007732:	2340      	movs	r3, #64	; 0x40
 8007734:	2200      	movs	r2, #0
 8007736:	2100      	movs	r1, #0
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f001 fa7a 	bl	8008c32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2240      	movs	r2, #64	; 0x40
 800774a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800774e:	2340      	movs	r3, #64	; 0x40
 8007750:	2200      	movs	r2, #0
 8007752:	2180      	movs	r1, #128	; 0x80
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f001 fa6c 	bl	8008c32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2240      	movs	r2, #64	; 0x40
 8007764:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	460b      	mov	r3, r1
 800777a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	78fa      	ldrb	r2, [r7, #3]
 8007780:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2204      	movs	r2, #4
 80077aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d106      	bne.n	80077de <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80077fe:	2303      	movs	r3, #3
 8007800:	e012      	b.n	8007828 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b03      	cmp	r3, #3
 800780c:	d10b      	bne.n	8007826 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007814:	69db      	ldr	r3, [r3, #28]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d005      	beq.n	8007826 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007830:	b480      	push	{r7}
 8007832:	b087      	sub	sp, #28
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	3301      	adds	r3, #1
 8007846:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800784e:	8a3b      	ldrh	r3, [r7, #16]
 8007850:	021b      	lsls	r3, r3, #8
 8007852:	b21a      	sxth	r2, r3
 8007854:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007858:	4313      	orrs	r3, r2
 800785a:	b21b      	sxth	r3, r3
 800785c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800785e:	89fb      	ldrh	r3, [r7, #14]
}
 8007860:	4618      	mov	r0, r3
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007882:	2b40      	cmp	r3, #64	; 0x40
 8007884:	d005      	beq.n	8007892 <USBD_StdDevReq+0x26>
 8007886:	2b40      	cmp	r3, #64	; 0x40
 8007888:	d853      	bhi.n	8007932 <USBD_StdDevReq+0xc6>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00b      	beq.n	80078a6 <USBD_StdDevReq+0x3a>
 800788e:	2b20      	cmp	r3, #32
 8007890:	d14f      	bne.n	8007932 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	4798      	blx	r3
 80078a0:	4603      	mov	r3, r0
 80078a2:	73fb      	strb	r3, [r7, #15]
      break;
 80078a4:	e04a      	b.n	800793c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	785b      	ldrb	r3, [r3, #1]
 80078aa:	2b09      	cmp	r3, #9
 80078ac:	d83b      	bhi.n	8007926 <USBD_StdDevReq+0xba>
 80078ae:	a201      	add	r2, pc, #4	; (adr r2, 80078b4 <USBD_StdDevReq+0x48>)
 80078b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b4:	08007909 	.word	0x08007909
 80078b8:	0800791d 	.word	0x0800791d
 80078bc:	08007927 	.word	0x08007927
 80078c0:	08007913 	.word	0x08007913
 80078c4:	08007927 	.word	0x08007927
 80078c8:	080078e7 	.word	0x080078e7
 80078cc:	080078dd 	.word	0x080078dd
 80078d0:	08007927 	.word	0x08007927
 80078d4:	080078ff 	.word	0x080078ff
 80078d8:	080078f1 	.word	0x080078f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078dc:	6839      	ldr	r1, [r7, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f9de 	bl	8007ca0 <USBD_GetDescriptor>
          break;
 80078e4:	e024      	b.n	8007930 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fb6d 	bl	8007fc8 <USBD_SetAddress>
          break;
 80078ee:	e01f      	b.n	8007930 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fbac 	bl	8008050 <USBD_SetConfig>
 80078f8:	4603      	mov	r3, r0
 80078fa:	73fb      	strb	r3, [r7, #15]
          break;
 80078fc:	e018      	b.n	8007930 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fc4b 	bl	800819c <USBD_GetConfig>
          break;
 8007906:	e013      	b.n	8007930 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fc7c 	bl	8008208 <USBD_GetStatus>
          break;
 8007910:	e00e      	b.n	8007930 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fcab 	bl	8008270 <USBD_SetFeature>
          break;
 800791a:	e009      	b.n	8007930 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fcba 	bl	8008298 <USBD_ClrFeature>
          break;
 8007924:	e004      	b.n	8007930 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fd11 	bl	8008350 <USBD_CtlError>
          break;
 800792e:	bf00      	nop
      }
      break;
 8007930:	e004      	b.n	800793c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007932:	6839      	ldr	r1, [r7, #0]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fd0b 	bl	8008350 <USBD_CtlError>
      break;
 800793a:	bf00      	nop
  }

  return ret;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop

08007948 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800795e:	2b40      	cmp	r3, #64	; 0x40
 8007960:	d005      	beq.n	800796e <USBD_StdItfReq+0x26>
 8007962:	2b40      	cmp	r3, #64	; 0x40
 8007964:	d82f      	bhi.n	80079c6 <USBD_StdItfReq+0x7e>
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <USBD_StdItfReq+0x26>
 800796a:	2b20      	cmp	r3, #32
 800796c:	d12b      	bne.n	80079c6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007974:	b2db      	uxtb	r3, r3
 8007976:	3b01      	subs	r3, #1
 8007978:	2b02      	cmp	r3, #2
 800797a:	d81d      	bhi.n	80079b8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	889b      	ldrh	r3, [r3, #4]
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b01      	cmp	r3, #1
 8007984:	d813      	bhi.n	80079ae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	4798      	blx	r3
 8007994:	4603      	mov	r3, r0
 8007996:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	88db      	ldrh	r3, [r3, #6]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d110      	bne.n	80079c2 <USBD_StdItfReq+0x7a>
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10d      	bne.n	80079c2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fd9d 	bl	80084e6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079ac:	e009      	b.n	80079c2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80079ae:	6839      	ldr	r1, [r7, #0]
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fccd 	bl	8008350 <USBD_CtlError>
          break;
 80079b6:	e004      	b.n	80079c2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fcc8 	bl	8008350 <USBD_CtlError>
          break;
 80079c0:	e000      	b.n	80079c4 <USBD_StdItfReq+0x7c>
          break;
 80079c2:	bf00      	nop
      }
      break;
 80079c4:	e004      	b.n	80079d0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fcc1 	bl	8008350 <USBD_CtlError>
      break;
 80079ce:	bf00      	nop
  }

  return ret;
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b084      	sub	sp, #16
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	889b      	ldrh	r3, [r3, #4]
 80079ec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079f6:	2b40      	cmp	r3, #64	; 0x40
 80079f8:	d007      	beq.n	8007a0a <USBD_StdEPReq+0x30>
 80079fa:	2b40      	cmp	r3, #64	; 0x40
 80079fc:	f200 8145 	bhi.w	8007c8a <USBD_StdEPReq+0x2b0>
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00c      	beq.n	8007a1e <USBD_StdEPReq+0x44>
 8007a04:	2b20      	cmp	r3, #32
 8007a06:	f040 8140 	bne.w	8007c8a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	4798      	blx	r3
 8007a18:	4603      	mov	r3, r0
 8007a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a1c:	e13a      	b.n	8007c94 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	785b      	ldrb	r3, [r3, #1]
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d007      	beq.n	8007a36 <USBD_StdEPReq+0x5c>
 8007a26:	2b03      	cmp	r3, #3
 8007a28:	f300 8129 	bgt.w	8007c7e <USBD_StdEPReq+0x2a4>
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d07f      	beq.n	8007b30 <USBD_StdEPReq+0x156>
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d03c      	beq.n	8007aae <USBD_StdEPReq+0xd4>
 8007a34:	e123      	b.n	8007c7e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d002      	beq.n	8007a48 <USBD_StdEPReq+0x6e>
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d016      	beq.n	8007a74 <USBD_StdEPReq+0x9a>
 8007a46:	e02c      	b.n	8007aa2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00d      	beq.n	8007a6a <USBD_StdEPReq+0x90>
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	2b80      	cmp	r3, #128	; 0x80
 8007a52:	d00a      	beq.n	8007a6a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 f92f 	bl	8008cbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a5e:	2180      	movs	r1, #128	; 0x80
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 f92b 	bl	8008cbc <USBD_LL_StallEP>
 8007a66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a68:	e020      	b.n	8007aac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007a6a:	6839      	ldr	r1, [r7, #0]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fc6f 	bl	8008350 <USBD_CtlError>
              break;
 8007a72:	e01b      	b.n	8007aac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	885b      	ldrh	r3, [r3, #2]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10e      	bne.n	8007a9a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00b      	beq.n	8007a9a <USBD_StdEPReq+0xc0>
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	2b80      	cmp	r3, #128	; 0x80
 8007a86:	d008      	beq.n	8007a9a <USBD_StdEPReq+0xc0>
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	88db      	ldrh	r3, [r3, #6]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d104      	bne.n	8007a9a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f001 f911 	bl	8008cbc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fd23 	bl	80084e6 <USBD_CtlSendStatus>

              break;
 8007aa0:	e004      	b.n	8007aac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fc53 	bl	8008350 <USBD_CtlError>
              break;
 8007aaa:	bf00      	nop
          }
          break;
 8007aac:	e0ec      	b.n	8007c88 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d002      	beq.n	8007ac0 <USBD_StdEPReq+0xe6>
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	d016      	beq.n	8007aec <USBD_StdEPReq+0x112>
 8007abe:	e030      	b.n	8007b22 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00d      	beq.n	8007ae2 <USBD_StdEPReq+0x108>
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	2b80      	cmp	r3, #128	; 0x80
 8007aca:	d00a      	beq.n	8007ae2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f001 f8f3 	bl	8008cbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ad6:	2180      	movs	r1, #128	; 0x80
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f001 f8ef 	bl	8008cbc <USBD_LL_StallEP>
 8007ade:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ae0:	e025      	b.n	8007b2e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fc33 	bl	8008350 <USBD_CtlError>
              break;
 8007aea:	e020      	b.n	8007b2e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	885b      	ldrh	r3, [r3, #2]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d11b      	bne.n	8007b2c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d004      	beq.n	8007b08 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	4619      	mov	r1, r3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f001 f8f9 	bl	8008cfa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fcec 	bl	80084e6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	4798      	blx	r3
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007b20:	e004      	b.n	8007b2c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fc13 	bl	8008350 <USBD_CtlError>
              break;
 8007b2a:	e000      	b.n	8007b2e <USBD_StdEPReq+0x154>
              break;
 8007b2c:	bf00      	nop
          }
          break;
 8007b2e:	e0ab      	b.n	8007c88 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d002      	beq.n	8007b42 <USBD_StdEPReq+0x168>
 8007b3c:	2b03      	cmp	r3, #3
 8007b3e:	d032      	beq.n	8007ba6 <USBD_StdEPReq+0x1cc>
 8007b40:	e097      	b.n	8007c72 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b42:	7bbb      	ldrb	r3, [r7, #14]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d007      	beq.n	8007b58 <USBD_StdEPReq+0x17e>
 8007b48:	7bbb      	ldrb	r3, [r7, #14]
 8007b4a:	2b80      	cmp	r3, #128	; 0x80
 8007b4c:	d004      	beq.n	8007b58 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fbfd 	bl	8008350 <USBD_CtlError>
                break;
 8007b56:	e091      	b.n	8007c7c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	da0b      	bge.n	8007b78 <USBD_StdEPReq+0x19e>
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b66:	4613      	mov	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	3310      	adds	r3, #16
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	4413      	add	r3, r2
 8007b74:	3304      	adds	r3, #4
 8007b76:	e00b      	b.n	8007b90 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b7e:	4613      	mov	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	3304      	adds	r3, #4
 8007b90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2200      	movs	r2, #0
 8007b96:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fc47 	bl	8008432 <USBD_CtlSendData>
              break;
 8007ba4:	e06a      	b.n	8007c7c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ba6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	da11      	bge.n	8007bd2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
 8007bb0:	f003 020f 	and.w	r2, r3, #15
 8007bb4:	6879      	ldr	r1, [r7, #4]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	440b      	add	r3, r1
 8007bc0:	3324      	adds	r3, #36	; 0x24
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d117      	bne.n	8007bf8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fbc0 	bl	8008350 <USBD_CtlError>
                  break;
 8007bd0:	e054      	b.n	8007c7c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	f003 020f 	and.w	r2, r3, #15
 8007bd8:	6879      	ldr	r1, [r7, #4]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4413      	add	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	440b      	add	r3, r1
 8007be4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007be8:	881b      	ldrh	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d104      	bne.n	8007bf8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fbad 	bl	8008350 <USBD_CtlError>
                  break;
 8007bf6:	e041      	b.n	8007c7c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	da0b      	bge.n	8007c18 <USBD_StdEPReq+0x23e>
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c06:	4613      	mov	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	3310      	adds	r3, #16
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	4413      	add	r3, r2
 8007c14:	3304      	adds	r3, #4
 8007c16:	e00b      	b.n	8007c30 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
 8007c1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c1e:	4613      	mov	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	3304      	adds	r3, #4
 8007c30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <USBD_StdEPReq+0x264>
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
 8007c3a:	2b80      	cmp	r3, #128	; 0x80
 8007c3c:	d103      	bne.n	8007c46 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2200      	movs	r2, #0
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	e00e      	b.n	8007c64 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f001 f874 	bl	8008d38 <USBD_LL_IsStallEP>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	601a      	str	r2, [r3, #0]
 8007c5c:	e002      	b.n	8007c64 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2200      	movs	r2, #0
 8007c62:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2202      	movs	r2, #2
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fbe1 	bl	8008432 <USBD_CtlSendData>
              break;
 8007c70:	e004      	b.n	8007c7c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fb6b 	bl	8008350 <USBD_CtlError>
              break;
 8007c7a:	bf00      	nop
          }
          break;
 8007c7c:	e004      	b.n	8007c88 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fb65 	bl	8008350 <USBD_CtlError>
          break;
 8007c86:	bf00      	nop
      }
      break;
 8007c88:	e004      	b.n	8007c94 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fb5f 	bl	8008350 <USBD_CtlError>
      break;
 8007c92:	bf00      	nop
  }

  return ret;
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
	...

08007ca0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	885b      	ldrh	r3, [r3, #2]
 8007cba:	0a1b      	lsrs	r3, r3, #8
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	2b0e      	cmp	r3, #14
 8007cc2:	f200 8152 	bhi.w	8007f6a <USBD_GetDescriptor+0x2ca>
 8007cc6:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <USBD_GetDescriptor+0x2c>)
 8007cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ccc:	08007d3d 	.word	0x08007d3d
 8007cd0:	08007d55 	.word	0x08007d55
 8007cd4:	08007d95 	.word	0x08007d95
 8007cd8:	08007f6b 	.word	0x08007f6b
 8007cdc:	08007f6b 	.word	0x08007f6b
 8007ce0:	08007f0b 	.word	0x08007f0b
 8007ce4:	08007f37 	.word	0x08007f37
 8007ce8:	08007f6b 	.word	0x08007f6b
 8007cec:	08007f6b 	.word	0x08007f6b
 8007cf0:	08007f6b 	.word	0x08007f6b
 8007cf4:	08007f6b 	.word	0x08007f6b
 8007cf8:	08007f6b 	.word	0x08007f6b
 8007cfc:	08007f6b 	.word	0x08007f6b
 8007d00:	08007f6b 	.word	0x08007f6b
 8007d04:	08007d09 	.word	0x08007d09
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00b      	beq.n	8007d2c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	7c12      	ldrb	r2, [r2, #16]
 8007d20:	f107 0108 	add.w	r1, r7, #8
 8007d24:	4610      	mov	r0, r2
 8007d26:	4798      	blx	r3
 8007d28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d2a:	e126      	b.n	8007f7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fb0e 	bl	8008350 <USBD_CtlError>
        err++;
 8007d34:	7afb      	ldrb	r3, [r7, #11]
 8007d36:	3301      	adds	r3, #1
 8007d38:	72fb      	strb	r3, [r7, #11]
      break;
 8007d3a:	e11e      	b.n	8007f7a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	7c12      	ldrb	r2, [r2, #16]
 8007d48:	f107 0108 	add.w	r1, r7, #8
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4798      	blx	r3
 8007d50:	60f8      	str	r0, [r7, #12]
      break;
 8007d52:	e112      	b.n	8007f7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	7c1b      	ldrb	r3, [r3, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10d      	bne.n	8007d78 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d64:	f107 0208 	add.w	r2, r7, #8
 8007d68:	4610      	mov	r0, r2
 8007d6a:	4798      	blx	r3
 8007d6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3301      	adds	r3, #1
 8007d72:	2202      	movs	r2, #2
 8007d74:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d76:	e100      	b.n	8007f7a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	f107 0208 	add.w	r2, r7, #8
 8007d84:	4610      	mov	r0, r2
 8007d86:	4798      	blx	r3
 8007d88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	2202      	movs	r2, #2
 8007d90:	701a      	strb	r2, [r3, #0]
      break;
 8007d92:	e0f2      	b.n	8007f7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	885b      	ldrh	r3, [r3, #2]
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b05      	cmp	r3, #5
 8007d9c:	f200 80ac 	bhi.w	8007ef8 <USBD_GetDescriptor+0x258>
 8007da0:	a201      	add	r2, pc, #4	; (adr r2, 8007da8 <USBD_GetDescriptor+0x108>)
 8007da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da6:	bf00      	nop
 8007da8:	08007dc1 	.word	0x08007dc1
 8007dac:	08007df5 	.word	0x08007df5
 8007db0:	08007e29 	.word	0x08007e29
 8007db4:	08007e5d 	.word	0x08007e5d
 8007db8:	08007e91 	.word	0x08007e91
 8007dbc:	08007ec5 	.word	0x08007ec5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00b      	beq.n	8007de4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	7c12      	ldrb	r2, [r2, #16]
 8007dd8:	f107 0108 	add.w	r1, r7, #8
 8007ddc:	4610      	mov	r0, r2
 8007dde:	4798      	blx	r3
 8007de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007de2:	e091      	b.n	8007f08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fab2 	bl	8008350 <USBD_CtlError>
            err++;
 8007dec:	7afb      	ldrb	r3, [r7, #11]
 8007dee:	3301      	adds	r3, #1
 8007df0:	72fb      	strb	r3, [r7, #11]
          break;
 8007df2:	e089      	b.n	8007f08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00b      	beq.n	8007e18 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	7c12      	ldrb	r2, [r2, #16]
 8007e0c:	f107 0108 	add.w	r1, r7, #8
 8007e10:	4610      	mov	r0, r2
 8007e12:	4798      	blx	r3
 8007e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e16:	e077      	b.n	8007f08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e18:	6839      	ldr	r1, [r7, #0]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fa98 	bl	8008350 <USBD_CtlError>
            err++;
 8007e20:	7afb      	ldrb	r3, [r7, #11]
 8007e22:	3301      	adds	r3, #1
 8007e24:	72fb      	strb	r3, [r7, #11]
          break;
 8007e26:	e06f      	b.n	8007f08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00b      	beq.n	8007e4c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	7c12      	ldrb	r2, [r2, #16]
 8007e40:	f107 0108 	add.w	r1, r7, #8
 8007e44:	4610      	mov	r0, r2
 8007e46:	4798      	blx	r3
 8007e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e4a:	e05d      	b.n	8007f08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fa7e 	bl	8008350 <USBD_CtlError>
            err++;
 8007e54:	7afb      	ldrb	r3, [r7, #11]
 8007e56:	3301      	adds	r3, #1
 8007e58:	72fb      	strb	r3, [r7, #11]
          break;
 8007e5a:	e055      	b.n	8007f08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00b      	beq.n	8007e80 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	7c12      	ldrb	r2, [r2, #16]
 8007e74:	f107 0108 	add.w	r1, r7, #8
 8007e78:	4610      	mov	r0, r2
 8007e7a:	4798      	blx	r3
 8007e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e7e:	e043      	b.n	8007f08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fa64 	bl	8008350 <USBD_CtlError>
            err++;
 8007e88:	7afb      	ldrb	r3, [r7, #11]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e8e:	e03b      	b.n	8007f08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00b      	beq.n	8007eb4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea2:	695b      	ldr	r3, [r3, #20]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	7c12      	ldrb	r2, [r2, #16]
 8007ea8:	f107 0108 	add.w	r1, r7, #8
 8007eac:	4610      	mov	r0, r2
 8007eae:	4798      	blx	r3
 8007eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eb2:	e029      	b.n	8007f08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fa4a 	bl	8008350 <USBD_CtlError>
            err++;
 8007ebc:	7afb      	ldrb	r3, [r7, #11]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ec2:	e021      	b.n	8007f08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00b      	beq.n	8007ee8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	7c12      	ldrb	r2, [r2, #16]
 8007edc:	f107 0108 	add.w	r1, r7, #8
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	4798      	blx	r3
 8007ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ee6:	e00f      	b.n	8007f08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fa30 	bl	8008350 <USBD_CtlError>
            err++;
 8007ef0:	7afb      	ldrb	r3, [r7, #11]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ef6:	e007      	b.n	8007f08 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fa28 	bl	8008350 <USBD_CtlError>
          err++;
 8007f00:	7afb      	ldrb	r3, [r7, #11]
 8007f02:	3301      	adds	r3, #1
 8007f04:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007f06:	bf00      	nop
      }
      break;
 8007f08:	e037      	b.n	8007f7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	7c1b      	ldrb	r3, [r3, #16]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d109      	bne.n	8007f26 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1a:	f107 0208 	add.w	r2, r7, #8
 8007f1e:	4610      	mov	r0, r2
 8007f20:	4798      	blx	r3
 8007f22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f24:	e029      	b.n	8007f7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fa11 	bl	8008350 <USBD_CtlError>
        err++;
 8007f2e:	7afb      	ldrb	r3, [r7, #11]
 8007f30:	3301      	adds	r3, #1
 8007f32:	72fb      	strb	r3, [r7, #11]
      break;
 8007f34:	e021      	b.n	8007f7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	7c1b      	ldrb	r3, [r3, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10d      	bne.n	8007f5a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f46:	f107 0208 	add.w	r2, r7, #8
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	4798      	blx	r3
 8007f4e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3301      	adds	r3, #1
 8007f54:	2207      	movs	r2, #7
 8007f56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f58:	e00f      	b.n	8007f7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f9f7 	bl	8008350 <USBD_CtlError>
        err++;
 8007f62:	7afb      	ldrb	r3, [r7, #11]
 8007f64:	3301      	adds	r3, #1
 8007f66:	72fb      	strb	r3, [r7, #11]
      break;
 8007f68:	e007      	b.n	8007f7a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f9ef 	bl	8008350 <USBD_CtlError>
      err++;
 8007f72:	7afb      	ldrb	r3, [r7, #11]
 8007f74:	3301      	adds	r3, #1
 8007f76:	72fb      	strb	r3, [r7, #11]
      break;
 8007f78:	bf00      	nop
  }

  if (err != 0U)
 8007f7a:	7afb      	ldrb	r3, [r7, #11]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d11e      	bne.n	8007fbe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	88db      	ldrh	r3, [r3, #6]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d016      	beq.n	8007fb6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007f88:	893b      	ldrh	r3, [r7, #8]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00e      	beq.n	8007fac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	88da      	ldrh	r2, [r3, #6]
 8007f92:	893b      	ldrh	r3, [r7, #8]
 8007f94:	4293      	cmp	r3, r2
 8007f96:	bf28      	it	cs
 8007f98:	4613      	movcs	r3, r2
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f9e:	893b      	ldrh	r3, [r7, #8]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	68f9      	ldr	r1, [r7, #12]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fa44 	bl	8008432 <USBD_CtlSendData>
 8007faa:	e009      	b.n	8007fc0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f9ce 	bl	8008350 <USBD_CtlError>
 8007fb4:	e004      	b.n	8007fc0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fa95 	bl	80084e6 <USBD_CtlSendStatus>
 8007fbc:	e000      	b.n	8007fc0 <USBD_GetDescriptor+0x320>
    return;
 8007fbe:	bf00      	nop
  }
}
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop

08007fc8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	889b      	ldrh	r3, [r3, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d131      	bne.n	800803e <USBD_SetAddress+0x76>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	88db      	ldrh	r3, [r3, #6]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d12d      	bne.n	800803e <USBD_SetAddress+0x76>
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	885b      	ldrh	r3, [r3, #2]
 8007fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8007fe8:	d829      	bhi.n	800803e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	885b      	ldrh	r3, [r3, #2]
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	d104      	bne.n	800800c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f9a3 	bl	8008350 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800800a:	e01d      	b.n	8008048 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	7bfa      	ldrb	r2, [r7, #15]
 8008010:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008014:	7bfb      	ldrb	r3, [r7, #15]
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 feba 	bl	8008d92 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fa61 	bl	80084e6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d004      	beq.n	8008034 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2202      	movs	r2, #2
 800802e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008032:	e009      	b.n	8008048 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800803c:	e004      	b.n	8008048 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f985 	bl	8008350 <USBD_CtlError>
  }
}
 8008046:	bf00      	nop
 8008048:	bf00      	nop
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	885b      	ldrh	r3, [r3, #2]
 8008062:	b2da      	uxtb	r2, r3
 8008064:	4b4c      	ldr	r3, [pc, #304]	; (8008198 <USBD_SetConfig+0x148>)
 8008066:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008068:	4b4b      	ldr	r3, [pc, #300]	; (8008198 <USBD_SetConfig+0x148>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d905      	bls.n	800807c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f96c 	bl	8008350 <USBD_CtlError>
    return USBD_FAIL;
 8008078:	2303      	movs	r3, #3
 800807a:	e088      	b.n	800818e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b02      	cmp	r3, #2
 8008086:	d002      	beq.n	800808e <USBD_SetConfig+0x3e>
 8008088:	2b03      	cmp	r3, #3
 800808a:	d025      	beq.n	80080d8 <USBD_SetConfig+0x88>
 800808c:	e071      	b.n	8008172 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800808e:	4b42      	ldr	r3, [pc, #264]	; (8008198 <USBD_SetConfig+0x148>)
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d01c      	beq.n	80080d0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008096:	4b40      	ldr	r3, [pc, #256]	; (8008198 <USBD_SetConfig+0x148>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080a0:	4b3d      	ldr	r3, [pc, #244]	; (8008198 <USBD_SetConfig+0x148>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	4619      	mov	r1, r3
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7ff f992 	bl	80073d0 <USBD_SetClassConfig>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d004      	beq.n	80080c0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f949 	bl	8008350 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080be:	e065      	b.n	800818c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fa10 	bl	80084e6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2203      	movs	r2, #3
 80080ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080ce:	e05d      	b.n	800818c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fa08 	bl	80084e6 <USBD_CtlSendStatus>
      break;
 80080d6:	e059      	b.n	800818c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080d8:	4b2f      	ldr	r3, [pc, #188]	; (8008198 <USBD_SetConfig+0x148>)
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d112      	bne.n	8008106 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2202      	movs	r2, #2
 80080e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80080e8:	4b2b      	ldr	r3, [pc, #172]	; (8008198 <USBD_SetConfig+0x148>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	461a      	mov	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080f2:	4b29      	ldr	r3, [pc, #164]	; (8008198 <USBD_SetConfig+0x148>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7ff f985 	bl	8007408 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f9f1 	bl	80084e6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008104:	e042      	b.n	800818c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008106:	4b24      	ldr	r3, [pc, #144]	; (8008198 <USBD_SetConfig+0x148>)
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	461a      	mov	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	429a      	cmp	r2, r3
 8008112:	d02a      	beq.n	800816a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	b2db      	uxtb	r3, r3
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7ff f973 	bl	8007408 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008122:	4b1d      	ldr	r3, [pc, #116]	; (8008198 <USBD_SetConfig+0x148>)
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800812c:	4b1a      	ldr	r3, [pc, #104]	; (8008198 <USBD_SetConfig+0x148>)
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7ff f94c 	bl	80073d0 <USBD_SetClassConfig>
 8008138:	4603      	mov	r3, r0
 800813a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800813c:	7bfb      	ldrb	r3, [r7, #15]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00f      	beq.n	8008162 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f903 	bl	8008350 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	b2db      	uxtb	r3, r3
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7ff f958 	bl	8007408 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2202      	movs	r2, #2
 800815c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008160:	e014      	b.n	800818c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 f9bf 	bl	80084e6 <USBD_CtlSendStatus>
      break;
 8008168:	e010      	b.n	800818c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f9bb 	bl	80084e6 <USBD_CtlSendStatus>
      break;
 8008170:	e00c      	b.n	800818c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f8eb 	bl	8008350 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800817a:	4b07      	ldr	r3, [pc, #28]	; (8008198 <USBD_SetConfig+0x148>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	4619      	mov	r1, r3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7ff f941 	bl	8007408 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008186:	2303      	movs	r3, #3
 8008188:	73fb      	strb	r3, [r7, #15]
      break;
 800818a:	bf00      	nop
  }

  return ret;
 800818c:	7bfb      	ldrb	r3, [r7, #15]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	200001a0 	.word	0x200001a0

0800819c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	88db      	ldrh	r3, [r3, #6]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d004      	beq.n	80081b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f8cd 	bl	8008350 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081b6:	e023      	b.n	8008200 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	dc02      	bgt.n	80081ca <USBD_GetConfig+0x2e>
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	dc03      	bgt.n	80081d0 <USBD_GetConfig+0x34>
 80081c8:	e015      	b.n	80081f6 <USBD_GetConfig+0x5a>
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d00b      	beq.n	80081e6 <USBD_GetConfig+0x4a>
 80081ce:	e012      	b.n	80081f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	3308      	adds	r3, #8
 80081da:	2201      	movs	r2, #1
 80081dc:	4619      	mov	r1, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f927 	bl	8008432 <USBD_CtlSendData>
        break;
 80081e4:	e00c      	b.n	8008200 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	3304      	adds	r3, #4
 80081ea:	2201      	movs	r2, #1
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f91f 	bl	8008432 <USBD_CtlSendData>
        break;
 80081f4:	e004      	b.n	8008200 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 f8a9 	bl	8008350 <USBD_CtlError>
        break;
 80081fe:	bf00      	nop
}
 8008200:	bf00      	nop
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008218:	b2db      	uxtb	r3, r3
 800821a:	3b01      	subs	r3, #1
 800821c:	2b02      	cmp	r3, #2
 800821e:	d81e      	bhi.n	800825e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	88db      	ldrh	r3, [r3, #6]
 8008224:	2b02      	cmp	r3, #2
 8008226:	d004      	beq.n	8008232 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f890 	bl	8008350 <USBD_CtlError>
        break;
 8008230:	e01a      	b.n	8008268 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800823e:	2b00      	cmp	r3, #0
 8008240:	d005      	beq.n	800824e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	f043 0202 	orr.w	r2, r3, #2
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	330c      	adds	r3, #12
 8008252:	2202      	movs	r2, #2
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f8eb 	bl	8008432 <USBD_CtlSendData>
      break;
 800825c:	e004      	b.n	8008268 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f875 	bl	8008350 <USBD_CtlError>
      break;
 8008266:	bf00      	nop
  }
}
 8008268:	bf00      	nop
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	885b      	ldrh	r3, [r3, #2]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d106      	bne.n	8008290 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f92b 	bl	80084e6 <USBD_CtlSendStatus>
  }
}
 8008290:	bf00      	nop
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	3b01      	subs	r3, #1
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d80b      	bhi.n	80082c8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	885b      	ldrh	r3, [r3, #2]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d10c      	bne.n	80082d2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f910 	bl	80084e6 <USBD_CtlSendStatus>
      }
      break;
 80082c6:	e004      	b.n	80082d2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f840 	bl	8008350 <USBD_CtlError>
      break;
 80082d0:	e000      	b.n	80082d4 <USBD_ClrFeature+0x3c>
      break;
 80082d2:	bf00      	nop
  }
}
 80082d4:	bf00      	nop
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	781a      	ldrb	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3301      	adds	r3, #1
 80082f6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	781a      	ldrb	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3301      	adds	r3, #1
 8008304:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f7ff fa92 	bl	8007830 <SWAPBYTE>
 800830c:	4603      	mov	r3, r0
 800830e:	461a      	mov	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	3301      	adds	r3, #1
 8008318:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3301      	adds	r3, #1
 800831e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f7ff fa85 	bl	8007830 <SWAPBYTE>
 8008326:	4603      	mov	r3, r0
 8008328:	461a      	mov	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	3301      	adds	r3, #1
 8008332:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	3301      	adds	r3, #1
 8008338:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f7ff fa78 	bl	8007830 <SWAPBYTE>
 8008340:	4603      	mov	r3, r0
 8008342:	461a      	mov	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	80da      	strh	r2, [r3, #6]
}
 8008348:	bf00      	nop
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800835a:	2180      	movs	r1, #128	; 0x80
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fcad 	bl	8008cbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008362:	2100      	movs	r1, #0
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fca9 	bl	8008cbc <USBD_LL_StallEP>
}
 800836a:	bf00      	nop
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b086      	sub	sp, #24
 8008376:	af00      	add	r7, sp, #0
 8008378:	60f8      	str	r0, [r7, #12]
 800837a:	60b9      	str	r1, [r7, #8]
 800837c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800837e:	2300      	movs	r3, #0
 8008380:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d036      	beq.n	80083f6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800838c:	6938      	ldr	r0, [r7, #16]
 800838e:	f000 f836 	bl	80083fe <USBD_GetLen>
 8008392:	4603      	mov	r3, r0
 8008394:	3301      	adds	r3, #1
 8008396:	b29b      	uxth	r3, r3
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	b29a      	uxth	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083a0:	7dfb      	ldrb	r3, [r7, #23]
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	4413      	add	r3, r2
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	7812      	ldrb	r2, [r2, #0]
 80083aa:	701a      	strb	r2, [r3, #0]
  idx++;
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
 80083ae:	3301      	adds	r3, #1
 80083b0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083b2:	7dfb      	ldrb	r3, [r7, #23]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	4413      	add	r3, r2
 80083b8:	2203      	movs	r2, #3
 80083ba:	701a      	strb	r2, [r3, #0]
  idx++;
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
 80083be:	3301      	adds	r3, #1
 80083c0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083c2:	e013      	b.n	80083ec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	4413      	add	r3, r2
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	7812      	ldrb	r2, [r2, #0]
 80083ce:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	3301      	adds	r3, #1
 80083d4:	613b      	str	r3, [r7, #16]
    idx++;
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
 80083d8:	3301      	adds	r3, #1
 80083da:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	4413      	add	r3, r2
 80083e2:	2200      	movs	r2, #0
 80083e4:	701a      	strb	r2, [r3, #0]
    idx++;
 80083e6:	7dfb      	ldrb	r3, [r7, #23]
 80083e8:	3301      	adds	r3, #1
 80083ea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1e7      	bne.n	80083c4 <USBD_GetString+0x52>
 80083f4:	e000      	b.n	80083f8 <USBD_GetString+0x86>
    return;
 80083f6:	bf00      	nop
  }
}
 80083f8:	3718      	adds	r7, #24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083fe:	b480      	push	{r7}
 8008400:	b085      	sub	sp, #20
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800840e:	e005      	b.n	800841c <USBD_GetLen+0x1e>
  {
    len++;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
 8008412:	3301      	adds	r3, #1
 8008414:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	3301      	adds	r3, #1
 800841a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1f5      	bne.n	8008410 <USBD_GetLen+0x12>
  }

  return len;
 8008424:	7bfb      	ldrb	r3, [r7, #15]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	60f8      	str	r0, [r7, #12]
 800843a:	60b9      	str	r1, [r7, #8]
 800843c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2202      	movs	r2, #2
 8008442:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	2100      	movs	r1, #0
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f000 fcb9 	bl	8008dd0 <USBD_LL_Transmit>

  return USBD_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	2100      	movs	r1, #0
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f000 fca8 	bl	8008dd0 <USBD_LL_Transmit>

  return USBD_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	60f8      	str	r0, [r7, #12]
 8008492:	60b9      	str	r1, [r7, #8]
 8008494:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2203      	movs	r2, #3
 800849a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	2100      	movs	r1, #0
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 fcac 	bl	8008e12 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	2100      	movs	r1, #0
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f000 fc9b 	bl	8008e12 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2204      	movs	r2, #4
 80084f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084f6:	2300      	movs	r3, #0
 80084f8:	2200      	movs	r2, #0
 80084fa:	2100      	movs	r1, #0
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fc67 	bl	8008dd0 <USBD_LL_Transmit>

  return USBD_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2205      	movs	r2, #5
 8008518:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800851c:	2300      	movs	r3, #0
 800851e:	2200      	movs	r2, #0
 8008520:	2100      	movs	r1, #0
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fc75 	bl	8008e12 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
	...

08008534 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008538:	2200      	movs	r2, #0
 800853a:	4912      	ldr	r1, [pc, #72]	; (8008584 <MX_USB_Device_Init+0x50>)
 800853c:	4812      	ldr	r0, [pc, #72]	; (8008588 <MX_USB_Device_Init+0x54>)
 800853e:	f7fe fed9 	bl	80072f4 <USBD_Init>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008548:	f7f8 f814 	bl	8000574 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800854c:	490f      	ldr	r1, [pc, #60]	; (800858c <MX_USB_Device_Init+0x58>)
 800854e:	480e      	ldr	r0, [pc, #56]	; (8008588 <MX_USB_Device_Init+0x54>)
 8008550:	f7fe ff00 	bl	8007354 <USBD_RegisterClass>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800855a:	f7f8 f80b 	bl	8000574 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800855e:	490c      	ldr	r1, [pc, #48]	; (8008590 <MX_USB_Device_Init+0x5c>)
 8008560:	4809      	ldr	r0, [pc, #36]	; (8008588 <MX_USB_Device_Init+0x54>)
 8008562:	f7fe fe51 	bl	8007208 <USBD_CDC_RegisterInterface>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800856c:	f7f8 f802 	bl	8000574 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008570:	4805      	ldr	r0, [pc, #20]	; (8008588 <MX_USB_Device_Init+0x54>)
 8008572:	f7fe ff16 	bl	80073a2 <USBD_Start>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800857c:	f7f7 fffa 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008580:	bf00      	nop
 8008582:	bd80      	pop	{r7, pc}
 8008584:	20000130 	.word	0x20000130
 8008588:	20000540 	.word	0x20000540
 800858c:	20000018 	.word	0x20000018
 8008590:	2000011c 	.word	0x2000011c

08008594 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008598:	2200      	movs	r2, #0
 800859a:	4905      	ldr	r1, [pc, #20]	; (80085b0 <CDC_Init_FS+0x1c>)
 800859c:	4805      	ldr	r0, [pc, #20]	; (80085b4 <CDC_Init_FS+0x20>)
 800859e:	f7fe fe48 	bl	8007232 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085a2:	4905      	ldr	r1, [pc, #20]	; (80085b8 <CDC_Init_FS+0x24>)
 80085a4:	4803      	ldr	r0, [pc, #12]	; (80085b4 <CDC_Init_FS+0x20>)
 80085a6:	f7fe fe62 	bl	800726e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	20001010 	.word	0x20001010
 80085b4:	20000540 	.word	0x20000540
 80085b8:	20000810 	.word	0x20000810

080085bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085bc:	b480      	push	{r7}
 80085be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	4603      	mov	r3, r0
 80085d4:	6039      	str	r1, [r7, #0]
 80085d6:	71fb      	strb	r3, [r7, #7]
 80085d8:	4613      	mov	r3, r2
 80085da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80085dc:	79fb      	ldrb	r3, [r7, #7]
 80085de:	2b23      	cmp	r3, #35	; 0x23
 80085e0:	d84a      	bhi.n	8008678 <CDC_Control_FS+0xac>
 80085e2:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <CDC_Control_FS+0x1c>)
 80085e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e8:	08008679 	.word	0x08008679
 80085ec:	08008679 	.word	0x08008679
 80085f0:	08008679 	.word	0x08008679
 80085f4:	08008679 	.word	0x08008679
 80085f8:	08008679 	.word	0x08008679
 80085fc:	08008679 	.word	0x08008679
 8008600:	08008679 	.word	0x08008679
 8008604:	08008679 	.word	0x08008679
 8008608:	08008679 	.word	0x08008679
 800860c:	08008679 	.word	0x08008679
 8008610:	08008679 	.word	0x08008679
 8008614:	08008679 	.word	0x08008679
 8008618:	08008679 	.word	0x08008679
 800861c:	08008679 	.word	0x08008679
 8008620:	08008679 	.word	0x08008679
 8008624:	08008679 	.word	0x08008679
 8008628:	08008679 	.word	0x08008679
 800862c:	08008679 	.word	0x08008679
 8008630:	08008679 	.word	0x08008679
 8008634:	08008679 	.word	0x08008679
 8008638:	08008679 	.word	0x08008679
 800863c:	08008679 	.word	0x08008679
 8008640:	08008679 	.word	0x08008679
 8008644:	08008679 	.word	0x08008679
 8008648:	08008679 	.word	0x08008679
 800864c:	08008679 	.word	0x08008679
 8008650:	08008679 	.word	0x08008679
 8008654:	08008679 	.word	0x08008679
 8008658:	08008679 	.word	0x08008679
 800865c:	08008679 	.word	0x08008679
 8008660:	08008679 	.word	0x08008679
 8008664:	08008679 	.word	0x08008679
 8008668:	08008679 	.word	0x08008679
 800866c:	08008679 	.word	0x08008679
 8008670:	08008679 	.word	0x08008679
 8008674:	08008679 	.word	0x08008679
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008678:	bf00      	nop
  }

  return (USBD_OK);
 800867a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800867c:	4618      	mov	r0, r3
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008692:	6879      	ldr	r1, [r7, #4]
 8008694:	4805      	ldr	r0, [pc, #20]	; (80086ac <CDC_Receive_FS+0x24>)
 8008696:	f7fe fdea 	bl	800726e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800869a:	4804      	ldr	r0, [pc, #16]	; (80086ac <CDC_Receive_FS+0x24>)
 800869c:	f7fe fe00 	bl	80072a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80086a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	20000540 	.word	0x20000540

080086b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b087      	sub	sp, #28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	4613      	mov	r3, r2
 80086bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80086c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	371c      	adds	r7, #28
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
	...

080086d4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4603      	mov	r3, r0
 80086dc:	6039      	str	r1, [r7, #0]
 80086de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	2212      	movs	r2, #18
 80086e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80086e6:	4b03      	ldr	r3, [pc, #12]	; (80086f4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr
 80086f4:	20000150 	.word	0x20000150

080086f8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4603      	mov	r3, r0
 8008700:	6039      	str	r1, [r7, #0]
 8008702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2204      	movs	r2, #4
 8008708:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800870a:	4b03      	ldr	r3, [pc, #12]	; (8008718 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	20000164 	.word	0x20000164

0800871c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	4603      	mov	r3, r0
 8008724:	6039      	str	r1, [r7, #0]
 8008726:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008728:	79fb      	ldrb	r3, [r7, #7]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d105      	bne.n	800873a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	4907      	ldr	r1, [pc, #28]	; (8008750 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008732:	4808      	ldr	r0, [pc, #32]	; (8008754 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008734:	f7ff fe1d 	bl	8008372 <USBD_GetString>
 8008738:	e004      	b.n	8008744 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	4904      	ldr	r1, [pc, #16]	; (8008750 <USBD_CDC_ProductStrDescriptor+0x34>)
 800873e:	4805      	ldr	r0, [pc, #20]	; (8008754 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008740:	f7ff fe17 	bl	8008372 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008744:	4b02      	ldr	r3, [pc, #8]	; (8008750 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008746:	4618      	mov	r0, r3
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	20001810 	.word	0x20001810
 8008754:	08008fec 	.word	0x08008fec

08008758 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	4603      	mov	r3, r0
 8008760:	6039      	str	r1, [r7, #0]
 8008762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	4904      	ldr	r1, [pc, #16]	; (8008778 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008768:	4804      	ldr	r0, [pc, #16]	; (800877c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800876a:	f7ff fe02 	bl	8008372 <USBD_GetString>
  return USBD_StrDesc;
 800876e:	4b02      	ldr	r3, [pc, #8]	; (8008778 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008770:	4618      	mov	r0, r3
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	20001810 	.word	0x20001810
 800877c:	08009004 	.word	0x08009004

08008780 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	4603      	mov	r3, r0
 8008788:	6039      	str	r1, [r7, #0]
 800878a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	221a      	movs	r2, #26
 8008790:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008792:	f000 f843 	bl	800881c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008796:	4b02      	ldr	r3, [pc, #8]	; (80087a0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008798:	4618      	mov	r0, r3
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	20000168 	.word	0x20000168

080087a4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	6039      	str	r1, [r7, #0]
 80087ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d105      	bne.n	80087c2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	4907      	ldr	r1, [pc, #28]	; (80087d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80087ba:	4808      	ldr	r0, [pc, #32]	; (80087dc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80087bc:	f7ff fdd9 	bl	8008372 <USBD_GetString>
 80087c0:	e004      	b.n	80087cc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	4904      	ldr	r1, [pc, #16]	; (80087d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80087c6:	4805      	ldr	r0, [pc, #20]	; (80087dc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80087c8:	f7ff fdd3 	bl	8008372 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087cc:	4b02      	ldr	r3, [pc, #8]	; (80087d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20001810 	.word	0x20001810
 80087dc:	08009018 	.word	0x08009018

080087e0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	4603      	mov	r3, r0
 80087e8:	6039      	str	r1, [r7, #0]
 80087ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087ec:	79fb      	ldrb	r3, [r7, #7]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d105      	bne.n	80087fe <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	4907      	ldr	r1, [pc, #28]	; (8008814 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80087f6:	4808      	ldr	r0, [pc, #32]	; (8008818 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80087f8:	f7ff fdbb 	bl	8008372 <USBD_GetString>
 80087fc:	e004      	b.n	8008808 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	4904      	ldr	r1, [pc, #16]	; (8008814 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008802:	4805      	ldr	r0, [pc, #20]	; (8008818 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008804:	f7ff fdb5 	bl	8008372 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008808:	4b02      	ldr	r3, [pc, #8]	; (8008814 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800880a:	4618      	mov	r0, r3
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	20001810 	.word	0x20001810
 8008818:	08009024 	.word	0x08009024

0800881c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008822:	4b0f      	ldr	r3, [pc, #60]	; (8008860 <Get_SerialNum+0x44>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008828:	4b0e      	ldr	r3, [pc, #56]	; (8008864 <Get_SerialNum+0x48>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800882e:	4b0e      	ldr	r3, [pc, #56]	; (8008868 <Get_SerialNum+0x4c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4413      	add	r3, r2
 800883a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d009      	beq.n	8008856 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008842:	2208      	movs	r2, #8
 8008844:	4909      	ldr	r1, [pc, #36]	; (800886c <Get_SerialNum+0x50>)
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f000 f814 	bl	8008874 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800884c:	2204      	movs	r2, #4
 800884e:	4908      	ldr	r1, [pc, #32]	; (8008870 <Get_SerialNum+0x54>)
 8008850:	68b8      	ldr	r0, [r7, #8]
 8008852:	f000 f80f 	bl	8008874 <IntToUnicode>
  }
}
 8008856:	bf00      	nop
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	0bfa0590 	.word	0x0bfa0590
 8008864:	0bfa0594 	.word	0x0bfa0594
 8008868:	0bfa0598 	.word	0x0bfa0598
 800886c:	2000016a 	.word	0x2000016a
 8008870:	2000017a 	.word	0x2000017a

08008874 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008874:	b480      	push	{r7}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	4613      	mov	r3, r2
 8008880:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008882:	2300      	movs	r3, #0
 8008884:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008886:	2300      	movs	r3, #0
 8008888:	75fb      	strb	r3, [r7, #23]
 800888a:	e027      	b.n	80088dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	0f1b      	lsrs	r3, r3, #28
 8008890:	2b09      	cmp	r3, #9
 8008892:	d80b      	bhi.n	80088ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	0f1b      	lsrs	r3, r3, #28
 8008898:	b2da      	uxtb	r2, r3
 800889a:	7dfb      	ldrb	r3, [r7, #23]
 800889c:	005b      	lsls	r3, r3, #1
 800889e:	4619      	mov	r1, r3
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	440b      	add	r3, r1
 80088a4:	3230      	adds	r2, #48	; 0x30
 80088a6:	b2d2      	uxtb	r2, r2
 80088a8:	701a      	strb	r2, [r3, #0]
 80088aa:	e00a      	b.n	80088c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	0f1b      	lsrs	r3, r3, #28
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	4619      	mov	r1, r3
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	440b      	add	r3, r1
 80088bc:	3237      	adds	r2, #55	; 0x37
 80088be:	b2d2      	uxtb	r2, r2
 80088c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	011b      	lsls	r3, r3, #4
 80088c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088c8:	7dfb      	ldrb	r3, [r7, #23]
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	3301      	adds	r3, #1
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	4413      	add	r3, r2
 80088d2:	2200      	movs	r2, #0
 80088d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	3301      	adds	r3, #1
 80088da:	75fb      	strb	r3, [r7, #23]
 80088dc:	7dfa      	ldrb	r2, [r7, #23]
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d3d3      	bcc.n	800888c <IntToUnicode+0x18>
  }
}
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop
 80088e8:	371c      	adds	r7, #28
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
	...

080088f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b0ae      	sub	sp, #184	; 0xb8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008900:	2200      	movs	r2, #0
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	605a      	str	r2, [r3, #4]
 8008906:	609a      	str	r2, [r3, #8]
 8008908:	60da      	str	r2, [r3, #12]
 800890a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800890c:	f107 0310 	add.w	r3, r7, #16
 8008910:	2294      	movs	r2, #148	; 0x94
 8008912:	2100      	movs	r1, #0
 8008914:	4618      	mov	r0, r3
 8008916:	f000 fb55 	bl	8008fc4 <memset>
  if(pcdHandle->Instance==USB)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a2e      	ldr	r2, [pc, #184]	; (80089d8 <HAL_PCD_MspInit+0xe4>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d155      	bne.n	80089d0 <HAL_PCD_MspInit+0xdc>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008928:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800892a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800892e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 8008932:	2301      	movs	r3, #1
 8008934:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008936:	2301      	movs	r3, #1
 8008938:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800893a:	2318      	movs	r3, #24
 800893c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800893e:	2307      	movs	r3, #7
 8008940:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008942:	2302      	movs	r3, #2
 8008944:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008946:	2302      	movs	r3, #2
 8008948:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800894a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800894e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008950:	f107 0310 	add.w	r3, r7, #16
 8008954:	4618      	mov	r0, r3
 8008956:	f7fb f9a1 	bl	8003c9c <HAL_RCCEx_PeriphCLKConfig>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8008960:	f7f7 fe08 	bl	8000574 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008964:	4b1d      	ldr	r3, [pc, #116]	; (80089dc <HAL_PCD_MspInit+0xe8>)
 8008966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008968:	4a1c      	ldr	r2, [pc, #112]	; (80089dc <HAL_PCD_MspInit+0xe8>)
 800896a:	f043 0301 	orr.w	r3, r3, #1
 800896e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008970:	4b1a      	ldr	r3, [pc, #104]	; (80089dc <HAL_PCD_MspInit+0xe8>)
 8008972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	60fb      	str	r3, [r7, #12]
 800897a:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800897c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008980:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008984:	2302      	movs	r3, #2
 8008986:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800898a:	2300      	movs	r3, #0
 800898c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008990:	2300      	movs	r3, #0
 8008992:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8008996:	230a      	movs	r3, #10
 8008998:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800899c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80089a0:	4619      	mov	r1, r3
 80089a2:	480f      	ldr	r0, [pc, #60]	; (80089e0 <HAL_PCD_MspInit+0xec>)
 80089a4:	f7f8 f9e8 	bl	8000d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80089a8:	4b0c      	ldr	r3, [pc, #48]	; (80089dc <HAL_PCD_MspInit+0xe8>)
 80089aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089ac:	4a0b      	ldr	r2, [pc, #44]	; (80089dc <HAL_PCD_MspInit+0xe8>)
 80089ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089b2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80089b4:	4b09      	ldr	r3, [pc, #36]	; (80089dc <HAL_PCD_MspInit+0xe8>)
 80089b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089bc:	60bb      	str	r3, [r7, #8]
 80089be:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_FS_IRQn, 0, 0);
 80089c0:	2200      	movs	r2, #0
 80089c2:	2100      	movs	r1, #0
 80089c4:	2049      	movs	r0, #73	; 0x49
 80089c6:	f7f8 f9a2 	bl	8000d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_FS_IRQn);
 80089ca:	2049      	movs	r0, #73	; 0x49
 80089cc:	f7f8 f9b9 	bl	8000d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80089d0:	bf00      	nop
 80089d2:	37b8      	adds	r7, #184	; 0xb8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	4000d400 	.word	0x4000d400
 80089dc:	40021000 	.word	0x40021000
 80089e0:	42020000 	.word	0x42020000

080089e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80089f8:	4619      	mov	r1, r3
 80089fa:	4610      	mov	r0, r2
 80089fc:	f7fe fd1c 	bl	8007438 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	460b      	mov	r3, r1
 8008a12:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008a1a:	78fa      	ldrb	r2, [r7, #3]
 8008a1c:	6879      	ldr	r1, [r7, #4]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4413      	add	r3, r2
 8008a24:	00db      	lsls	r3, r3, #3
 8008a26:	440b      	add	r3, r1
 8008a28:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	78fb      	ldrb	r3, [r7, #3]
 8008a30:	4619      	mov	r1, r3
 8008a32:	f7fe fd56 	bl	80074e2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008a36:	bf00      	nop
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b082      	sub	sp, #8
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	460b      	mov	r3, r1
 8008a48:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008a50:	78fa      	ldrb	r2, [r7, #3]
 8008a52:	6879      	ldr	r1, [r7, #4]
 8008a54:	4613      	mov	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4413      	add	r3, r2
 8008a5a:	00db      	lsls	r3, r3, #3
 8008a5c:	440b      	add	r3, r1
 8008a5e:	333c      	adds	r3, #60	; 0x3c
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	78fb      	ldrb	r3, [r7, #3]
 8008a64:	4619      	mov	r1, r3
 8008a66:	f7fe fd9f 	bl	80075a8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008a6a:	bf00      	nop
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b082      	sub	sp, #8
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7fe feb3 	bl	80077ec <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008a86:	bf00      	nop
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b084      	sub	sp, #16
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a96:	2301      	movs	r3, #1
 8008a98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d001      	beq.n	8008aa6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008aa2:	f7f7 fd67 	bl	8000574 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008aac:	7bfa      	ldrb	r2, [r7, #15]
 8008aae:	4611      	mov	r1, r2
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fe fe5d 	bl	8007770 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fe fe09 	bl	80076d4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008ac2:	bf00      	nop
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
	...

08008acc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe fe58 	bl	8007790 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d005      	beq.n	8008af4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ae8:	4b04      	ldr	r3, [pc, #16]	; (8008afc <HAL_PCD_SuspendCallback+0x30>)
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	4a03      	ldr	r2, [pc, #12]	; (8008afc <HAL_PCD_SuspendCallback+0x30>)
 8008aee:	f043 0306 	orr.w	r3, r3, #6
 8008af2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8008af4:	bf00      	nop
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	e000ed00 	.word	0xe000ed00

08008b00 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d007      	beq.n	8008b20 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b10:	4b08      	ldr	r3, [pc, #32]	; (8008b34 <HAL_PCD_ResumeCallback+0x34>)
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	4a07      	ldr	r2, [pc, #28]	; (8008b34 <HAL_PCD_ResumeCallback+0x34>)
 8008b16:	f023 0306 	bic.w	r3, r3, #6
 8008b1a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008b1c:	f000 f9fc 	bl	8008f18 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fe fe48 	bl	80077bc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8008b2c:	bf00      	nop
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	e000ed00 	.word	0xe000ed00

08008b38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8008b40:	4a2c      	ldr	r2, [pc, #176]	; (8008bf4 <USBD_LL_Init+0xbc>)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a2a      	ldr	r2, [pc, #168]	; (8008bf4 <USBD_LL_Init+0xbc>)
 8008b4c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8008b50:	f7fa f8c6 	bl	8002ce0 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8008b54:	4b27      	ldr	r3, [pc, #156]	; (8008bf4 <USBD_LL_Init+0xbc>)
 8008b56:	4a28      	ldr	r2, [pc, #160]	; (8008bf8 <USBD_LL_Init+0xc0>)
 8008b58:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008b5a:	4b26      	ldr	r3, [pc, #152]	; (8008bf4 <USBD_LL_Init+0xbc>)
 8008b5c:	2208      	movs	r2, #8
 8008b5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008b60:	4b24      	ldr	r3, [pc, #144]	; (8008bf4 <USBD_LL_Init+0xbc>)
 8008b62:	2202      	movs	r2, #2
 8008b64:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b66:	4b23      	ldr	r3, [pc, #140]	; (8008bf4 <USBD_LL_Init+0xbc>)
 8008b68:	2202      	movs	r2, #2
 8008b6a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008b6c:	4b21      	ldr	r3, [pc, #132]	; (8008bf4 <USBD_LL_Init+0xbc>)
 8008b6e:	2200      	movs	r2, #0
 8008b70:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008b72:	4b20      	ldr	r3, [pc, #128]	; (8008bf4 <USBD_LL_Init+0xbc>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008b78:	4b1e      	ldr	r3, [pc, #120]	; (8008bf4 <USBD_LL_Init+0xbc>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008b7e:	4b1d      	ldr	r3, [pc, #116]	; (8008bf4 <USBD_LL_Init+0xbc>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008b84:	481b      	ldr	r0, [pc, #108]	; (8008bf4 <USBD_LL_Init+0xbc>)
 8008b86:	f7f8 fbad 	bl	80012e4 <HAL_PCD_Init>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008b90:	f7f7 fcf0 	bl	8000574 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008b9a:	2318      	movs	r3, #24
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	f7f9 ffc7 	bl	8002b32 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008baa:	2358      	movs	r3, #88	; 0x58
 8008bac:	2200      	movs	r2, #0
 8008bae:	2180      	movs	r1, #128	; 0x80
 8008bb0:	f7f9 ffbf 	bl	8002b32 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008bba:	23c0      	movs	r3, #192	; 0xc0
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2181      	movs	r1, #129	; 0x81
 8008bc0:	f7f9 ffb7 	bl	8002b32 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008bca:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008bce:	2200      	movs	r2, #0
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	f7f9 ffae 	bl	8002b32 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008be0:	2200      	movs	r2, #0
 8008be2:	2182      	movs	r1, #130	; 0x82
 8008be4:	f7f9 ffa5 	bl	8002b32 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20001a10 	.word	0x20001a10
 8008bf8:	4000d400 	.word	0x4000d400

08008bfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7f8 fc4b 	bl	80014ae <HAL_PCD_Start>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 f980 	bl	8008f24 <USBD_Get_USB_Status>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	4608      	mov	r0, r1
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	461a      	mov	r2, r3
 8008c40:	4603      	mov	r3, r0
 8008c42:	70fb      	strb	r3, [r7, #3]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70bb      	strb	r3, [r7, #2]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c5a:	78bb      	ldrb	r3, [r7, #2]
 8008c5c:	883a      	ldrh	r2, [r7, #0]
 8008c5e:	78f9      	ldrb	r1, [r7, #3]
 8008c60:	f7f8 fdba 	bl	80017d8 <HAL_PCD_EP_Open>
 8008c64:	4603      	mov	r3, r0
 8008c66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 f95a 	bl	8008f24 <USBD_Get_USB_Status>
 8008c70:	4603      	mov	r3, r0
 8008c72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	460b      	mov	r3, r1
 8008c88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c98:	78fa      	ldrb	r2, [r7, #3]
 8008c9a:	4611      	mov	r1, r2
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7f8 fe01 	bl	80018a4 <HAL_PCD_EP_Close>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 f93b 	bl	8008f24 <USBD_Get_USB_Status>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008cd6:	78fa      	ldrb	r2, [r7, #3]
 8008cd8:	4611      	mov	r1, r2
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7f8 fec2 	bl	8001a64 <HAL_PCD_EP_SetStall>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 f91c 	bl	8008f24 <USBD_Get_USB_Status>
 8008cec:	4603      	mov	r3, r0
 8008cee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b084      	sub	sp, #16
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	460b      	mov	r3, r1
 8008d04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d14:	78fa      	ldrb	r2, [r7, #3]
 8008d16:	4611      	mov	r1, r2
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7f8 fef5 	bl	8001b08 <HAL_PCD_EP_ClrStall>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 f8fd 	bl	8008f24 <USBD_Get_USB_Status>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	460b      	mov	r3, r1
 8008d42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	da0c      	bge.n	8008d6e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d54:	78fb      	ldrb	r3, [r7, #3]
 8008d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d5a:	68f9      	ldr	r1, [r7, #12]
 8008d5c:	1c5a      	adds	r2, r3, #1
 8008d5e:	4613      	mov	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	00db      	lsls	r3, r3, #3
 8008d66:	440b      	add	r3, r1
 8008d68:	3302      	adds	r3, #2
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	e00b      	b.n	8008d86 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d6e:	78fb      	ldrb	r3, [r7, #3]
 8008d70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d74:	68f9      	ldr	r1, [r7, #12]
 8008d76:	4613      	mov	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	00db      	lsls	r3, r3, #3
 8008d7e:	440b      	add	r3, r1
 8008d80:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008d84:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3714      	adds	r7, #20
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr

08008d92 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b084      	sub	sp, #16
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008dac:	78fa      	ldrb	r2, [r7, #3]
 8008dae:	4611      	mov	r1, r2
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7f8 fcec 	bl	800178e <HAL_PCD_SetAddress>
 8008db6:	4603      	mov	r3, r0
 8008db8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dba:	7bfb      	ldrb	r3, [r7, #15]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f000 f8b1 	bl	8008f24 <USBD_Get_USB_Status>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	607a      	str	r2, [r7, #4]
 8008dda:	603b      	str	r3, [r7, #0]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008dee:	7af9      	ldrb	r1, [r7, #11]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	f7f8 fdf3 	bl	80019de <HAL_PCD_EP_Transmit>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dfc:	7dfb      	ldrb	r3, [r7, #23]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 f890 	bl	8008f24 <USBD_Get_USB_Status>
 8008e04:	4603      	mov	r3, r0
 8008e06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e08:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b086      	sub	sp, #24
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	60f8      	str	r0, [r7, #12]
 8008e1a:	607a      	str	r2, [r7, #4]
 8008e1c:	603b      	str	r3, [r7, #0]
 8008e1e:	460b      	mov	r3, r1
 8008e20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008e30:	7af9      	ldrb	r1, [r7, #11]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	f7f8 fd7d 	bl	8001934 <HAL_PCD_EP_Receive>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e3e:	7dfb      	ldrb	r3, [r7, #23]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 f86f 	bl	8008f24 <USBD_Get_USB_Status>
 8008e46:	4603      	mov	r3, r0
 8008e48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e4a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3718      	adds	r7, #24
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e66:	78fa      	ldrb	r2, [r7, #3]
 8008e68:	4611      	mov	r1, r2
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7f8 fd9f 	bl	80019ae <HAL_PCD_EP_GetRxCount>
 8008e70:	4603      	mov	r3, r0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
	...

08008e7c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	460b      	mov	r3, r1
 8008e86:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8008e88:	78fb      	ldrb	r3, [r7, #3]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d002      	beq.n	8008e94 <HAL_PCDEx_LPM_Callback+0x18>
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d013      	beq.n	8008eba <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8008e92:	e023      	b.n	8008edc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d007      	beq.n	8008eac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008e9c:	f000 f83c 	bl	8008f18 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ea0:	4b10      	ldr	r3, [pc, #64]	; (8008ee4 <HAL_PCDEx_LPM_Callback+0x68>)
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	4a0f      	ldr	r2, [pc, #60]	; (8008ee4 <HAL_PCDEx_LPM_Callback+0x68>)
 8008ea6:	f023 0306 	bic.w	r3, r3, #6
 8008eaa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fe fc82 	bl	80077bc <USBD_LL_Resume>
    break;
 8008eb8:	e010      	b.n	8008edc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fe fc65 	bl	8007790 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	699b      	ldr	r3, [r3, #24]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d005      	beq.n	8008eda <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ece:	4b05      	ldr	r3, [pc, #20]	; (8008ee4 <HAL_PCDEx_LPM_Callback+0x68>)
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	4a04      	ldr	r2, [pc, #16]	; (8008ee4 <HAL_PCDEx_LPM_Callback+0x68>)
 8008ed4:	f043 0306 	orr.w	r3, r3, #6
 8008ed8:	6113      	str	r3, [r2, #16]
    break;
 8008eda:	bf00      	nop
}
 8008edc:	bf00      	nop
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	e000ed00 	.word	0xe000ed00

08008ee8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ef0:	4b03      	ldr	r3, [pc, #12]	; (8008f00 <USBD_static_malloc+0x18>)
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	370c      	adds	r7, #12
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	200001a4 	.word	0x200001a4

08008f04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]

}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008f1c:	f7f7 f99f 	bl	800025e <SystemClock_Config>
}
 8008f20:	bf00      	nop
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f32:	79fb      	ldrb	r3, [r7, #7]
 8008f34:	2b03      	cmp	r3, #3
 8008f36:	d817      	bhi.n	8008f68 <USBD_Get_USB_Status+0x44>
 8008f38:	a201      	add	r2, pc, #4	; (adr r2, 8008f40 <USBD_Get_USB_Status+0x1c>)
 8008f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3e:	bf00      	nop
 8008f40:	08008f51 	.word	0x08008f51
 8008f44:	08008f57 	.word	0x08008f57
 8008f48:	08008f5d 	.word	0x08008f5d
 8008f4c:	08008f63 	.word	0x08008f63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	73fb      	strb	r3, [r7, #15]
    break;
 8008f54:	e00b      	b.n	8008f6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f56:	2303      	movs	r3, #3
 8008f58:	73fb      	strb	r3, [r7, #15]
    break;
 8008f5a:	e008      	b.n	8008f6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f60:	e005      	b.n	8008f6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f62:	2303      	movs	r3, #3
 8008f64:	73fb      	strb	r3, [r7, #15]
    break;
 8008f66:	e002      	b.n	8008f6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f6c:	bf00      	nop
  }
  return usb_status;
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <__libc_init_array>:
 8008f7c:	b570      	push	{r4, r5, r6, lr}
 8008f7e:	4d0d      	ldr	r5, [pc, #52]	; (8008fb4 <__libc_init_array+0x38>)
 8008f80:	2600      	movs	r6, #0
 8008f82:	4c0d      	ldr	r4, [pc, #52]	; (8008fb8 <__libc_init_array+0x3c>)
 8008f84:	1b64      	subs	r4, r4, r5
 8008f86:	10a4      	asrs	r4, r4, #2
 8008f88:	42a6      	cmp	r6, r4
 8008f8a:	d109      	bne.n	8008fa0 <__libc_init_array+0x24>
 8008f8c:	4d0b      	ldr	r5, [pc, #44]	; (8008fbc <__libc_init_array+0x40>)
 8008f8e:	2600      	movs	r6, #0
 8008f90:	4c0b      	ldr	r4, [pc, #44]	; (8008fc0 <__libc_init_array+0x44>)
 8008f92:	f000 f81f 	bl	8008fd4 <_init>
 8008f96:	1b64      	subs	r4, r4, r5
 8008f98:	10a4      	asrs	r4, r4, #2
 8008f9a:	42a6      	cmp	r6, r4
 8008f9c:	d105      	bne.n	8008faa <__libc_init_array+0x2e>
 8008f9e:	bd70      	pop	{r4, r5, r6, pc}
 8008fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fa4:	3601      	adds	r6, #1
 8008fa6:	4798      	blx	r3
 8008fa8:	e7ee      	b.n	8008f88 <__libc_init_array+0xc>
 8008faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fae:	3601      	adds	r6, #1
 8008fb0:	4798      	blx	r3
 8008fb2:	e7f2      	b.n	8008f9a <__libc_init_array+0x1e>
 8008fb4:	08009084 	.word	0x08009084
 8008fb8:	08009084 	.word	0x08009084
 8008fbc:	08009084 	.word	0x08009084
 8008fc0:	08009088 	.word	0x08009088

08008fc4 <memset>:
 8008fc4:	4402      	add	r2, r0
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d100      	bne.n	8008fce <memset+0xa>
 8008fcc:	4770      	bx	lr
 8008fce:	f803 1b01 	strb.w	r1, [r3], #1
 8008fd2:	e7f9      	b.n	8008fc8 <memset+0x4>

08008fd4 <_init>:
 8008fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd6:	bf00      	nop
 8008fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fda:	bc08      	pop	{r3}
 8008fdc:	469e      	mov	lr, r3
 8008fde:	4770      	bx	lr

08008fe0 <_fini>:
 8008fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe2:	bf00      	nop
 8008fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fe6:	bc08      	pop	{r3}
 8008fe8:	469e      	mov	lr, r3
 8008fea:	4770      	bx	lr
