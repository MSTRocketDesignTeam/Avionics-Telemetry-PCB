
zet6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c24  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003e18  08003e18  00013e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e70  08003e70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e70  08003e70  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e70  08003e70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e70  08003e70  00013e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e74  08003e74  00013e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  2000000c  08003e84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08003e84  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e077  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b2  00000000  00000000  0002e0b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00030270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  00030ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029074  00000000  00000000  00031a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da81  00000000  00000000  0005aa8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102f64  00000000  00000000  0006850d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b471  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c4  00000000  00000000  0016b4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08003e00 	.word	0x08003e00

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08003e00 	.word	0x08003e00

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b088      	sub	sp, #32
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char spi_buf[20] = {0};
 800023a:	2300      	movs	r3, #0
 800023c:	60fb      	str	r3, [r7, #12]
 800023e:	f107 0310 	add.w	r3, r7, #16
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024c:	f000 fc71 	bl	8000b32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000250:	f000 f8ba 	bl	80003c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000254:	f000 f9c0 	bl	80005d8 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000258:	f000 f906 	bl	8000468 <MX_ICACHE_Init>
  MX_USB_PCD_Init();
 800025c:	f000 f994 	bl	8000588 <MX_USB_PCD_Init>
  MX_SPI2_Init();
 8000260:	f000 f916 	bl	8000490 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000264:	f000 f952 	bl	800050c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_7, GPIO_PIN_SET);
 8000268:	2201      	movs	r2, #1
 800026a:	2180      	movs	r1, #128	; 0x80
 800026c:	4852      	ldr	r0, [pc, #328]	; (80003b8 <main+0x184>)
 800026e:	f000 ff8b 	bl	8001188 <HAL_GPIO_WritePin>

  //Powerup transceiver chip
  uint8_t command[8] = {0x02,0x01,0x00,0x01,0xC9,0xC3,0x80};
 8000272:	4a52      	ldr	r2, [pc, #328]	; (80003bc <main+0x188>)
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	e892 0003 	ldmia.w	r2, {r0, r1}
 800027a:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0, GPIO_PIN_RESET);
 800027e:	2200      	movs	r2, #0
 8000280:	2101      	movs	r1, #1
 8000282:	484f      	ldr	r0, [pc, #316]	; (80003c0 <main+0x18c>)
 8000284:	f000 ff80 	bl	8001188 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2,(uint8_t*)&command,7,100);
 8000288:	1d39      	adds	r1, r7, #4
 800028a:	2364      	movs	r3, #100	; 0x64
 800028c:	2207      	movs	r2, #7
 800028e:	484d      	ldr	r0, [pc, #308]	; (80003c4 <main+0x190>)
 8000290:	f002 fee1 	bl	8003056 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0, GPIO_PIN_SET);
 8000294:	2201      	movs	r2, #1
 8000296:	2101      	movs	r1, #1
 8000298:	4849      	ldr	r0, [pc, #292]	; (80003c0 <main+0x18c>)
 800029a:	f000 ff75 	bl	8001188 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2101      	movs	r1, #1
 80002a2:	4847      	ldr	r0, [pc, #284]	; (80003c0 <main+0x18c>)
 80002a4:	f000 ff70 	bl	8001188 <HAL_GPIO_WritePin>
  HAL_SPI_Receive(&hspi2, (uint8_t*)spi_buf,1,100);
 80002a8:	f107 010c 	add.w	r1, r7, #12
 80002ac:	2364      	movs	r3, #100	; 0x64
 80002ae:	2201      	movs	r2, #1
 80002b0:	4844      	ldr	r0, [pc, #272]	; (80003c4 <main+0x190>)
 80002b2:	f003 f83e 	bl	8003332 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0, GPIO_PIN_SET);
 80002b6:	2201      	movs	r2, #1
 80002b8:	2101      	movs	r1, #1
 80002ba:	4841      	ldr	r0, [pc, #260]	; (80003c0 <main+0x18c>)
 80002bc:	f000 ff64 	bl	8001188 <HAL_GPIO_WritePin>

  //Check transceiver is on
  command[0] = 0x01;
 80002c0:	2301      	movs	r3, #1
 80002c2:	713b      	strb	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0, GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2101      	movs	r1, #1
 80002c8:	483d      	ldr	r0, [pc, #244]	; (80003c0 <main+0x18c>)
 80002ca:	f000 ff5d 	bl	8001188 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2,(uint8_t*)&command,1,100);
 80002ce:	1d39      	adds	r1, r7, #4
 80002d0:	2364      	movs	r3, #100	; 0x64
 80002d2:	2201      	movs	r2, #1
 80002d4:	483b      	ldr	r0, [pc, #236]	; (80003c4 <main+0x190>)
 80002d6:	f002 febe 	bl	8003056 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0, GPIO_PIN_SET);
 80002da:	2201      	movs	r2, #1
 80002dc:	2101      	movs	r1, #1
 80002de:	4838      	ldr	r0, [pc, #224]	; (80003c0 <main+0x18c>)
 80002e0:	f000 ff52 	bl	8001188 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0, GPIO_PIN_RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2101      	movs	r1, #1
 80002e8:	4835      	ldr	r0, [pc, #212]	; (80003c0 <main+0x18c>)
 80002ea:	f000 ff4d 	bl	8001188 <HAL_GPIO_WritePin>
  HAL_SPI_Receive(&hspi2, (uint8_t*)spi_buf,9,100);
 80002ee:	f107 010c 	add.w	r1, r7, #12
 80002f2:	2364      	movs	r3, #100	; 0x64
 80002f4:	2209      	movs	r2, #9
 80002f6:	4833      	ldr	r0, [pc, #204]	; (80003c4 <main+0x190>)
 80002f8:	f003 f81b 	bl	8003332 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0, GPIO_PIN_SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2101      	movs	r1, #1
 8000300:	482f      	ldr	r0, [pc, #188]	; (80003c0 <main+0x18c>)
 8000302:	f000 ff41 	bl	8001188 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_7, GPIO_PIN_SET);
 8000306:	2201      	movs	r2, #1
 8000308:	2180      	movs	r1, #128	; 0x80
 800030a:	482b      	ldr	r0, [pc, #172]	; (80003b8 <main+0x184>)
 800030c:	f000 ff3c 	bl	8001188 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000310:	2064      	movs	r0, #100	; 0x64
 8000312:	f000 fc85 	bl	8000c20 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8, GPIO_PIN_SET);
 8000316:	2201      	movs	r2, #1
 8000318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800031c:	4826      	ldr	r0, [pc, #152]	; (80003b8 <main+0x184>)
 800031e:	f000 ff33 	bl	8001188 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000322:	2064      	movs	r0, #100	; 0x64
 8000324:	f000 fc7c 	bl	8000c20 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9, GPIO_PIN_SET);
 8000328:	2201      	movs	r2, #1
 800032a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800032e:	4822      	ldr	r0, [pc, #136]	; (80003b8 <main+0x184>)
 8000330:	f000 ff2a 	bl	8001188 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000334:	2064      	movs	r0, #100	; 0x64
 8000336:	f000 fc73 	bl	8000c20 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10, GPIO_PIN_SET);
 800033a:	2201      	movs	r2, #1
 800033c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000340:	481d      	ldr	r0, [pc, #116]	; (80003b8 <main+0x184>)
 8000342:	f000 ff21 	bl	8001188 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000346:	2064      	movs	r0, #100	; 0x64
 8000348:	f000 fc6a 	bl	8000c20 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11, GPIO_PIN_SET);
 800034c:	2201      	movs	r2, #1
 800034e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000352:	4819      	ldr	r0, [pc, #100]	; (80003b8 <main+0x184>)
 8000354:	f000 ff18 	bl	8001188 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000358:	2064      	movs	r0, #100	; 0x64
 800035a:	f000 fc61 	bl	8000c20 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_7, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	2180      	movs	r1, #128	; 0x80
 8000362:	4815      	ldr	r0, [pc, #84]	; (80003b8 <main+0x184>)
 8000364:	f000 ff10 	bl	8001188 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000368:	2064      	movs	r0, #100	; 0x64
 800036a:	f000 fc59 	bl	8000c20 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000374:	4810      	ldr	r0, [pc, #64]	; (80003b8 <main+0x184>)
 8000376:	f000 ff07 	bl	8001188 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800037a:	2064      	movs	r0, #100	; 0x64
 800037c:	f000 fc50 	bl	8000c20 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000386:	480c      	ldr	r0, [pc, #48]	; (80003b8 <main+0x184>)
 8000388:	f000 fefe 	bl	8001188 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800038c:	2064      	movs	r0, #100	; 0x64
 800038e:	f000 fc47 	bl	8000c20 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10, GPIO_PIN_RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000398:	4807      	ldr	r0, [pc, #28]	; (80003b8 <main+0x184>)
 800039a:	f000 fef5 	bl	8001188 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800039e:	2064      	movs	r0, #100	; 0x64
 80003a0:	f000 fc3e 	bl	8000c20 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003aa:	4803      	ldr	r0, [pc, #12]	; (80003b8 <main+0x184>)
 80003ac:	f000 feec 	bl	8001188 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80003b0:	2064      	movs	r0, #100	; 0x64
 80003b2:	f000 fc35 	bl	8000c20 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_7, GPIO_PIN_SET);
 80003b6:	e7a6      	b.n	8000306 <main+0xd2>
 80003b8:	42021000 	.word	0x42021000
 80003bc:	08003e18 	.word	0x08003e18
 80003c0:	42020c00 	.word	0x42020c00
 80003c4:	20000028 	.word	0x20000028

080003c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b098      	sub	sp, #96	; 0x60
 80003cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ce:	f107 0318 	add.w	r3, r7, #24
 80003d2:	2248      	movs	r2, #72	; 0x48
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f003 fd0a 	bl	8003df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
 80003e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80003ea:	2000      	movs	r0, #0
 80003ec:	f001 f868 	bl	80014c0 <HAL_PWREx_ControlVoltageScaling>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0x32>
  {
    Error_Handler();
 80003f6:	f000 f97b 	bl	80006f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80003fa:	2321      	movs	r3, #33	; 0x21
 80003fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000402:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000404:	2301      	movs	r3, #1
 8000406:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000408:	2302      	movs	r3, #2
 800040a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800040c:	2303      	movs	r3, #3
 800040e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000410:	2308      	movs	r3, #8
 8000412:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000414:	2337      	movs	r3, #55	; 0x37
 8000416:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000418:	2307      	movs	r3, #7
 800041a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800041c:	2302      	movs	r3, #2
 800041e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000420:	2302      	movs	r3, #2
 8000422:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000424:	f107 0318 	add.w	r3, r7, #24
 8000428:	4618      	mov	r0, r3
 800042a:	f001 f8c9 	bl	80015c0 <HAL_RCC_OscConfig>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000434:	f000 f95c 	bl	80006f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000438:	230f      	movs	r3, #15
 800043a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043c:	2303      	movs	r3, #3
 800043e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000440:	2300      	movs	r3, #0
 8000442:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2105      	movs	r1, #5
 8000450:	4618      	mov	r0, r3
 8000452:	f001 fd8b 	bl	8001f6c <HAL_RCC_ClockConfig>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800045c:	f000 f948 	bl	80006f0 <Error_Handler>
  }
}
 8000460:	bf00      	nop
 8000462:	3760      	adds	r7, #96	; 0x60
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800046c:	2000      	movs	r0, #0
 800046e:	f000 fea3 	bl	80011b8 <HAL_ICACHE_ConfigAssociativityMode>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000478:	f000 f93a 	bl	80006f0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800047c:	f000 febc 	bl	80011f8 <HAL_ICACHE_Enable>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000486:	f000 f933 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
	...

08000490 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <MX_SPI2_Init+0x74>)
 8000496:	4a1c      	ldr	r2, [pc, #112]	; (8000508 <MX_SPI2_Init+0x78>)
 8000498:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800049a:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <MX_SPI2_Init+0x74>)
 800049c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80004a2:	4b18      	ldr	r3, [pc, #96]	; (8000504 <MX_SPI2_Init+0x74>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80004a8:	4b16      	ldr	r3, [pc, #88]	; (8000504 <MX_SPI2_Init+0x74>)
 80004aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80004ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <MX_SPI2_Init+0x74>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <MX_SPI2_Init+0x74>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80004bc:	4b11      	ldr	r3, [pc, #68]	; (8000504 <MX_SPI2_Init+0x74>)
 80004be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <MX_SPI2_Init+0x74>)
 80004c6:	2230      	movs	r2, #48	; 0x30
 80004c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <MX_SPI2_Init+0x74>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <MX_SPI2_Init+0x74>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <MX_SPI2_Init+0x74>)
 80004d8:	2200      	movs	r2, #0
 80004da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <MX_SPI2_Init+0x74>)
 80004de:	2207      	movs	r2, #7
 80004e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <MX_SPI2_Init+0x74>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_SPI2_Init+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_SPI2_Init+0x74>)
 80004f0:	f002 fd0e 	bl	8002f10 <HAL_SPI_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80004fa:	f000 f8f9 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000028 	.word	0x20000028
 8000508:	40003800 	.word	0x40003800

0800050c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000510:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_SPI3_Init+0x74>)
 8000512:	4a1c      	ldr	r2, [pc, #112]	; (8000584 <MX_SPI3_Init+0x78>)
 8000514:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000516:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <MX_SPI3_Init+0x74>)
 8000518:	f44f 7282 	mov.w	r2, #260	; 0x104
 800051c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_SPI3_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <MX_SPI3_Init+0x74>)
 8000526:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800052a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <MX_SPI3_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <MX_SPI3_Init+0x74>)
 8000534:	2200      	movs	r2, #0
 8000536:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <MX_SPI3_Init+0x74>)
 800053a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800053e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <MX_SPI3_Init+0x74>)
 8000542:	2228      	movs	r2, #40	; 0x28
 8000544:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <MX_SPI3_Init+0x74>)
 8000548:	2200      	movs	r2, #0
 800054a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <MX_SPI3_Init+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <MX_SPI3_Init+0x74>)
 8000554:	2200      	movs	r2, #0
 8000556:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000558:	4b09      	ldr	r3, [pc, #36]	; (8000580 <MX_SPI3_Init+0x74>)
 800055a:	2207      	movs	r2, #7
 800055c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <MX_SPI3_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MX_SPI3_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800056a:	4805      	ldr	r0, [pc, #20]	; (8000580 <MX_SPI3_Init+0x74>)
 800056c:	f002 fcd0 	bl	8002f10 <HAL_SPI_Init>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000576:	f000 f8bb 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	2000008c 	.word	0x2000008c
 8000584:	40003c00 	.word	0x40003c00

08000588 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_USB_PCD_Init+0x48>)
 800058e:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <MX_USB_PCD_Init+0x4c>)
 8000590:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MX_USB_PCD_Init+0x48>)
 8000594:	2208      	movs	r2, #8
 8000596:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <MX_USB_PCD_Init+0x48>)
 800059a:	2202      	movs	r2, #2
 800059c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_USB_PCD_Init+0x48>)
 80005a0:	2202      	movs	r2, #2
 80005a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <MX_USB_PCD_Init+0x48>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_USB_PCD_Init+0x48>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <MX_USB_PCD_Init+0x48>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_USB_PCD_Init+0x48>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <MX_USB_PCD_Init+0x48>)
 80005be:	f000 fe6d 	bl	800129c <HAL_PCD_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80005c8:	f000 f892 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200000f0 	.word	0x200000f0
 80005d4:	4000d400 	.word	0x4000d400

080005d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08c      	sub	sp, #48	; 0x30
 80005dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ee:	4b3d      	ldr	r3, [pc, #244]	; (80006e4 <MX_GPIO_Init+0x10c>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	4a3c      	ldr	r2, [pc, #240]	; (80006e4 <MX_GPIO_Init+0x10c>)
 80005f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fa:	4b3a      	ldr	r3, [pc, #232]	; (80006e4 <MX_GPIO_Init+0x10c>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000602:	61bb      	str	r3, [r7, #24]
 8000604:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000606:	4b37      	ldr	r3, [pc, #220]	; (80006e4 <MX_GPIO_Init+0x10c>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	4a36      	ldr	r2, [pc, #216]	; (80006e4 <MX_GPIO_Init+0x10c>)
 800060c:	f043 0310 	orr.w	r3, r3, #16
 8000610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000612:	4b34      	ldr	r3, [pc, #208]	; (80006e4 <MX_GPIO_Init+0x10c>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	f003 0310 	and.w	r3, r3, #16
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b31      	ldr	r3, [pc, #196]	; (80006e4 <MX_GPIO_Init+0x10c>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <MX_GPIO_Init+0x10c>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062a:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <MX_GPIO_Init+0x10c>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000636:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <MX_GPIO_Init+0x10c>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	4a2a      	ldr	r2, [pc, #168]	; (80006e4 <MX_GPIO_Init+0x10c>)
 800063c:	f043 0308 	orr.w	r3, r3, #8
 8000640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <MX_GPIO_Init+0x10c>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	f003 0308 	and.w	r3, r3, #8
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <MX_GPIO_Init+0x10c>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	4a24      	ldr	r2, [pc, #144]	; (80006e4 <MX_GPIO_Init+0x10c>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <MX_GPIO_Init+0x10c>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_GPIO_Init+0x10c>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	4a1e      	ldr	r2, [pc, #120]	; (80006e4 <MX_GPIO_Init+0x10c>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_GPIO_Init+0x10c>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8000684:	4818      	ldr	r0, [pc, #96]	; (80006e8 <MX_GPIO_Init+0x110>)
 8000686:	f000 fd7f 	bl	8001188 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000690:	4816      	ldr	r0, [pc, #88]	; (80006ec <MX_GPIO_Init+0x114>)
 8000692:	f000 fd79 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2101      	movs	r1, #1
 800069a:	4814      	ldr	r0, [pc, #80]	; (80006ec <MX_GPIO_Init+0x114>)
 800069c:	f000 fd74 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80006a0:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 80006a4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	480b      	ldr	r0, [pc, #44]	; (80006e8 <MX_GPIO_Init+0x110>)
 80006ba:	f000 fbe5 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_0;
 80006be:	f240 1301 	movw	r3, #257	; 0x101
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	4619      	mov	r1, r3
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_GPIO_Init+0x114>)
 80006d8:	f000 fbd6 	bl	8000e88 <HAL_GPIO_Init>

}
 80006dc:	bf00      	nop
 80006de:	3730      	adds	r7, #48	; 0x30
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000
 80006e8:	42021000 	.word	0x42021000
 80006ec:	42020c00 	.word	0x42020c00

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <Error_Handler+0x8>
	...

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_MspInit+0x50>)
 8000704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000706:	4a11      	ldr	r2, [pc, #68]	; (800074c <HAL_MspInit+0x50>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6613      	str	r3, [r2, #96]	; 0x60
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <HAL_MspInit+0x50>)
 8000710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <HAL_MspInit+0x50>)
 800071c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071e:	4a0b      	ldr	r2, [pc, #44]	; (800074c <HAL_MspInit+0x50>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000724:	6593      	str	r3, [r2, #88]	; 0x58
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_MspInit+0x50>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* ICACHE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ICACHE_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	206b      	movs	r0, #107	; 0x6b
 8000738:	f000 fb71 	bl	8000e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ICACHE_IRQn);
 800073c:	206b      	movs	r0, #107	; 0x6b
 800073e:	f000 fb88 	bl	8000e52 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000

08000750 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	; 0x30
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a2f      	ldr	r2, [pc, #188]	; (800082c <HAL_SPI_MspInit+0xdc>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d129      	bne.n	80007c6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000772:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <HAL_SPI_MspInit+0xe0>)
 8000774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000776:	4a2e      	ldr	r2, [pc, #184]	; (8000830 <HAL_SPI_MspInit+0xe0>)
 8000778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077c:	6593      	str	r3, [r2, #88]	; 0x58
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <HAL_SPI_MspInit+0xe0>)
 8000780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	4b29      	ldr	r3, [pc, #164]	; (8000830 <HAL_SPI_MspInit+0xe0>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a28      	ldr	r2, [pc, #160]	; (8000830 <HAL_SPI_MspInit+0xe0>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <HAL_SPI_MspInit+0xe0>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007a2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80007a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007b4:	2305      	movs	r3, #5
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	481d      	ldr	r0, [pc, #116]	; (8000834 <HAL_SPI_MspInit+0xe4>)
 80007c0:	f000 fb62 	bl	8000e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80007c4:	e02d      	b.n	8000822 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a1b      	ldr	r2, [pc, #108]	; (8000838 <HAL_SPI_MspInit+0xe8>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d128      	bne.n	8000822 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <HAL_SPI_MspInit+0xe0>)
 80007d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d4:	4a16      	ldr	r2, [pc, #88]	; (8000830 <HAL_SPI_MspInit+0xe0>)
 80007d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007da:	6593      	str	r3, [r2, #88]	; 0x58
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <HAL_SPI_MspInit+0xe0>)
 80007de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <HAL_SPI_MspInit+0xe0>)
 80007ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ec:	4a10      	ldr	r2, [pc, #64]	; (8000830 <HAL_SPI_MspInit+0xe0>)
 80007ee:	f043 0304 	orr.w	r3, r3, #4
 80007f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <HAL_SPI_MspInit+0xe0>)
 80007f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f8:	f003 0304 	and.w	r3, r3, #4
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000800:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000812:	2306      	movs	r3, #6
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <HAL_SPI_MspInit+0xec>)
 800081e:	f000 fb33 	bl	8000e88 <HAL_GPIO_Init>
}
 8000822:	bf00      	nop
 8000824:	3730      	adds	r7, #48	; 0x30
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40003800 	.word	0x40003800
 8000830:	40021000 	.word	0x40021000
 8000834:	42020400 	.word	0x42020400
 8000838:	40003c00 	.word	0x40003c00
 800083c:	42020800 	.word	0x42020800

08000840 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b0ae      	sub	sp, #184	; 0xb8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	2294      	movs	r2, #148	; 0x94
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f003 fac5 	bl	8003df0 <memset>
  if(hpcd->Instance==USB)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <HAL_PCD_MspInit+0xb4>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d13d      	bne.n	80008ec <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000874:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000876:	2300      	movs	r3, #0
 8000878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4618      	mov	r0, r3
 8000882:	f001 fe2f 	bl	80024e4 <HAL_RCCEx_PeriphCLKConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800088c:	f7ff ff30 	bl	80006f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <HAL_PCD_MspInit+0xb8>)
 8000892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000894:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <HAL_PCD_MspInit+0xb8>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <HAL_PCD_MspInit+0xb8>)
 800089e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80008c2:	230a      	movs	r3, #10
 80008c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008cc:	4619      	mov	r1, r3
 80008ce:	480b      	ldr	r0, [pc, #44]	; (80008fc <HAL_PCD_MspInit+0xbc>)
 80008d0:	f000 fada 	bl	8000e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_PCD_MspInit+0xb8>)
 80008d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008d8:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <HAL_PCD_MspInit+0xb8>)
 80008da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008de:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_PCD_MspInit+0xb8>)
 80008e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80008ec:	bf00      	nop
 80008ee:	37b8      	adds	r7, #184	; 0xb8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	4000d400 	.word	0x4000d400
 80008f8:	40021000 	.word	0x40021000
 80008fc:	42020000 	.word	0x42020000

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 f948 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <ICACHE_IRQHandler>:

/**
  * @brief This function handles Instruction cache global interrupt.
  */
void ICACHE_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_IRQn 0 */

  /* USER CODE END ICACHE_IRQn 0 */
  HAL_ICACHE_IRQHandler();
 8000958:	f000 fc5e 	bl	8001218 <HAL_ICACHE_IRQHandler>
  /* USER CODE BEGIN ICACHE_IRQn 1 */

  /* USER CODE END ICACHE_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <SystemInit+0x20>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <SystemInit+0x20>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b087      	sub	sp, #28
 8000988:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800098a:	4b4f      	ldr	r3, [pc, #316]	; (8000ac8 <SystemCoreClockUpdate+0x144>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	2b00      	cmp	r3, #0
 8000994:	d107      	bne.n	80009a6 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000996:	4b4c      	ldr	r3, [pc, #304]	; (8000ac8 <SystemCoreClockUpdate+0x144>)
 8000998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	e005      	b.n	80009b2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80009a6:	4b48      	ldr	r3, [pc, #288]	; (8000ac8 <SystemCoreClockUpdate+0x144>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	091b      	lsrs	r3, r3, #4
 80009ac:	f003 030f 	and.w	r3, r3, #15
 80009b0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80009b2:	4a46      	ldr	r2, [pc, #280]	; (8000acc <SystemCoreClockUpdate+0x148>)
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80009bc:	4b42      	ldr	r3, [pc, #264]	; (8000ac8 <SystemCoreClockUpdate+0x144>)
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	f003 030c 	and.w	r3, r3, #12
 80009c4:	2b0c      	cmp	r3, #12
 80009c6:	d866      	bhi.n	8000a96 <SystemCoreClockUpdate+0x112>
 80009c8:	a201      	add	r2, pc, #4	; (adr r2, 80009d0 <SystemCoreClockUpdate+0x4c>)
 80009ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ce:	bf00      	nop
 80009d0:	08000a05 	.word	0x08000a05
 80009d4:	08000a97 	.word	0x08000a97
 80009d8:	08000a97 	.word	0x08000a97
 80009dc:	08000a97 	.word	0x08000a97
 80009e0:	08000a0d 	.word	0x08000a0d
 80009e4:	08000a97 	.word	0x08000a97
 80009e8:	08000a97 	.word	0x08000a97
 80009ec:	08000a97 	.word	0x08000a97
 80009f0:	08000a15 	.word	0x08000a15
 80009f4:	08000a97 	.word	0x08000a97
 80009f8:	08000a97 	.word	0x08000a97
 80009fc:	08000a97 	.word	0x08000a97
 8000a00:	08000a1d 	.word	0x08000a1d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000a04:	4a32      	ldr	r2, [pc, #200]	; (8000ad0 <SystemCoreClockUpdate+0x14c>)
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	6013      	str	r3, [r2, #0]
      break;
 8000a0a:	e048      	b.n	8000a9e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000a0c:	4b30      	ldr	r3, [pc, #192]	; (8000ad0 <SystemCoreClockUpdate+0x14c>)
 8000a0e:	4a31      	ldr	r2, [pc, #196]	; (8000ad4 <SystemCoreClockUpdate+0x150>)
 8000a10:	601a      	str	r2, [r3, #0]
      break;
 8000a12:	e044      	b.n	8000a9e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000a14:	4b2e      	ldr	r3, [pc, #184]	; (8000ad0 <SystemCoreClockUpdate+0x14c>)
 8000a16:	4a30      	ldr	r2, [pc, #192]	; (8000ad8 <SystemCoreClockUpdate+0x154>)
 8000a18:	601a      	str	r2, [r3, #0]
      break;
 8000a1a:	e040      	b.n	8000a9e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000a1c:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <SystemCoreClockUpdate+0x144>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	f003 0303 	and.w	r3, r3, #3
 8000a24:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000a26:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <SystemCoreClockUpdate+0x144>)
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	091b      	lsrs	r3, r3, #4
 8000a2c:	f003 030f 	and.w	r3, r3, #15
 8000a30:	3301      	adds	r3, #1
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d003      	beq.n	8000a42 <SystemCoreClockUpdate+0xbe>
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2b03      	cmp	r3, #3
 8000a3e:	d006      	beq.n	8000a4e <SystemCoreClockUpdate+0xca>
 8000a40:	e00b      	b.n	8000a5a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000a42:	4a24      	ldr	r2, [pc, #144]	; (8000ad4 <SystemCoreClockUpdate+0x150>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4a:	613b      	str	r3, [r7, #16]
          break;
 8000a4c:	e00b      	b.n	8000a66 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000a4e:	4a22      	ldr	r2, [pc, #136]	; (8000ad8 <SystemCoreClockUpdate+0x154>)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a56:	613b      	str	r3, [r7, #16]
          break;
 8000a58:	e005      	b.n	8000a66 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000a5a:	697a      	ldr	r2, [r7, #20]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	613b      	str	r3, [r7, #16]
          break;
 8000a64:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <SystemCoreClockUpdate+0x144>)
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	0a1b      	lsrs	r3, r3, #8
 8000a6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	fb02 f303 	mul.w	r3, r2, r3
 8000a76:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <SystemCoreClockUpdate+0x144>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	0e5b      	lsrs	r3, r3, #25
 8000a7e:	f003 0303 	and.w	r3, r3, #3
 8000a82:	3301      	adds	r3, #1
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a90:	4a0f      	ldr	r2, [pc, #60]	; (8000ad0 <SystemCoreClockUpdate+0x14c>)
 8000a92:	6013      	str	r3, [r2, #0]
      break;
 8000a94:	e003      	b.n	8000a9e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <SystemCoreClockUpdate+0x14c>)
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	6013      	str	r3, [r2, #0]
      break;
 8000a9c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <SystemCoreClockUpdate+0x144>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	091b      	lsrs	r3, r3, #4
 8000aa4:	f003 030f 	and.w	r3, r3, #15
 8000aa8:	4a0c      	ldr	r2, [pc, #48]	; (8000adc <SystemCoreClockUpdate+0x158>)
 8000aaa:	5cd3      	ldrb	r3, [r2, r3]
 8000aac:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <SystemCoreClockUpdate+0x14c>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab8:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <SystemCoreClockUpdate+0x14c>)
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	371c      	adds	r7, #28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	08003e30 	.word	0x08003e30
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	00f42400 	.word	0x00f42400
 8000ad8:	01e84800 	.word	0x01e84800
 8000adc:	08003e20 	.word	0x08003e20

08000ae0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ae4:	f7ff ff3c 	bl	8000960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ae8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000aea:	e003      	b.n	8000af4 <LoopCopyDataInit>

08000aec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000aee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000af0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000af2:	3104      	adds	r1, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000af4:	480a      	ldr	r0, [pc, #40]	; (8000b20 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000af8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000afa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000afc:	d3f6      	bcc.n	8000aec <CopyDataInit>
	ldr	r2, =_sbss
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b00:	e002      	b.n	8000b08 <LoopFillZerobss>

08000b02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b04:	f842 3b04 	str.w	r3, [r2], #4

08000b08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <LoopForever+0x16>)
	cmp	r2, r3
 8000b0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b0c:	d3f9      	bcc.n	8000b02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b0e:	f003 f94b 	bl	8003da8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b12:	f7ff fb8f 	bl	8000234 <main>

08000b16 <LoopForever>:

LoopForever:
    b LoopForever
 8000b16:	e7fe      	b.n	8000b16 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000b18:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000b1c:	08003e78 	.word	0x08003e78
	ldr	r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b24:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000b28:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000b2c:	200003e8 	.word	0x200003e8

08000b30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC1_2_IRQHandler>

08000b32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000b3c:	2004      	movs	r0, #4
 8000b3e:	f000 f963 	bl	8000e08 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000b42:	f7ff ff1f 	bl	8000984 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b46:	2007      	movs	r0, #7
 8000b48:	f000 f80e 	bl	8000b68 <HAL_InitTick>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d002      	beq.n	8000b58 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	71fb      	strb	r3, [r7, #7]
 8000b56:	e001      	b.n	8000b5c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b58:	f7ff fdd0 	bl	80006fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <HAL_InitTick+0x6c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d023      	beq.n	8000bc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <HAL_InitTick+0x70>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <HAL_InitTick+0x6c>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f96b 	bl	8000e6e <HAL_SYSTICK_Config>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10f      	bne.n	8000bbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b07      	cmp	r3, #7
 8000ba2:	d809      	bhi.n	8000bb8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f000 f937 	bl	8000e1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <HAL_InitTick+0x74>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	e007      	b.n	8000bc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	e004      	b.n	8000bc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e001      	b.n	8000bc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x20>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x24>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_IncTick+0x24>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008
 8000c04:	200003e4 	.word	0x200003e4

08000c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_GetTick+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	200003e4 	.word	0x200003e4

08000c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c28:	f7ff ffee 	bl	8000c08 <HAL_GetTick>
 8000c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c38:	d005      	beq.n	8000c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_Delay+0x44>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4413      	add	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c46:	bf00      	nop
 8000c48:	f7ff ffde 	bl	8000c08 <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d8f7      	bhi.n	8000c48 <HAL_Delay+0x28>
  {
  }
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008

08000c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db0b      	blt.n	8000cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 021f 	and.w	r2, r3, #31
 8000ce4:	4907      	ldr	r1, [pc, #28]	; (8000d04 <__NVIC_EnableIRQ+0x38>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	2001      	movs	r0, #1
 8000cee:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	; (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0152      	lsls	r2, r2, #5
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0152      	lsls	r2, r2, #5
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	bf28      	it	cs
 8000d7a:	2303      	movcs	r3, #3
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3303      	adds	r3, #3
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b04      	subs	r3, #4
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd4:	d301      	bcc.n	8000dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00f      	b.n	8000dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <SysTick_Config+0x40>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de2:	2107      	movs	r1, #7
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f7ff ff8e 	bl	8000d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <SysTick_Config+0x40>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df2:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <SysTick_Config+0x40>)
 8000df4:	2207      	movs	r2, #7
 8000df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	e000e010 	.word	0xe000e010

08000e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff ff29 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff40 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff90 	bl	8000d5c <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5f 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff33 	bl	8000ccc <__NVIC_EnableIRQ>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffa4 	bl	8000dc4 <SysTick_Config>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e96:	e158      	b.n	800114a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 814a 	beq.w	8001144 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d005      	beq.n	8000ec8 <HAL_GPIO_Init+0x40>
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d130      	bne.n	8000f2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000efe:	2201      	movs	r2, #1
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	091b      	lsrs	r3, r3, #4
 8000f14:	f003 0201 	and.w	r2, r3, #1
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d017      	beq.n	8000f66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d123      	bne.n	8000fba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	220f      	movs	r2, #15
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	691a      	ldr	r2, [r3, #16]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	08da      	lsrs	r2, r3, #3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3208      	adds	r2, #8
 8000fb4:	6939      	ldr	r1, [r7, #16]
 8000fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0203 	and.w	r2, r3, #3
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 80a4 	beq.w	8001144 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000ffc:	4a5a      	ldr	r2, [pc, #360]	; (8001168 <HAL_GPIO_Init+0x2e0>)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	3318      	adds	r3, #24
 8001004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	220f      	movs	r2, #15
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a52      	ldr	r2, [pc, #328]	; (800116c <HAL_GPIO_Init+0x2e4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d025      	beq.n	8001074 <HAL_GPIO_Init+0x1ec>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a51      	ldr	r2, [pc, #324]	; (8001170 <HAL_GPIO_Init+0x2e8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d01f      	beq.n	8001070 <HAL_GPIO_Init+0x1e8>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a50      	ldr	r2, [pc, #320]	; (8001174 <HAL_GPIO_Init+0x2ec>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d019      	beq.n	800106c <HAL_GPIO_Init+0x1e4>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a4f      	ldr	r2, [pc, #316]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d013      	beq.n	8001068 <HAL_GPIO_Init+0x1e0>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a4e      	ldr	r2, [pc, #312]	; (800117c <HAL_GPIO_Init+0x2f4>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d00d      	beq.n	8001064 <HAL_GPIO_Init+0x1dc>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a4d      	ldr	r2, [pc, #308]	; (8001180 <HAL_GPIO_Init+0x2f8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d007      	beq.n	8001060 <HAL_GPIO_Init+0x1d8>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a4c      	ldr	r2, [pc, #304]	; (8001184 <HAL_GPIO_Init+0x2fc>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d101      	bne.n	800105c <HAL_GPIO_Init+0x1d4>
 8001058:	2306      	movs	r3, #6
 800105a:	e00c      	b.n	8001076 <HAL_GPIO_Init+0x1ee>
 800105c:	2307      	movs	r3, #7
 800105e:	e00a      	b.n	8001076 <HAL_GPIO_Init+0x1ee>
 8001060:	2305      	movs	r3, #5
 8001062:	e008      	b.n	8001076 <HAL_GPIO_Init+0x1ee>
 8001064:	2304      	movs	r3, #4
 8001066:	e006      	b.n	8001076 <HAL_GPIO_Init+0x1ee>
 8001068:	2303      	movs	r3, #3
 800106a:	e004      	b.n	8001076 <HAL_GPIO_Init+0x1ee>
 800106c:	2302      	movs	r3, #2
 800106e:	e002      	b.n	8001076 <HAL_GPIO_Init+0x1ee>
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <HAL_GPIO_Init+0x1ee>
 8001074:	2300      	movs	r3, #0
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	f002 0203 	and.w	r2, r2, #3
 800107c:	00d2      	lsls	r2, r2, #3
 800107e:	4093      	lsls	r3, r2
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001086:	4938      	ldr	r1, [pc, #224]	; (8001168 <HAL_GPIO_Init+0x2e0>)
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3318      	adds	r3, #24
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001094:	4b34      	ldr	r3, [pc, #208]	; (8001168 <HAL_GPIO_Init+0x2e0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010b8:	4a2b      	ldr	r2, [pc, #172]	; (8001168 <HAL_GPIO_Init+0x2e0>)
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80010be:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <HAL_GPIO_Init+0x2e0>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010e2:	4a21      	ldr	r2, [pc, #132]	; (8001168 <HAL_GPIO_Init+0x2e0>)
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <HAL_GPIO_Init+0x2e0>)
 80010ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800110e:	4a16      	ldr	r2, [pc, #88]	; (8001168 <HAL_GPIO_Init+0x2e0>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_GPIO_Init+0x2e0>)
 8001118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_GPIO_Init+0x2e0>)
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3301      	adds	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	f47f ae9f 	bne.w	8000e98 <HAL_GPIO_Init+0x10>
  }
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	371c      	adds	r7, #28
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	4002f400 	.word	0x4002f400
 800116c:	42020000 	.word	0x42020000
 8001170:	42020400 	.word	0x42020400
 8001174:	42020800 	.word	0x42020800
 8001178:	42020c00 	.word	0x42020c00
 800117c:	42021000 	.word	0x42021000
 8001180:	42021400 	.word	0x42021400
 8001184:	42021800 	.word	0x42021800

08001188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
 8001194:	4613      	mov	r3, r2
 8001196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001198:	787b      	ldrb	r3, [r7, #1]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800119e:	887a      	ldrh	r2, [r7, #2]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011a4:	e002      	b.n	80011ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011a6:	887a      	ldrh	r2, [r7, #2]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d002      	beq.n	80011d6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e007      	b.n	80011e6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f023 0204 	bic.w	r2, r3, #4
 80011de:	4905      	ldr	r1, [pc, #20]	; (80011f4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	40030400 	.word	0x40030400

080011f8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_ICACHE_Enable+0x1c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_ICACHE_Enable+0x1c>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40030400 	.word	0x40030400

08001218 <HAL_ICACHE_IRQHandler>:
  * @note This function respectively disables the interrupt and clears the
  *       flag of any pending flag before calling the associated user callback.
  * @retval None
  */
void HAL_ICACHE_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
  /* Get current interrupt flags and interrupt sources value */
  uint32_t itflags   = READ_REG(ICACHE->SR);
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <HAL_ICACHE_IRQHandler+0x64>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	607b      	str	r3, [r7, #4]
  uint32_t itsources = READ_REG(ICACHE->IER);
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_ICACHE_IRQHandler+0x64>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	603b      	str	r3, [r7, #0]

  /* Check Instruction cache Error interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_ERROR) != 0U)
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	4013      	ands	r3, r2
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00a      	beq.n	800124e <HAL_ICACHE_IRQHandler+0x36>
  {
    /* Disable error interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_ERRIE);
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <HAL_ICACHE_IRQHandler+0x64>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	4a0f      	ldr	r2, [pc, #60]	; (800127c <HAL_ICACHE_IRQHandler+0x64>)
 800123e:	f023 0304 	bic.w	r3, r3, #4
 8001242:	6093      	str	r3, [r2, #8]

    /* Clear ERR pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CERRF);
 8001244:	4b0d      	ldr	r3, [pc, #52]	; (800127c <HAL_ICACHE_IRQHandler+0x64>)
 8001246:	2204      	movs	r2, #4
 8001248:	60da      	str	r2, [r3, #12]

    /* Instruction cache error interrupt user callback */
    HAL_ICACHE_ErrorCallback();
 800124a:	f000 f820 	bl	800128e <HAL_ICACHE_ErrorCallback>
  }

  /* Check Instruction cache BusyEnd interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_BUSYEND) != 0U)
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	4013      	ands	r3, r2
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00a      	beq.n	8001272 <HAL_ICACHE_IRQHandler+0x5a>
  {
    /* Disable end of cache invalidation interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_BSYENDIE);
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <HAL_ICACHE_IRQHandler+0x64>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4a06      	ldr	r2, [pc, #24]	; (800127c <HAL_ICACHE_IRQHandler+0x64>)
 8001262:	f023 0302 	bic.w	r3, r3, #2
 8001266:	6093      	str	r3, [r2, #8]

    /* Clear BSYENDF pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <HAL_ICACHE_IRQHandler+0x64>)
 800126a:	2202      	movs	r2, #2
 800126c:	60da      	str	r2, [r3, #12]

    /* Instruction cache busyend interrupt user callback */
    HAL_ICACHE_InvalidateCompleteCallback();
 800126e:	f000 f807 	bl	8001280 <HAL_ICACHE_InvalidateCompleteCallback>
  }
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40030400 	.word	0x40030400

08001280 <HAL_ICACHE_InvalidateCompleteCallback>:

/**
  * @brief  Cache invalidation complete callback.
  */
__weak void HAL_ICACHE_InvalidateCompleteCallback(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <HAL_ICACHE_ErrorCallback>:

/**
  * @brief  Error callback.
  */
__weak void HAL_ICACHE_ErrorCallback(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_ErrorCallback() should be implemented in the user file
   */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800129c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129e:	b08b      	sub	sp, #44	; 0x2c
 80012a0:	af06      	add	r7, sp, #24
 80012a2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e0cb      	b.n	8001446 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d106      	bne.n	80012c8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fabc 	bl	8000840 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2203      	movs	r2, #3
 80012cc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 fd2b 	bl	8003d30 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012da:	2300      	movs	r3, #0
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	e040      	b.n	8001362 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	440b      	add	r3, r1
 80012f0:	3301      	adds	r3, #1
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	440b      	add	r3, r1
 8001306:	7bfa      	ldrb	r2, [r7, #15]
 8001308:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	440b      	add	r3, r1
 800131a:	3303      	adds	r3, #3
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	440b      	add	r3, r1
 800132e:	3338      	adds	r3, #56	; 0x38
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	440b      	add	r3, r1
 8001342:	333c      	adds	r3, #60	; 0x3c
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001348:	7bfa      	ldrb	r2, [r7, #15]
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	440b      	add	r3, r1
 8001356:	3340      	adds	r3, #64	; 0x40
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	3301      	adds	r3, #1
 8001360:	73fb      	strb	r3, [r7, #15]
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	429a      	cmp	r2, r3
 800136a:	d3b9      	bcc.n	80012e0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e044      	b.n	80013fc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001372:	7bfa      	ldrb	r2, [r7, #15]
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	440b      	add	r3, r1
 8001380:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001388:	7bfa      	ldrb	r2, [r7, #15]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	440b      	add	r3, r1
 8001396:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800139e:	7bfa      	ldrb	r2, [r7, #15]
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	440b      	add	r3, r1
 80013ac:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013b4:	7bfa      	ldrb	r2, [r7, #15]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	440b      	add	r3, r1
 80013c2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	440b      	add	r3, r1
 80013d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	440b      	add	r3, r1
 80013ee:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	3301      	adds	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	429a      	cmp	r2, r3
 8001404:	d3b5      	bcc.n	8001372 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	687e      	ldr	r6, [r7, #4]
 800140e:	466d      	mov	r5, sp
 8001410:	f106 0410 	add.w	r4, r6, #16
 8001414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001418:	6823      	ldr	r3, [r4, #0]
 800141a:	602b      	str	r3, [r5, #0]
 800141c:	1d33      	adds	r3, r6, #4
 800141e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001420:	6838      	ldr	r0, [r7, #0]
 8001422:	f002 fca0 	bl	8003d66 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d102      	bne.n	8001444 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f805 	bl	800144e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800144e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800144e:	b480      	push	{r7}
 8001450:	b085      	sub	sp, #20
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001472:	b29b      	uxth	r3, r3
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	b29a      	uxth	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001486:	b29b      	uxth	r3, r3
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	b29a      	uxth	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <HAL_PWREx_GetVoltageRange+0x18>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40007000 	.word	0x40007000

080014c0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014d0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80014d2:	f000 f851 	bl	8001578 <HAL_PWREx_SMPS_GetEffectiveMode>
 80014d6:	4603      	mov	r3, r0
 80014d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014dc:	d101      	bne.n	80014e2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e03e      	b.n	8001560 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014ee:	d101      	bne.n	80014f4 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e035      	b.n	8001560 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d101      	bne.n	8001500 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	e02f      	b.n	8001560 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001508:	4917      	ldr	r1, [pc, #92]	; (8001568 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4313      	orrs	r3, r2
 800150e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	095b      	lsrs	r3, r3, #5
 8001516:	4a16      	ldr	r2, [pc, #88]	; (8001570 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001518:	fba2 2303 	umull	r2, r3, r2, r3
 800151c:	09db      	lsrs	r3, r3, #7
 800151e:	2232      	movs	r2, #50	; 0x32
 8001520:	fb02 f303 	mul.w	r3, r2, r3
 8001524:	4a13      	ldr	r2, [pc, #76]	; (8001574 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	08db      	lsrs	r3, r3, #3
 800152c:	3301      	adds	r3, #1
 800152e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001530:	e002      	b.n	8001538 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	3b01      	subs	r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001544:	d102      	bne.n	800154c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f2      	bne.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001558:	d101      	bne.n	800155e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e000      	b.n	8001560 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40007000 	.word	0x40007000
 800156c:	20000000 	.word	0x20000000
 8001570:	0a7c5ac5 	.word	0x0a7c5ac5
 8001574:	cccccccd 	.word	0xcccccccd

08001578 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800158e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	e00a      	b.n	80015ac <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d103      	bne.n	80015a8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80015a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	e001      	b.n	80015ac <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80015ac:	687b      	ldr	r3, [r7, #4]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40007000 	.word	0x40007000

080015c0 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f000 bcc2 	b.w	8001f58 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d4:	4b99      	ldr	r3, [pc, #612]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015de:	4b97      	ldr	r3, [pc, #604]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80e9 	beq.w	80017c8 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d006      	beq.n	800160a <HAL_RCC_OscConfig+0x4a>
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2b0c      	cmp	r3, #12
 8001600:	f040 8083 	bne.w	800170a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d17f      	bne.n	800170a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800160a:	4b8c      	ldr	r3, [pc, #560]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d006      	beq.n	8001624 <HAL_RCC_OscConfig+0x64>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d102      	bne.n	8001624 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	f000 bc9a 	b.w	8001f58 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001628:	4b84      	ldr	r3, [pc, #528]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d004      	beq.n	800163e <HAL_RCC_OscConfig+0x7e>
 8001634:	4b81      	ldr	r3, [pc, #516]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800163c:	e005      	b.n	800164a <HAL_RCC_OscConfig+0x8a>
 800163e:	4b7f      	ldr	r3, [pc, #508]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800164a:	4293      	cmp	r3, r2
 800164c:	d224      	bcs.n	8001698 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fe74 	bl	8002340 <RCC_SetFlashLatencyFromMSIRange>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d002      	beq.n	8001664 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	f000 bc7a 	b.w	8001f58 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001664:	4b75      	ldr	r3, [pc, #468]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a74      	ldr	r2, [pc, #464]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 800166a:	f043 0308 	orr.w	r3, r3, #8
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b72      	ldr	r3, [pc, #456]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	496f      	ldr	r1, [pc, #444]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 800167e:	4313      	orrs	r3, r2
 8001680:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001682:	4b6e      	ldr	r3, [pc, #440]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	496a      	ldr	r1, [pc, #424]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001692:	4313      	orrs	r3, r2
 8001694:	604b      	str	r3, [r1, #4]
 8001696:	e026      	b.n	80016e6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001698:	4b68      	ldr	r3, [pc, #416]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a67      	ldr	r2, [pc, #412]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 800169e:	f043 0308 	orr.w	r3, r3, #8
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b65      	ldr	r3, [pc, #404]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	4962      	ldr	r1, [pc, #392]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b6:	4b61      	ldr	r3, [pc, #388]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	495d      	ldr	r1, [pc, #372]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10a      	bne.n	80016e6 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 fe33 	bl	8002340 <RCC_SetFlashLatencyFromMSIRange>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	f000 bc39 	b.w	8001f58 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80016e6:	f000 fe17 	bl	8002318 <HAL_RCC_GetHCLKFreq>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a54      	ldr	r2, [pc, #336]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 80016ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016f0:	4b54      	ldr	r3, [pc, #336]	; (8001844 <HAL_RCC_OscConfig+0x284>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fa37 	bl	8000b68 <HAL_InitTick>
 80016fa:	4603      	mov	r3, r0
 80016fc:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d060      	beq.n	80017c6 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	f000 bc27 	b.w	8001f58 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d039      	beq.n	8001786 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001712:	4b4a      	ldr	r3, [pc, #296]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a49      	ldr	r2, [pc, #292]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800171e:	f7ff fa73 	bl	8000c08 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001724:	e00f      	b.n	8001746 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001726:	f7ff fa6f 	bl	8000c08 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d908      	bls.n	8001746 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001734:	4b41      	ldr	r3, [pc, #260]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	f000 bc09 	b.w	8001f58 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001746:	4b3d      	ldr	r3, [pc, #244]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0e9      	beq.n	8001726 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001752:	4b3a      	ldr	r3, [pc, #232]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a39      	ldr	r2, [pc, #228]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001758:	f043 0308 	orr.w	r3, r3, #8
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	4b37      	ldr	r3, [pc, #220]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	4934      	ldr	r1, [pc, #208]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 800176c:	4313      	orrs	r3, r2
 800176e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001770:	4b32      	ldr	r3, [pc, #200]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	492f      	ldr	r1, [pc, #188]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
 8001784:	e020      	b.n	80017c8 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001786:	4b2d      	ldr	r3, [pc, #180]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a2c      	ldr	r2, [pc, #176]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001792:	f7ff fa39 	bl	8000c08 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001798:	e00e      	b.n	80017b8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800179a:	f7ff fa35 	bl	8000c08 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d907      	bls.n	80017b8 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e3cf      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017b8:	4b20      	ldr	r3, [pc, #128]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1ea      	bne.n	800179a <HAL_RCC_OscConfig+0x1da>
 80017c4:	e000      	b.n	80017c8 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d07e      	beq.n	80018d2 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d005      	beq.n	80017e6 <HAL_RCC_OscConfig+0x226>
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	2b0c      	cmp	r3, #12
 80017de:	d10e      	bne.n	80017fe <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d10b      	bne.n	80017fe <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d06e      	beq.n	80018d0 <HAL_RCC_OscConfig+0x310>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d16a      	bne.n	80018d0 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e3ac      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x256>
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0b      	ldr	r2, [pc, #44]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 800180e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e024      	b.n	8001860 <HAL_RCC_OscConfig+0x2a0>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800181e:	d113      	bne.n	8001848 <HAL_RCC_OscConfig+0x288>
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a05      	ldr	r2, [pc, #20]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001826:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a02      	ldr	r2, [pc, #8]	; (800183c <HAL_RCC_OscConfig+0x27c>)
 8001832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	e012      	b.n	8001860 <HAL_RCC_OscConfig+0x2a0>
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	20000000 	.word	0x20000000
 8001844:	20000004 	.word	0x20000004
 8001848:	4b8b      	ldr	r3, [pc, #556]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a8a      	ldr	r2, [pc, #552]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 800184e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4b88      	ldr	r3, [pc, #544]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a87      	ldr	r2, [pc, #540]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 800185a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d019      	beq.n	800189c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff f9ce 	bl	8000c08 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800186e:	e00e      	b.n	800188e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff f9ca 	bl	8000c08 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	; 0x64
 800187c:	d907      	bls.n	800188e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187e:	4b7e      	ldr	r3, [pc, #504]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e364      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188e:	4b7a      	ldr	r3, [pc, #488]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0ea      	beq.n	8001870 <HAL_RCC_OscConfig+0x2b0>
 800189a:	e01a      	b.n	80018d2 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff f9b4 	bl	8000c08 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018a2:	e00e      	b.n	80018c2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff f9b0 	bl	8000c08 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	; 0x64
 80018b0:	d907      	bls.n	80018c2 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b2:	4b71      	ldr	r3, [pc, #452]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e34a      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018c2:	4b6d      	ldr	r3, [pc, #436]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1ea      	bne.n	80018a4 <HAL_RCC_OscConfig+0x2e4>
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d06c      	beq.n	80019b8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_OscConfig+0x330>
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d119      	bne.n	800191e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d116      	bne.n	800191e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f0:	4b61      	ldr	r3, [pc, #388]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <HAL_RCC_OscConfig+0x348>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e327      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001908:	4b5b      	ldr	r3, [pc, #364]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	061b      	lsls	r3, r3, #24
 8001916:	4958      	ldr	r1, [pc, #352]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800191c:	e04c      	b.n	80019b8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d029      	beq.n	800197a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001926:	4b54      	ldr	r3, [pc, #336]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a53      	ldr	r2, [pc, #332]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 800192c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001932:	f7ff f969 	bl	8000c08 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001938:	e00e      	b.n	8001958 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193a:	f7ff f965 	bl	8000c08 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d907      	bls.n	8001958 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001948:	4b4b      	ldr	r3, [pc, #300]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e2ff      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001958:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ea      	beq.n	800193a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001964:	4b44      	ldr	r3, [pc, #272]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	061b      	lsls	r3, r3, #24
 8001972:	4941      	ldr	r1, [pc, #260]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
 8001978:	e01e      	b.n	80019b8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800197a:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a3e      	ldr	r2, [pc, #248]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001986:	f7ff f93f 	bl	8000c08 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800198c:	e00e      	b.n	80019ac <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198e:	f7ff f93b 	bl	8000c08 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d907      	bls.n	80019ac <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800199c:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e2d5      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019ac:	4b32      	ldr	r3, [pc, #200]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1ea      	bne.n	800198e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d062      	beq.n	8001a8a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d038      	beq.n	8001a3e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d108      	bne.n	80019e6 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80019d4:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80019d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019da:	4a27      	ldr	r2, [pc, #156]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80019dc:	f023 0310 	bic.w	r3, r3, #16
 80019e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80019e4:	e007      	b.n	80019f6 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80019e6:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80019e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ec:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80019ee:	f043 0310 	orr.w	r3, r3, #16
 80019f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80019f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fc:	4a1e      	ldr	r2, [pc, #120]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a06:	f7ff f8ff 	bl	8000c08 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a0c:	e00f      	b.n	8001a2e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7ff f8fb 	bl	8000c08 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b07      	cmp	r3, #7
 8001a1a:	d908      	bls.n	8001a2e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e294      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0e8      	beq.n	8001a0e <HAL_RCC_OscConfig+0x44e>
 8001a3c:	e025      	b.n	8001a8a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a44:	4a0c      	ldr	r2, [pc, #48]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001a46:	f023 0301 	bic.w	r3, r3, #1
 8001a4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4e:	f7ff f8db 	bl	8000c08 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a54:	e012      	b.n	8001a7c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a56:	f7ff f8d7 	bl	8000c08 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b07      	cmp	r3, #7
 8001a62:	d90b      	bls.n	8001a7c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <HAL_RCC_OscConfig+0x4b8>)
 8001a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d004      	beq.n	8001a7c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e270      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
 8001a76:	bf00      	nop
 8001a78:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a7c:	4ba8      	ldr	r3, [pc, #672]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1e5      	bne.n	8001a56 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 812d 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a9c:	4ba0      	ldr	r3, [pc, #640]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10d      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa8:	4b9d      	ldr	r3, [pc, #628]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aac:	4a9c      	ldr	r2, [pc, #624]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab4:	4b9a      	ldr	r3, [pc, #616]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac4:	4b97      	ldr	r3, [pc, #604]	; (8001d24 <HAL_RCC_OscConfig+0x764>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d11e      	bne.n	8001b0e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ad0:	4b94      	ldr	r3, [pc, #592]	; (8001d24 <HAL_RCC_OscConfig+0x764>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a93      	ldr	r2, [pc, #588]	; (8001d24 <HAL_RCC_OscConfig+0x764>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001adc:	f7ff f894 	bl	8000c08 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae2:	e00e      	b.n	8001b02 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae4:	f7ff f890 	bl	8000c08 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d907      	bls.n	8001b02 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af2:	4b8c      	ldr	r3, [pc, #560]	; (8001d24 <HAL_RCC_OscConfig+0x764>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e22a      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b02:	4b88      	ldr	r3, [pc, #544]	; (8001d24 <HAL_RCC_OscConfig+0x764>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0ea      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d01f      	beq.n	8001b5a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d010      	beq.n	8001b48 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b26:	4b7e      	ldr	r3, [pc, #504]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2c:	4a7c      	ldr	r2, [pc, #496]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001b2e:	f043 0304 	orr.w	r3, r3, #4
 8001b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b36:	4b7a      	ldr	r3, [pc, #488]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3c:	4a78      	ldr	r2, [pc, #480]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b46:	e018      	b.n	8001b7a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b48:	4b75      	ldr	r3, [pc, #468]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4e:	4a74      	ldr	r2, [pc, #464]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b58:	e00f      	b.n	8001b7a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b5a:	4b71      	ldr	r3, [pc, #452]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b60:	4a6f      	ldr	r2, [pc, #444]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b6a:	4b6d      	ldr	r3, [pc, #436]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b70:	4a6b      	ldr	r2, [pc, #428]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001b72:	f023 0304 	bic.w	r3, r3, #4
 8001b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d068      	beq.n	8001c54 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b82:	f7ff f841 	bl	8000c08 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b88:	e011      	b.n	8001bae <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b8a:	f7ff f83d 	bl	8000c08 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d908      	bls.n	8001bae <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b9c:	4b60      	ldr	r3, [pc, #384]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e1d4      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bae:	4b5c      	ldr	r3, [pc, #368]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0e6      	beq.n	8001b8a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d022      	beq.n	8001c0e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001bc8:	4b55      	ldr	r3, [pc, #340]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bce:	4a54      	ldr	r2, [pc, #336]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001bd8:	e011      	b.n	8001bfe <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f7ff f815 	bl	8000c08 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d908      	bls.n	8001bfe <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001bec:	4b4c      	ldr	r3, [pc, #304]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e1ac      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001bfe:	4b48      	ldr	r3, [pc, #288]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0e6      	beq.n	8001bda <HAL_RCC_OscConfig+0x61a>
 8001c0c:	e068      	b.n	8001ce0 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c0e:	4b44      	ldr	r3, [pc, #272]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c14:	4a42      	ldr	r2, [pc, #264]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c1e:	e011      	b.n	8001c44 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c20:	f7fe fff2 	bl	8000c08 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d908      	bls.n	8001c44 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c32:	4b3b      	ldr	r3, [pc, #236]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e189      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c44:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1e6      	bne.n	8001c20 <HAL_RCC_OscConfig+0x660>
 8001c52:	e045      	b.n	8001ce0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7fe ffd8 	bl	8000c08 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c5a:	e011      	b.n	8001c80 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5c:	f7fe ffd4 	bl	8000c08 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d908      	bls.n	8001c80 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c6e:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e16b      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c80:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1e6      	bne.n	8001c5c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001c8e:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d021      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c9c:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca2:	4a1f      	ldr	r2, [pc, #124]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001cac:	e011      	b.n	8001cd2 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cae:	f7fe ffab 	bl	8000c08 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d908      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001cc0:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e142      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1e6      	bne.n	8001cae <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ce0:	7ffb      	ldrb	r3, [r7, #31]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d105      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0320 	and.w	r3, r3, #32
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d04f      	beq.n	8001d9e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d028      	beq.n	8001d58 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001d08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <HAL_RCC_OscConfig+0x760>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d16:	f7fe ff77 	bl	8000c08 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d1c:	e014      	b.n	8001d48 <HAL_RCC_OscConfig+0x788>
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d28:	f7fe ff6e 	bl	8000c08 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d908      	bls.n	8001d48 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d36:	4b8a      	ldr	r3, [pc, #552]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e107      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d48:	4b85      	ldr	r3, [pc, #532]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0e8      	beq.n	8001d28 <HAL_RCC_OscConfig+0x768>
 8001d56:	e022      	b.n	8001d9e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d58:	4b81      	ldr	r3, [pc, #516]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d5e:	4a80      	ldr	r2, [pc, #512]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7fe ff4e 	bl	8000c08 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d6e:	e00f      	b.n	8001d90 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d70:	f7fe ff4a 	bl	8000c08 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d908      	bls.n	8001d90 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d7e:	4b78      	ldr	r3, [pc, #480]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e0e3      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d90:	4b73      	ldr	r3, [pc, #460]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1e8      	bne.n	8001d70 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 80d7 	beq.w	8001f56 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da8:	4b6d      	ldr	r3, [pc, #436]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b0c      	cmp	r3, #12
 8001db2:	f000 8091 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d166      	bne.n	8001e8c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbe:	4b68      	ldr	r3, [pc, #416]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a67      	ldr	r2, [pc, #412]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001dc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	f7fe ff1d 	bl	8000c08 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd0:	e00e      	b.n	8001df0 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7fe ff19 	bl	8000c08 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d907      	bls.n	8001df0 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de0:	4b5f      	ldr	r3, [pc, #380]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e0b3      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	4b5b      	ldr	r3, [pc, #364]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1ea      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dfc:	4b58      	ldr	r3, [pc, #352]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	4b58      	ldr	r3, [pc, #352]	; (8001f64 <HAL_RCC_OscConfig+0x9a4>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e0c:	3a01      	subs	r2, #1
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	4311      	orrs	r1, r2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e16:	0212      	lsls	r2, r2, #8
 8001e18:	4311      	orrs	r1, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e1e:	0852      	lsrs	r2, r2, #1
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0552      	lsls	r2, r2, #21
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e2a:	0852      	lsrs	r2, r2, #1
 8001e2c:	3a01      	subs	r2, #1
 8001e2e:	0652      	lsls	r2, r2, #25
 8001e30:	4311      	orrs	r1, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e36:	06d2      	lsls	r2, r2, #27
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	4949      	ldr	r1, [pc, #292]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e40:	4b47      	ldr	r3, [pc, #284]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a46      	ldr	r2, [pc, #280]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e4a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e4c:	4b44      	ldr	r3, [pc, #272]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	4a43      	ldr	r2, [pc, #268]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7fe fed6 	bl	8000c08 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5e:	e00e      	b.n	8001e7e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e60:	f7fe fed2 	bl	8000c08 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d907      	bls.n	8001e7e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e6e:	4b3c      	ldr	r3, [pc, #240]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e06c      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7e:	4b38      	ldr	r3, [pc, #224]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0ea      	beq.n	8001e60 <HAL_RCC_OscConfig+0x8a0>
 8001e8a:	e064      	b.n	8001f56 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8c:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a33      	ldr	r2, [pc, #204]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7fe feb6 	bl	8000c08 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9e:	e00e      	b.n	8001ebe <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7fe feb2 	bl	8000c08 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d907      	bls.n	8001ebe <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eae:	4b2c      	ldr	r3, [pc, #176]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e04c      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ebe:	4b28      	ldr	r3, [pc, #160]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1ea      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001eca:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	4924      	ldr	r1, [pc, #144]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001ed0:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <HAL_RCC_OscConfig+0x9a8>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	60cb      	str	r3, [r1, #12]
 8001ed6:	e03e      	b.n	8001f56 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e039      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <HAL_RCC_OscConfig+0x9a0>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f003 0203 	and.w	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d12c      	bne.n	8001f52 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f02:	3b01      	subs	r3, #1
 8001f04:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d123      	bne.n	8001f52 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f14:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d11b      	bne.n	8001f52 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f24:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d113      	bne.n	8001f52 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	085b      	lsrs	r3, r3, #1
 8001f36:	3b01      	subs	r3, #1
 8001f38:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d109      	bne.n	8001f52 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f48:	085b      	lsrs	r3, r3, #1
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	019f800c 	.word	0x019f800c
 8001f68:	feeefffc 	.word	0xfeeefffc

08001f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e11c      	b.n	80021be <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b90      	ldr	r3, [pc, #576]	; (80021c8 <HAL_RCC_ClockConfig+0x25c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d910      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b8d      	ldr	r3, [pc, #564]	; (80021c8 <HAL_RCC_ClockConfig+0x25c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 020f 	bic.w	r2, r3, #15
 8001f9a:	498b      	ldr	r1, [pc, #556]	; (80021c8 <HAL_RCC_ClockConfig+0x25c>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b89      	ldr	r3, [pc, #548]	; (80021c8 <HAL_RCC_ClockConfig+0x25c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e104      	b.n	80021be <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d010      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	4b81      	ldr	r3, [pc, #516]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d908      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd0:	4b7e      	ldr	r3, [pc, #504]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	497b      	ldr	r1, [pc, #492]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8085 	beq.w	80020fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d11f      	bne.n	8002038 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff8:	4b74      	ldr	r3, [pc, #464]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0da      	b.n	80021be <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002008:	f000 f9fe 	bl	8002408 <RCC_GetSysClockFreqFromPLLSource>
 800200c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4a6f      	ldr	r2, [pc, #444]	; (80021d0 <HAL_RCC_ClockConfig+0x264>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d947      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002016:	4b6d      	ldr	r3, [pc, #436]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d141      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002022:	4b6a      	ldr	r3, [pc, #424]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800202a:	4a68      	ldr	r2, [pc, #416]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 800202c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002030:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	e036      	b.n	80020a6 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d107      	bne.n	8002050 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002040:	4b62      	ldr	r3, [pc, #392]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d115      	bne.n	8002078 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0b6      	b.n	80021be <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d107      	bne.n	8002068 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002058:	4b5c      	ldr	r3, [pc, #368]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d109      	bne.n	8002078 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0aa      	b.n	80021be <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002068:	4b58      	ldr	r3, [pc, #352]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0a2      	b.n	80021be <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002078:	f000 f8b0 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 800207c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4a53      	ldr	r2, [pc, #332]	; (80021d0 <HAL_RCC_ClockConfig+0x264>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d90f      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002086:	4b51      	ldr	r3, [pc, #324]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002092:	4b4e      	ldr	r3, [pc, #312]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800209a:	4a4c      	ldr	r2, [pc, #304]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 800209c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020a6:	4b49      	ldr	r3, [pc, #292]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f023 0203 	bic.w	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4946      	ldr	r1, [pc, #280]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b8:	f7fe fda6 	bl	8000c08 <HAL_GetTick>
 80020bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	e013      	b.n	80020e8 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c0:	f7fe fda2 	bl	8000c08 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d90a      	bls.n	80020e8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	4b3e      	ldr	r3, [pc, #248]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 020c 	and.w	r2, r3, #12
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e06a      	b.n	80021be <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e8:	4b38      	ldr	r3, [pc, #224]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 020c 	and.w	r2, r3, #12
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d1e2      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b80      	cmp	r3, #128	; 0x80
 80020fe:	d105      	bne.n	800210c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002100:	4b32      	ldr	r3, [pc, #200]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4a31      	ldr	r2, [pc, #196]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 8002106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800210a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d010      	beq.n	800213a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	4b2b      	ldr	r3, [pc, #172]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002124:	429a      	cmp	r2, r3
 8002126:	d208      	bcs.n	800213a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002128:	4b28      	ldr	r3, [pc, #160]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	4925      	ldr	r1, [pc, #148]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800213a:	4b23      	ldr	r3, [pc, #140]	; (80021c8 <HAL_RCC_ClockConfig+0x25c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d210      	bcs.n	800216a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002148:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <HAL_RCC_ClockConfig+0x25c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 020f 	bic.w	r2, r3, #15
 8002150:	491d      	ldr	r1, [pc, #116]	; (80021c8 <HAL_RCC_ClockConfig+0x25c>)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002158:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <HAL_RCC_ClockConfig+0x25c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d001      	beq.n	800216a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e029      	b.n	80021be <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	d008      	beq.n	8002188 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	4912      	ldr	r1, [pc, #72]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 8002184:	4313      	orrs	r3, r2
 8002186:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d009      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002194:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	490a      	ldr	r1, [pc, #40]	; (80021cc <HAL_RCC_ClockConfig+0x260>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80021a8:	f000 f8b6 	bl	8002318 <HAL_RCC_GetHCLKFreq>
 80021ac:	4603      	mov	r3, r0
 80021ae:	4a09      	ldr	r2, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x268>)
 80021b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_RCC_ClockConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fcd6 	bl	8000b68 <HAL_InitTick>
 80021bc:	4603      	mov	r3, r0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40022000 	.word	0x40022000
 80021cc:	40021000 	.word	0x40021000
 80021d0:	04c4b400 	.word	0x04c4b400
 80021d4:	20000000 	.word	0x20000000
 80021d8:	20000004 	.word	0x20000004

080021dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ea:	4b47      	ldr	r3, [pc, #284]	; (8002308 <HAL_RCC_GetSysClockFreq+0x12c>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f4:	4b44      	ldr	r3, [pc, #272]	; (8002308 <HAL_RCC_GetSysClockFreq+0x12c>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x34>
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	2b0c      	cmp	r3, #12
 8002208:	d121      	bne.n	800224e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d11e      	bne.n	800224e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002210:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d107      	bne.n	800222c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800221c:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <HAL_RCC_GetSysClockFreq+0x12c>)
 800221e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	e005      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800222c:	4b36      	ldr	r3, [pc, #216]	; (8002308 <HAL_RCC_GetSysClockFreq+0x12c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8002238:	4a34      	ldr	r2, [pc, #208]	; (800230c <HAL_RCC_GetSysClockFreq+0x130>)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002240:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10d      	bne.n	8002264 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2b04      	cmp	r3, #4
 8002252:	d102      	bne.n	800225a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002254:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <HAL_RCC_GetSysClockFreq+0x134>)
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	e004      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b08      	cmp	r3, #8
 800225e:	d101      	bne.n	8002264 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002260:	4b2c      	ldr	r3, [pc, #176]	; (8002314 <HAL_RCC_GetSysClockFreq+0x138>)
 8002262:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	2b0c      	cmp	r3, #12
 8002268:	d146      	bne.n	80022f8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800226a:	4b27      	ldr	r3, [pc, #156]	; (8002308 <HAL_RCC_GetSysClockFreq+0x12c>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	3301      	adds	r3, #1
 8002280:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d003      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0xb4>
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b03      	cmp	r3, #3
 800228c:	d00d      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0xce>
 800228e:	e019      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002290:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <HAL_RCC_GetSysClockFreq+0x134>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	fbb2 f3f3 	udiv	r3, r2, r3
 8002298:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <HAL_RCC_GetSysClockFreq+0x12c>)
 800229a:	68d2      	ldr	r2, [r2, #12]
 800229c:	0a12      	lsrs	r2, r2, #8
 800229e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022a2:	fb02 f303 	mul.w	r3, r2, r3
 80022a6:	617b      	str	r3, [r7, #20]
        break;
 80022a8:	e019      	b.n	80022de <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022aa:	4a1a      	ldr	r2, [pc, #104]	; (8002314 <HAL_RCC_GetSysClockFreq+0x138>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	4a15      	ldr	r2, [pc, #84]	; (8002308 <HAL_RCC_GetSysClockFreq+0x12c>)
 80022b4:	68d2      	ldr	r2, [r2, #12]
 80022b6:	0a12      	lsrs	r2, r2, #8
 80022b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022bc:	fb02 f303 	mul.w	r3, r2, r3
 80022c0:	617b      	str	r3, [r7, #20]
        break;
 80022c2:	e00c      	b.n	80022de <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022c4:	69fa      	ldr	r2, [r7, #28]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022cc:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <HAL_RCC_GetSysClockFreq+0x12c>)
 80022ce:	68d2      	ldr	r2, [r2, #12]
 80022d0:	0a12      	lsrs	r2, r2, #8
 80022d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	617b      	str	r3, [r7, #20]
        break;
 80022dc:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_RCC_GetSysClockFreq+0x12c>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	0e5b      	lsrs	r3, r3, #25
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	3301      	adds	r3, #1
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022f8:	69bb      	ldr	r3, [r7, #24]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3724      	adds	r7, #36	; 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	08003e30 	.word	0x08003e30
 8002310:	00f42400 	.word	0x00f42400
 8002314:	01e84800 	.word	0x01e84800

08002318 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 800231c:	f7ff ff5e 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_RCC_GetHCLKFreq+0x20>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	4903      	ldr	r1, [pc, #12]	; (800233c <HAL_RCC_GetHCLKFreq+0x24>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	08003e20 	.word	0x08003e20

08002340 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800234c:	4b2c      	ldr	r3, [pc, #176]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002358:	f7ff f8a4 	bl	80014a4 <HAL_PWREx_GetVoltageRange>
 800235c:	6138      	str	r0, [r7, #16]
 800235e:	e014      	b.n	800238a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002360:	4b27      	ldr	r3, [pc, #156]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	4a26      	ldr	r2, [pc, #152]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236a:	6593      	str	r3, [r2, #88]	; 0x58
 800236c:	4b24      	ldr	r3, [pc, #144]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800236e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002378:	f7ff f894 	bl	80014a4 <HAL_PWREx_GetVoltageRange>
 800237c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002388:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002396:	d10b      	bne.n	80023b0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b80      	cmp	r3, #128	; 0x80
 800239c:	d919      	bls.n	80023d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2ba0      	cmp	r3, #160	; 0xa0
 80023a2:	d902      	bls.n	80023aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023a4:	2302      	movs	r3, #2
 80023a6:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80023a8:	e013      	b.n	80023d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023aa:	2301      	movs	r3, #1
 80023ac:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80023ae:	e010      	b.n	80023d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b80      	cmp	r3, #128	; 0x80
 80023b4:	d902      	bls.n	80023bc <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023b6:	2303      	movs	r3, #3
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e00a      	b.n	80023d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b80      	cmp	r3, #128	; 0x80
 80023c0:	d102      	bne.n	80023c8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023c2:	2302      	movs	r3, #2
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	e004      	b.n	80023d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b70      	cmp	r3, #112	; 0x70
 80023cc:	d101      	bne.n	80023d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023ce:	2301      	movs	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 020f 	bic.w	r2, r3, #15
 80023da:	490a      	ldr	r1, [pc, #40]	; (8002404 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	40022000 	.word	0x40022000

08002408 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002408:	b480      	push	{r7}
 800240a:	b087      	sub	sp, #28
 800240c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800240e:	4b31      	ldr	r3, [pc, #196]	; (80024d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002418:	4b2e      	ldr	r3, [pc, #184]	; (80024d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	3301      	adds	r3, #1
 8002424:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b03      	cmp	r3, #3
 800242a:	d015      	beq.n	8002458 <RCC_GetSysClockFreqFromPLLSource+0x50>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2b03      	cmp	r3, #3
 8002430:	d839      	bhi.n	80024a6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d01c      	beq.n	8002472 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d133      	bne.n	80024a6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800243e:	4a26      	ldr	r2, [pc, #152]	; (80024d8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	fbb2 f3f3 	udiv	r3, r2, r3
 8002446:	4a23      	ldr	r2, [pc, #140]	; (80024d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002448:	68d2      	ldr	r2, [r2, #12]
 800244a:	0a12      	lsrs	r2, r2, #8
 800244c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002450:	fb02 f303 	mul.w	r3, r2, r3
 8002454:	613b      	str	r3, [r7, #16]
      break;
 8002456:	e029      	b.n	80024ac <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002458:	4a20      	ldr	r2, [pc, #128]	; (80024dc <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002460:	4a1c      	ldr	r2, [pc, #112]	; (80024d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002462:	68d2      	ldr	r2, [r2, #12]
 8002464:	0a12      	lsrs	r2, r2, #8
 8002466:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800246a:	fb02 f303 	mul.w	r3, r2, r3
 800246e:	613b      	str	r3, [r7, #16]
      break;
 8002470:	e01c      	b.n	80024ac <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002472:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d107      	bne.n	800248e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002484:	0a1b      	lsrs	r3, r3, #8
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	e005      	b.n	800249a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800248e:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	f003 030f 	and.w	r3, r3, #15
 8002498:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800249a:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a2:	613b      	str	r3, [r7, #16]
        break;
 80024a4:	e002      	b.n	80024ac <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
      break;
 80024aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	0e5b      	lsrs	r3, r3, #25
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	3301      	adds	r3, #1
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80024c6:	683b      	ldr	r3, [r7, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	371c      	adds	r7, #28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	40021000 	.word	0x40021000
 80024d8:	00f42400 	.word	0x00f42400
 80024dc:	01e84800 	.word	0x01e84800
 80024e0:	08003e30 	.word	0x08003e30

080024e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024ec:	2300      	movs	r3, #0
 80024ee:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024f0:	2300      	movs	r3, #0
 80024f2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d040      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002504:	2b80      	cmp	r3, #128	; 0x80
 8002506:	d02a      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002508:	2b80      	cmp	r3, #128	; 0x80
 800250a:	d825      	bhi.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800250c:	2b60      	cmp	r3, #96	; 0x60
 800250e:	d026      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002510:	2b60      	cmp	r3, #96	; 0x60
 8002512:	d821      	bhi.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002514:	2b40      	cmp	r3, #64	; 0x40
 8002516:	d006      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002518:	2b40      	cmp	r3, #64	; 0x40
 800251a:	d81d      	bhi.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800251c:	2b00      	cmp	r3, #0
 800251e:	d009      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002520:	2b20      	cmp	r3, #32
 8002522:	d010      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002524:	e018      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002526:	4b8f      	ldr	r3, [pc, #572]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	4a8e      	ldr	r2, [pc, #568]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002530:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002532:	e015      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3304      	adds	r3, #4
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fb56 	bl	8002bec <RCCEx_PLLSAI1_Config>
 8002540:	4603      	mov	r3, r0
 8002542:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002544:	e00c      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3320      	adds	r3, #32
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fc33 	bl	8002db8 <RCCEx_PLLSAI2_Config>
 8002552:	4603      	mov	r3, r0
 8002554:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002556:	e003      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	77fb      	strb	r3, [r7, #31]
        break;
 800255c:	e000      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800255e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002560:	7ffb      	ldrb	r3, [r7, #31]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10b      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002566:	4b7f      	ldr	r3, [pc, #508]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002568:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800256c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002574:	497b      	ldr	r1, [pc, #492]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800257c:	e001      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800257e:	7ffb      	ldrb	r3, [r7, #31]
 8002580:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d047      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002596:	d030      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259c:	d82a      	bhi.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800259e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025a2:	d02a      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 80025a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025a8:	d824      	bhi.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ae:	d008      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80025b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025b4:	d81e      	bhi.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80025ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025be:	d010      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80025c0:	e018      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025c2:	4b68      	ldr	r3, [pc, #416]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	4a67      	ldr	r2, [pc, #412]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025cc:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80025ce:	e015      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3304      	adds	r3, #4
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fb08 	bl	8002bec <RCCEx_PLLSAI1_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80025e0:	e00c      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3320      	adds	r3, #32
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fbe5 	bl	8002db8 <RCCEx_PLLSAI2_Config>
 80025ee:	4603      	mov	r3, r0
 80025f0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80025f2:	e003      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	77fb      	strb	r3, [r7, #31]
        break;
 80025f8:	e000      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80025fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025fc:	7ffb      	ldrb	r3, [r7, #31]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10b      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002602:	4b58      	ldr	r3, [pc, #352]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002604:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	4954      	ldr	r1, [pc, #336]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002618:	e001      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800261a:	7ffb      	ldrb	r3, [r7, #31]
 800261c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80ab 	beq.w	8002782 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262c:	2300      	movs	r3, #0
 800262e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002630:	4b4c      	ldr	r3, [pc, #304]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10d      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263c:	4b49      	ldr	r3, [pc, #292]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	4a48      	ldr	r2, [pc, #288]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002646:	6593      	str	r3, [r2, #88]	; 0x58
 8002648:	4b46      	ldr	r3, [pc, #280]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800264a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002654:	2301      	movs	r3, #1
 8002656:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002658:	4b43      	ldr	r3, [pc, #268]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a42      	ldr	r2, [pc, #264]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800265e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002662:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002664:	f7fe fad0 	bl	8000c08 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800266a:	e00f      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266c:	f7fe facc 	bl	8000c08 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d908      	bls.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800267a:	4b3b      	ldr	r3, [pc, #236]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800268a:	e006      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800268c:	4b36      	ldr	r3, [pc, #216]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0e9      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8002698:	e000      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800269a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 800269c:	7ffb      	ldrb	r3, [r7, #31]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d164      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026a2:	4b30      	ldr	r3, [pc, #192]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ac:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d01f      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d019      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026c0:	4b28      	ldr	r3, [pc, #160]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ca:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026cc:	4b25      	ldr	r3, [pc, #148]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d2:	4a24      	ldr	r2, [pc, #144]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026dc:	4b21      	ldr	r3, [pc, #132]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e2:	4a20      	ldr	r2, [pc, #128]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026ec:	4a1d      	ldr	r2, [pc, #116]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d01f      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fe:	f7fe fa83 	bl	8000c08 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002704:	e012      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002706:	f7fe fa7f 	bl	8000c08 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	f241 3288 	movw	r2, #5000	; 0x1388
 8002714:	4293      	cmp	r3, r2
 8002716:	d909      	bls.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10a      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800272a:	e007      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272c:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0e5      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800273a:	e000      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 800273c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800273e:	7ffb      	ldrb	r3, [r7, #31]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10c      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002744:	4b07      	ldr	r3, [pc, #28]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002754:	4903      	ldr	r1, [pc, #12]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800275c:	e008      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800275e:	7ffb      	ldrb	r3, [r7, #31]
 8002760:	77bb      	strb	r3, [r7, #30]
 8002762:	e005      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8002764:	40021000 	.word	0x40021000
 8002768:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800276c:	7ffb      	ldrb	r3, [r7, #31]
 800276e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002770:	7dfb      	ldrb	r3, [r7, #23]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d105      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002776:	4b9c      	ldr	r3, [pc, #624]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277a:	4a9b      	ldr	r2, [pc, #620]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800277c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002780:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800278e:	4b96      	ldr	r3, [pc, #600]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002794:	f023 0203 	bic.w	r2, r3, #3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279c:	4992      	ldr	r1, [pc, #584]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027b0:	4b8d      	ldr	r3, [pc, #564]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b6:	f023 020c 	bic.w	r2, r3, #12
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027be:	498a      	ldr	r1, [pc, #552]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027d2:	4b85      	ldr	r3, [pc, #532]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e0:	4981      	ldr	r1, [pc, #516]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027f4:	4b7c      	ldr	r3, [pc, #496]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	4979      	ldr	r1, [pc, #484]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002816:	4b74      	ldr	r3, [pc, #464]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002824:	4970      	ldr	r1, [pc, #448]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002838:	4b6b      	ldr	r3, [pc, #428]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002846:	4968      	ldr	r1, [pc, #416]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800285a:	4b63      	ldr	r3, [pc, #396]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800285c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002860:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	495f      	ldr	r1, [pc, #380]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800287c:	4b5a      	ldr	r3, [pc, #360]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002882:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288a:	4957      	ldr	r1, [pc, #348]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800289e:	4b52      	ldr	r3, [pc, #328]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80028a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ac:	494e      	ldr	r1, [pc, #312]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d031      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028c8:	d00e      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80028ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028ce:	d814      	bhi.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d015      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80028d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028d8:	d10f      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028da:	4b43      	ldr	r3, [pc, #268]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	4a42      	ldr	r2, [pc, #264]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80028e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028e4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80028e6:	e00c      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3304      	adds	r3, #4
 80028ec:	2100      	movs	r1, #0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f97c 	bl	8002bec <RCCEx_PLLSAI1_Config>
 80028f4:	4603      	mov	r3, r0
 80028f6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80028f8:	e003      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	77fb      	strb	r3, [r7, #31]
        break;
 80028fe:	e000      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8002900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002902:	7ffb      	ldrb	r3, [r7, #31]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10b      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002908:	4b37      	ldr	r3, [pc, #220]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002916:	4934      	ldr	r1, [pc, #208]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800291e:	e001      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002920:	7ffb      	ldrb	r3, [r7, #31]
 8002922:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002930:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002936:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293e:	492a      	ldr	r1, [pc, #168]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002952:	4b25      	ldr	r3, [pc, #148]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002958:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002960:	4921      	ldr	r1, [pc, #132]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002974:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	4919      	ldr	r1, [pc, #100]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002998:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800299c:	f023 0203 	bic.w	r2, r3, #3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a4:	4910      	ldr	r1, [pc, #64]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d02b      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c6:	4908      	ldr	r1, [pc, #32]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029d6:	d109      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4a02      	ldr	r2, [pc, #8]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80029de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029e2:	60d3      	str	r3, [r2, #12]
 80029e4:	e014      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3304      	adds	r3, #4
 80029fa:	2101      	movs	r1, #1
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 f8f5 	bl	8002bec <RCCEx_PLLSAI1_Config>
 8002a02:	4603      	mov	r3, r0
 8002a04:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8002a06:	7ffb      	ldrb	r3, [r7, #31]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8002a0c:	7ffb      	ldrb	r3, [r7, #31]
 8002a0e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d04a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a24:	d108      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8002a26:	4b70      	ldr	r3, [pc, #448]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a2c:	4a6e      	ldr	r2, [pc, #440]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a32:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002a36:	e012      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002a38:	4b6b      	ldr	r3, [pc, #428]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a46:	4968      	ldr	r1, [pc, #416]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a4e:	4b66      	ldr	r3, [pc, #408]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a54:	4a64      	ldr	r2, [pc, #400]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a5a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a66:	d10d      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 f8bc 	bl	8002bec <RCCEx_PLLSAI1_Config>
 8002a74:	4603      	mov	r3, r0
 8002a76:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002a78:	7ffb      	ldrb	r3, [r7, #31]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d019      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8002a7e:	7ffb      	ldrb	r3, [r7, #31]
 8002a80:	77bb      	strb	r3, [r7, #30]
 8002a82:	e016      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a8e:	4b56      	ldr	r3, [pc, #344]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	4a55      	ldr	r2, [pc, #340]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a98:	60d3      	str	r3, [r2, #12]
 8002a9a:	e00a      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aa4:	d105      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002aa6:	4b50      	ldr	r3, [pc, #320]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	4a4f      	ldr	r2, [pc, #316]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d028      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002abe:	4b4a      	ldr	r3, [pc, #296]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002acc:	4946      	ldr	r1, [pc, #280]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002adc:	d106      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ade:	4b42      	ldr	r3, [pc, #264]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	4a41      	ldr	r2, [pc, #260]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae8:	60d3      	str	r3, [r2, #12]
 8002aea:	e011      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3304      	adds	r3, #4
 8002afa:	2101      	movs	r1, #1
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 f875 	bl	8002bec <RCCEx_PLLSAI1_Config>
 8002b02:	4603      	mov	r3, r0
 8002b04:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002b06:	7ffb      	ldrb	r3, [r7, #31]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8002b0c:	7ffb      	ldrb	r3, [r7, #31]
 8002b0e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d01e      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b1c:	4b32      	ldr	r3, [pc, #200]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b2c:	492e      	ldr	r1, [pc, #184]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b3e:	d10c      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3304      	adds	r3, #4
 8002b44:	2102      	movs	r1, #2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 f850 	bl	8002bec <RCCEx_PLLSAI1_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002b50:	7ffb      	ldrb	r3, [r7, #31]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8002b56:	7ffb      	ldrb	r3, [r7, #31]
 8002b58:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002b68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b6c:	f023 0204 	bic.w	r2, r3, #4
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b76:	491c      	ldr	r1, [pc, #112]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b8a:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002b8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b90:	f023 0218 	bic.w	r2, r3, #24
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	4913      	ldr	r1, [pc, #76]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d017      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002bae:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002bb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bbe:	490a      	ldr	r1, [pc, #40]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bd0:	d105      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002bd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bdc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002bde:	7fbb      	ldrb	r3, [r7, #30]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40021000 	.word	0x40021000

08002bec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d018      	beq.n	8002c34 <RCCEx_PLLSAI1_Config+0x48>
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d81f      	bhi.n	8002c46 <RCCEx_PLLSAI1_Config+0x5a>
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d002      	beq.n	8002c10 <RCCEx_PLLSAI1_Config+0x24>
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d009      	beq.n	8002c22 <RCCEx_PLLSAI1_Config+0x36>
 8002c0e:	e01a      	b.n	8002c46 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c10:	4b65      	ldr	r3, [pc, #404]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d117      	bne.n	8002c4c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c20:	e014      	b.n	8002c4c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c22:	4b61      	ldr	r3, [pc, #388]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d110      	bne.n	8002c50 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c32:	e00d      	b.n	8002c50 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8002c34:	4b5c      	ldr	r3, [pc, #368]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d109      	bne.n	8002c54 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c44:	e006      	b.n	8002c54 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      break;
 8002c4a:	e004      	b.n	8002c56 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002c4c:	bf00      	nop
 8002c4e:	e002      	b.n	8002c56 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002c50:	bf00      	nop
 8002c52:	e000      	b.n	8002c56 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002c54:	bf00      	nop
  }

  if (status == HAL_OK)
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f040 809f 	bne.w	8002d9c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c5e:	4b52      	ldr	r3, [pc, #328]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a51      	ldr	r2, [pc, #324]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c6a:	f7fd ffcd 	bl	8000c08 <HAL_GetTick>
 8002c6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c70:	e00f      	b.n	8002c92 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c72:	f7fd ffc9 	bl	8000c08 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d908      	bls.n	8002c92 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c80:	4b49      	ldr	r3, [pc, #292]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d009      	beq.n	8002ca0 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002c90:	e006      	b.n	8002ca0 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c92:	4b45      	ldr	r3, [pc, #276]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e9      	bne.n	8002c72 <RCCEx_PLLSAI1_Config+0x86>
 8002c9e:	e000      	b.n	8002ca2 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8002ca0:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d179      	bne.n	8002d9c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d116      	bne.n	8002cdc <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cae:	4b3e      	ldr	r3, [pc, #248]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002cb0:	691a      	ldr	r2, [r3, #16]
 8002cb2:	4b3e      	ldr	r3, [pc, #248]	; (8002dac <RCCEx_PLLSAI1_Config+0x1c0>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6892      	ldr	r2, [r2, #8]
 8002cba:	0211      	lsls	r1, r2, #8
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	68d2      	ldr	r2, [r2, #12]
 8002cc0:	06d2      	lsls	r2, r2, #27
 8002cc2:	4311      	orrs	r1, r2
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6852      	ldr	r2, [r2, #4]
 8002cc8:	3a01      	subs	r2, #1
 8002cca:	0112      	lsls	r2, r2, #4
 8002ccc:	4311      	orrs	r1, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	4934      	ldr	r1, [pc, #208]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	610b      	str	r3, [r1, #16]
 8002cda:	e033      	b.n	8002d44 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d118      	bne.n	8002d14 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ce2:	4b31      	ldr	r3, [pc, #196]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	4b32      	ldr	r3, [pc, #200]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1c4>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6892      	ldr	r2, [r2, #8]
 8002cee:	0211      	lsls	r1, r2, #8
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6912      	ldr	r2, [r2, #16]
 8002cf4:	0852      	lsrs	r2, r2, #1
 8002cf6:	3a01      	subs	r2, #1
 8002cf8:	0552      	lsls	r2, r2, #21
 8002cfa:	4311      	orrs	r1, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6852      	ldr	r2, [r2, #4]
 8002d00:	3a01      	subs	r2, #1
 8002d02:	0112      	lsls	r2, r2, #4
 8002d04:	4311      	orrs	r1, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	4926      	ldr	r1, [pc, #152]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	610b      	str	r3, [r1, #16]
 8002d12:	e017      	b.n	8002d44 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d14:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	4b26      	ldr	r3, [pc, #152]	; (8002db4 <RCCEx_PLLSAI1_Config+0x1c8>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6892      	ldr	r2, [r2, #8]
 8002d20:	0211      	lsls	r1, r2, #8
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6952      	ldr	r2, [r2, #20]
 8002d26:	0852      	lsrs	r2, r2, #1
 8002d28:	3a01      	subs	r2, #1
 8002d2a:	0652      	lsls	r2, r2, #25
 8002d2c:	4311      	orrs	r1, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6852      	ldr	r2, [r2, #4]
 8002d32:	3a01      	subs	r2, #1
 8002d34:	0112      	lsls	r2, r2, #4
 8002d36:	4311      	orrs	r1, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	491a      	ldr	r1, [pc, #104]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d44:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a17      	ldr	r2, [pc, #92]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002d4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d50:	f7fd ff5a 	bl	8000c08 <HAL_GetTick>
 8002d54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d56:	e00f      	b.n	8002d78 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d58:	f7fd ff56 	bl	8000c08 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d908      	bls.n	8002d78 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8002d76:	e006      	b.n	8002d86 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0e9      	beq.n	8002d58 <RCCEx_PLLSAI1_Config+0x16c>
 8002d84:	e000      	b.n	8002d88 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8002d86:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	4904      	ldr	r1, [pc, #16]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	07ff800c 	.word	0x07ff800c
 8002db0:	ff9f800c 	.word	0xff9f800c
 8002db4:	f9ff800c 	.word	0xf9ff800c

08002db8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d018      	beq.n	8002e00 <RCCEx_PLLSAI2_Config+0x48>
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d81f      	bhi.n	8002e12 <RCCEx_PLLSAI2_Config+0x5a>
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d002      	beq.n	8002ddc <RCCEx_PLLSAI2_Config+0x24>
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d009      	beq.n	8002dee <RCCEx_PLLSAI2_Config+0x36>
 8002dda:	e01a      	b.n	8002e12 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ddc:	4b4a      	ldr	r3, [pc, #296]	; (8002f08 <RCCEx_PLLSAI2_Config+0x150>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d117      	bne.n	8002e18 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dec:	e014      	b.n	8002e18 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dee:	4b46      	ldr	r3, [pc, #280]	; (8002f08 <RCCEx_PLLSAI2_Config+0x150>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d110      	bne.n	8002e1c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dfe:	e00d      	b.n	8002e1c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8002e00:	4b41      	ldr	r3, [pc, #260]	; (8002f08 <RCCEx_PLLSAI2_Config+0x150>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d109      	bne.n	8002e20 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e10:	e006      	b.n	8002e20 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
      break;
 8002e16:	e004      	b.n	8002e22 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8002e18:	bf00      	nop
 8002e1a:	e002      	b.n	8002e22 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8002e1c:	bf00      	nop
 8002e1e:	e000      	b.n	8002e22 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8002e20:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d169      	bne.n	8002efc <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e28:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <RCCEx_PLLSAI2_Config+0x150>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a36      	ldr	r2, [pc, #216]	; (8002f08 <RCCEx_PLLSAI2_Config+0x150>)
 8002e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e34:	f7fd fee8 	bl	8000c08 <HAL_GetTick>
 8002e38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e3a:	e00f      	b.n	8002e5c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e3c:	f7fd fee4 	bl	8000c08 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d908      	bls.n	8002e5c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e4a:	4b2f      	ldr	r3, [pc, #188]	; (8002f08 <RCCEx_PLLSAI2_Config+0x150>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002e5a:	e006      	b.n	8002e6a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e5c:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <RCCEx_PLLSAI2_Config+0x150>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e9      	bne.n	8002e3c <RCCEx_PLLSAI2_Config+0x84>
 8002e68:	e000      	b.n	8002e6c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8002e6a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d144      	bne.n	8002efc <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d115      	bne.n	8002ea4 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e78:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <RCCEx_PLLSAI2_Config+0x150>)
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <RCCEx_PLLSAI2_Config+0x154>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6892      	ldr	r2, [r2, #8]
 8002e84:	0211      	lsls	r1, r2, #8
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68d2      	ldr	r2, [r2, #12]
 8002e8a:	06d2      	lsls	r2, r2, #27
 8002e8c:	4311      	orrs	r1, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6852      	ldr	r2, [r2, #4]
 8002e92:	3a01      	subs	r2, #1
 8002e94:	0112      	lsls	r2, r2, #4
 8002e96:	4311      	orrs	r1, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	491a      	ldr	r1, [pc, #104]	; (8002f08 <RCCEx_PLLSAI2_Config+0x150>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ea4:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <RCCEx_PLLSAI2_Config+0x150>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a17      	ldr	r2, [pc, #92]	; (8002f08 <RCCEx_PLLSAI2_Config+0x150>)
 8002eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb0:	f7fd feaa 	bl	8000c08 <HAL_GetTick>
 8002eb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002eb6:	e00f      	b.n	8002ed8 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002eb8:	f7fd fea6 	bl	8000c08 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d908      	bls.n	8002ed8 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <RCCEx_PLLSAI2_Config+0x150>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d109      	bne.n	8002ee6 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8002ed6:	e006      	b.n	8002ee6 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <RCCEx_PLLSAI2_Config+0x150>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0e9      	beq.n	8002eb8 <RCCEx_PLLSAI2_Config+0x100>
 8002ee4:	e000      	b.n	8002ee8 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8002ee6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <RCCEx_PLLSAI2_Config+0x150>)
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	4904      	ldr	r1, [pc, #16]	; (8002f08 <RCCEx_PLLSAI2_Config+0x150>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	07ff800c 	.word	0x07ff800c

08002f10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e095      	b.n	800304e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d108      	bne.n	8002f3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f32:	d009      	beq.n	8002f48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	61da      	str	r2, [r3, #28]
 8002f3a:	e005      	b.n	8002f48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fd fbf4 	bl	8000750 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f88:	d902      	bls.n	8002f90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	e002      	b.n	8002f96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002f9e:	d007      	beq.n	8002fb0 <HAL_SPI_Init+0xa0>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fa8:	d002      	beq.n	8002fb0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	ea42 0103 	orr.w	r1, r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	0c1b      	lsrs	r3, r3, #16
 800300c:	f003 0204 	and.w	r2, r3, #4
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800302c:	ea42 0103 	orr.w	r1, r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b088      	sub	sp, #32
 800305a:	af00      	add	r7, sp, #0
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	4613      	mov	r3, r2
 8003064:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_SPI_Transmit+0x22>
 8003074:	2302      	movs	r3, #2
 8003076:	e158      	b.n	800332a <HAL_SPI_Transmit+0x2d4>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003080:	f7fd fdc2 	bl	8000c08 <HAL_GetTick>
 8003084:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b01      	cmp	r3, #1
 8003094:	d002      	beq.n	800309c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003096:	2302      	movs	r3, #2
 8003098:	77fb      	strb	r3, [r7, #31]
    goto error;
 800309a:	e13d      	b.n	8003318 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_SPI_Transmit+0x52>
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d102      	bne.n	80030ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030ac:	e134      	b.n	8003318 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2203      	movs	r2, #3
 80030b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	88fa      	ldrh	r2, [r7, #6]
 80030c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	88fa      	ldrh	r2, [r7, #6]
 80030cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f8:	d10f      	bne.n	800311a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003108:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003118:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003124:	2b40      	cmp	r3, #64	; 0x40
 8003126:	d007      	beq.n	8003138 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003136:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003140:	d94b      	bls.n	80031da <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_SPI_Transmit+0xfa>
 800314a:	8afb      	ldrh	r3, [r7, #22]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d13e      	bne.n	80031ce <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003154:	881a      	ldrh	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003160:	1c9a      	adds	r2, r3, #2
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003174:	e02b      	b.n	80031ce <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b02      	cmp	r3, #2
 8003182:	d112      	bne.n	80031aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003188:	881a      	ldrh	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003194:	1c9a      	adds	r2, r3, #2
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031a8:	e011      	b.n	80031ce <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031aa:	f7fd fd2d 	bl	8000c08 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d803      	bhi.n	80031c2 <HAL_SPI_Transmit+0x16c>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c0:	d102      	bne.n	80031c8 <HAL_SPI_Transmit+0x172>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d102      	bne.n	80031ce <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031cc:	e0a4      	b.n	8003318 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1ce      	bne.n	8003176 <HAL_SPI_Transmit+0x120>
 80031d8:	e07c      	b.n	80032d4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_SPI_Transmit+0x192>
 80031e2:	8afb      	ldrh	r3, [r7, #22]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d170      	bne.n	80032ca <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d912      	bls.n	8003218 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	881a      	ldrh	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	1c9a      	adds	r2, r3, #2
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b02      	subs	r3, #2
 8003210:	b29a      	uxth	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003216:	e058      	b.n	80032ca <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	330c      	adds	r3, #12
 8003222:	7812      	ldrb	r2, [r2, #0]
 8003224:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003234:	b29b      	uxth	r3, r3
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800323e:	e044      	b.n	80032ca <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b02      	cmp	r3, #2
 800324c:	d12b      	bne.n	80032a6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b01      	cmp	r3, #1
 8003256:	d912      	bls.n	800327e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	881a      	ldrh	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003268:	1c9a      	adds	r2, r3, #2
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003272:	b29b      	uxth	r3, r3
 8003274:	3b02      	subs	r3, #2
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800327c:	e025      	b.n	80032ca <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	330c      	adds	r3, #12
 8003288:	7812      	ldrb	r2, [r2, #0]
 800328a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032a4:	e011      	b.n	80032ca <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032a6:	f7fd fcaf 	bl	8000c08 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d803      	bhi.n	80032be <HAL_SPI_Transmit+0x268>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d102      	bne.n	80032c4 <HAL_SPI_Transmit+0x26e>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d102      	bne.n	80032ca <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032c8:	e026      	b.n	8003318 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1b5      	bne.n	8003240 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	6839      	ldr	r1, [r7, #0]
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 fce3 	bl	8003ca4 <SPI_EndRxTxTransaction>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10a      	bne.n	8003308 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032f2:	2300      	movs	r3, #0
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	77fb      	strb	r3, [r7, #31]
 8003314:	e000      	b.n	8003318 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003316:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003328:	7ffb      	ldrb	r3, [r7, #31]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3720      	adds	r7, #32
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b088      	sub	sp, #32
 8003336:	af02      	add	r7, sp, #8
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	603b      	str	r3, [r7, #0]
 800333e:	4613      	mov	r3, r2
 8003340:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800334e:	d112      	bne.n	8003376 <HAL_SPI_Receive+0x44>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10e      	bne.n	8003376 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2204      	movs	r2, #4
 800335c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003360:	88fa      	ldrh	r2, [r7, #6]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	4613      	mov	r3, r2
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f910 	bl	8003592 <HAL_SPI_TransmitReceive>
 8003372:	4603      	mov	r3, r0
 8003374:	e109      	b.n	800358a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_SPI_Receive+0x52>
 8003380:	2302      	movs	r3, #2
 8003382:	e102      	b.n	800358a <HAL_SPI_Receive+0x258>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800338c:	f7fd fc3c 	bl	8000c08 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b01      	cmp	r3, #1
 800339c:	d002      	beq.n	80033a4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800339e:	2302      	movs	r3, #2
 80033a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033a2:	e0e9      	b.n	8003578 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_SPI_Receive+0x7e>
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d102      	bne.n	80033b6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033b4:	e0e0      	b.n	8003578 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2204      	movs	r2, #4
 80033ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	88fa      	ldrh	r2, [r7, #6]
 80033ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	88fa      	ldrh	r2, [r7, #6]
 80033d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003400:	d908      	bls.n	8003414 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	e007      	b.n	8003424 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003422:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800342c:	d10f      	bne.n	800344e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800344c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003458:	2b40      	cmp	r3, #64	; 0x40
 800345a:	d007      	beq.n	800346c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800346a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003474:	d867      	bhi.n	8003546 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003476:	e030      	b.n	80034da <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b01      	cmp	r3, #1
 8003484:	d117      	bne.n	80034b6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f103 020c 	add.w	r2, r3, #12
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	7812      	ldrb	r2, [r2, #0]
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80034b4:	e011      	b.n	80034da <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034b6:	f7fd fba7 	bl	8000c08 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d803      	bhi.n	80034ce <HAL_SPI_Receive+0x19c>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034cc:	d102      	bne.n	80034d4 <HAL_SPI_Receive+0x1a2>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80034d8:	e04e      	b.n	8003578 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1c8      	bne.n	8003478 <HAL_SPI_Receive+0x146>
 80034e6:	e034      	b.n	8003552 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d115      	bne.n	8003522 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	b292      	uxth	r2, r2
 8003502:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	1c9a      	adds	r2, r3, #2
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003520:	e011      	b.n	8003546 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003522:	f7fd fb71 	bl	8000c08 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d803      	bhi.n	800353a <HAL_SPI_Receive+0x208>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d102      	bne.n	8003540 <HAL_SPI_Receive+0x20e>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d102      	bne.n	8003546 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003544:	e018      	b.n	8003578 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1ca      	bne.n	80034e8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	6839      	ldr	r1, [r7, #0]
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fb4c 	bl	8003bf4 <SPI_EndRxTransaction>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	75fb      	strb	r3, [r7, #23]
 8003574:	e000      	b.n	8003578 <HAL_SPI_Receive+0x246>
  }

error :
 8003576:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003588:	7dfb      	ldrb	r3, [r7, #23]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b08a      	sub	sp, #40	; 0x28
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035a0:	2301      	movs	r3, #1
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_SPI_TransmitReceive+0x26>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e1fb      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x41e>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035c0:	f7fd fb22 	bl	8000c08 <HAL_GetTick>
 80035c4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035cc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80035d4:	887b      	ldrh	r3, [r7, #2]
 80035d6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80035d8:	887b      	ldrh	r3, [r7, #2]
 80035da:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035dc:	7efb      	ldrb	r3, [r7, #27]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d00e      	beq.n	8003600 <HAL_SPI_TransmitReceive+0x6e>
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035e8:	d106      	bne.n	80035f8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d102      	bne.n	80035f8 <HAL_SPI_TransmitReceive+0x66>
 80035f2:	7efb      	ldrb	r3, [r7, #27]
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d003      	beq.n	8003600 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80035f8:	2302      	movs	r3, #2
 80035fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80035fe:	e1cd      	b.n	800399c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_SPI_TransmitReceive+0x80>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_SPI_TransmitReceive+0x80>
 800360c:	887b      	ldrh	r3, [r7, #2]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d103      	bne.n	800361a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003618:	e1c0      	b.n	800399c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b04      	cmp	r3, #4
 8003624:	d003      	beq.n	800362e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2205      	movs	r2, #5
 800362a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	887a      	ldrh	r2, [r7, #2]
 800363e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	887a      	ldrh	r2, [r7, #2]
 8003646:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	887a      	ldrh	r2, [r7, #2]
 800365a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003670:	d802      	bhi.n	8003678 <HAL_SPI_TransmitReceive+0xe6>
 8003672:	8a3b      	ldrh	r3, [r7, #16]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d908      	bls.n	800368a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003686:	605a      	str	r2, [r3, #4]
 8003688:	e007      	b.n	800369a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003698:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	d007      	beq.n	80036b8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036c0:	d97c      	bls.n	80037bc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_SPI_TransmitReceive+0x13e>
 80036ca:	8a7b      	ldrh	r3, [r7, #18]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d169      	bne.n	80037a4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	881a      	ldrh	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	1c9a      	adds	r2, r3, #2
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036f4:	e056      	b.n	80037a4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b02      	cmp	r3, #2
 8003702:	d11b      	bne.n	800373c <HAL_SPI_TransmitReceive+0x1aa>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d016      	beq.n	800373c <HAL_SPI_TransmitReceive+0x1aa>
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	2b01      	cmp	r3, #1
 8003712:	d113      	bne.n	800373c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003718:	881a      	ldrh	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	1c9a      	adds	r2, r3, #2
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b01      	cmp	r3, #1
 8003748:	d11c      	bne.n	8003784 <HAL_SPI_TransmitReceive+0x1f2>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d016      	beq.n	8003784 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	b292      	uxth	r2, r2
 8003762:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	1c9a      	adds	r2, r3, #2
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003780:	2301      	movs	r3, #1
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003784:	f7fd fa40 	bl	8000c08 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003790:	429a      	cmp	r2, r3
 8003792:	d807      	bhi.n	80037a4 <HAL_SPI_TransmitReceive+0x212>
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379a:	d003      	beq.n	80037a4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80037a2:	e0fb      	b.n	800399c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1a3      	bne.n	80036f6 <HAL_SPI_TransmitReceive+0x164>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d19d      	bne.n	80036f6 <HAL_SPI_TransmitReceive+0x164>
 80037ba:	e0df      	b.n	800397c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_SPI_TransmitReceive+0x23a>
 80037c4:	8a7b      	ldrh	r3, [r7, #18]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	f040 80cb 	bne.w	8003962 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d912      	bls.n	80037fc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	881a      	ldrh	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e6:	1c9a      	adds	r2, r3, #2
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b02      	subs	r3, #2
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037fa:	e0b2      	b.n	8003962 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	330c      	adds	r3, #12
 8003806:	7812      	ldrb	r2, [r2, #0]
 8003808:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003822:	e09e      	b.n	8003962 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b02      	cmp	r3, #2
 8003830:	d134      	bne.n	800389c <HAL_SPI_TransmitReceive+0x30a>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d02f      	beq.n	800389c <HAL_SPI_TransmitReceive+0x30a>
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	2b01      	cmp	r3, #1
 8003840:	d12c      	bne.n	800389c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b01      	cmp	r3, #1
 800384a:	d912      	bls.n	8003872 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	881a      	ldrh	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	1c9a      	adds	r2, r3, #2
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b02      	subs	r3, #2
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003870:	e012      	b.n	8003898 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	330c      	adds	r3, #12
 800387c:	7812      	ldrb	r2, [r2, #0]
 800387e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d148      	bne.n	800393c <HAL_SPI_TransmitReceive+0x3aa>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d042      	beq.n	800393c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d923      	bls.n	800390a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	b292      	uxth	r2, r2
 80038ce:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	1c9a      	adds	r2, r3, #2
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b02      	subs	r3, #2
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d81f      	bhi.n	8003938 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003906:	605a      	str	r2, [r3, #4]
 8003908:	e016      	b.n	8003938 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f103 020c 	add.w	r2, r3, #12
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	7812      	ldrb	r2, [r2, #0]
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003938:	2301      	movs	r3, #1
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800393c:	f7fd f964 	bl	8000c08 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003948:	429a      	cmp	r2, r3
 800394a:	d803      	bhi.n	8003954 <HAL_SPI_TransmitReceive+0x3c2>
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003952:	d102      	bne.n	800395a <HAL_SPI_TransmitReceive+0x3c8>
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	2b00      	cmp	r3, #0
 8003958:	d103      	bne.n	8003962 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003960:	e01c      	b.n	800399c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	f47f af5b 	bne.w	8003824 <HAL_SPI_TransmitReceive+0x292>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	f47f af54 	bne.w	8003824 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800397c:	69fa      	ldr	r2, [r7, #28]
 800397e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f98f 	bl	8003ca4 <SPI_EndRxTxTransaction>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d006      	beq.n	800399a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	661a      	str	r2, [r3, #96]	; 0x60
 8003998:	e000      	b.n	800399c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800399a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3728      	adds	r7, #40	; 0x28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039c8:	f7fd f91e 	bl	8000c08 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	4413      	add	r3, r2
 80039d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039d8:	f7fd f916 	bl	8000c08 <HAL_GetTick>
 80039dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039de:	4b39      	ldr	r3, [pc, #228]	; (8003ac4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	015b      	lsls	r3, r3, #5
 80039e4:	0d1b      	lsrs	r3, r3, #20
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ee:	e054      	b.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f6:	d050      	beq.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039f8:	f7fd f906 	bl	8000c08 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d902      	bls.n	8003a0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d13d      	bne.n	8003a8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a26:	d111      	bne.n	8003a4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a30:	d004      	beq.n	8003a3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3a:	d107      	bne.n	8003a4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a54:	d10f      	bne.n	8003a76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e017      	b.n	8003aba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	bf0c      	ite	eq
 8003aaa:	2301      	moveq	r3, #1
 8003aac:	2300      	movne	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d19b      	bne.n	80039f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3720      	adds	r7, #32
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000000 	.word	0x20000000

08003ac8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	; 0x28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ada:	f7fd f895 	bl	8000c08 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003aea:	f7fd f88d 	bl	8000c08 <HAL_GetTick>
 8003aee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003af8:	4b3d      	ldr	r3, [pc, #244]	; (8003bf0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	00da      	lsls	r2, r3, #3
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	0d1b      	lsrs	r3, r3, #20
 8003b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b10:	e060      	b.n	8003bd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b18:	d107      	bne.n	8003b2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d104      	bne.n	8003b2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d050      	beq.n	8003bd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b32:	f7fd f869 	bl	8000c08 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d902      	bls.n	8003b48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d13d      	bne.n	8003bc4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b60:	d111      	bne.n	8003b86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b6a:	d004      	beq.n	8003b76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b74:	d107      	bne.n	8003b86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b8e:	d10f      	bne.n	8003bb0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e010      	b.n	8003be6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d196      	bne.n	8003b12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3728      	adds	r7, #40	; 0x28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000000 	.word	0x20000000

08003bf4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c08:	d111      	bne.n	8003c2e <SPI_EndRxTransaction+0x3a>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c12:	d004      	beq.n	8003c1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1c:	d107      	bne.n	8003c2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c2c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2200      	movs	r2, #0
 8003c36:	2180      	movs	r1, #128	; 0x80
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f7ff febd 	bl	80039b8 <SPI_WaitFlagStateUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c48:	f043 0220 	orr.w	r2, r3, #32
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e023      	b.n	8003c9c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c5c:	d11d      	bne.n	8003c9a <SPI_EndRxTransaction+0xa6>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c66:	d004      	beq.n	8003c72 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c70:	d113      	bne.n	8003c9a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f7ff ff22 	bl	8003ac8 <SPI_WaitFifoStateUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8e:	f043 0220 	orr.w	r2, r3, #32
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e000      	b.n	8003c9c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f7ff ff03 	bl	8003ac8 <SPI_WaitFifoStateUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d007      	beq.n	8003cd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ccc:	f043 0220 	orr.w	r2, r3, #32
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e027      	b.n	8003d28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2180      	movs	r1, #128	; 0x80
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f7ff fe68 	bl	80039b8 <SPI_WaitFlagStateUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d007      	beq.n	8003cfe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf2:	f043 0220 	orr.w	r2, r3, #32
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e014      	b.n	8003d28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f7ff fedc 	bl	8003ac8 <SPI_WaitFifoStateUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d007      	beq.n	8003d26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d1a:	f043 0220 	orr.w	r2, r3, #32
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e000      	b.n	8003d28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d38:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003d3c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	4013      	ands	r3, r2
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d66:	b084      	sub	sp, #16
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	f107 0014 	add.w	r0, r7, #20
 8003d74:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	b004      	add	sp, #16
 8003da6:	4770      	bx	lr

08003da8 <__libc_init_array>:
 8003da8:	b570      	push	{r4, r5, r6, lr}
 8003daa:	4d0d      	ldr	r5, [pc, #52]	; (8003de0 <__libc_init_array+0x38>)
 8003dac:	2600      	movs	r6, #0
 8003dae:	4c0d      	ldr	r4, [pc, #52]	; (8003de4 <__libc_init_array+0x3c>)
 8003db0:	1b64      	subs	r4, r4, r5
 8003db2:	10a4      	asrs	r4, r4, #2
 8003db4:	42a6      	cmp	r6, r4
 8003db6:	d109      	bne.n	8003dcc <__libc_init_array+0x24>
 8003db8:	4d0b      	ldr	r5, [pc, #44]	; (8003de8 <__libc_init_array+0x40>)
 8003dba:	2600      	movs	r6, #0
 8003dbc:	4c0b      	ldr	r4, [pc, #44]	; (8003dec <__libc_init_array+0x44>)
 8003dbe:	f000 f81f 	bl	8003e00 <_init>
 8003dc2:	1b64      	subs	r4, r4, r5
 8003dc4:	10a4      	asrs	r4, r4, #2
 8003dc6:	42a6      	cmp	r6, r4
 8003dc8:	d105      	bne.n	8003dd6 <__libc_init_array+0x2e>
 8003dca:	bd70      	pop	{r4, r5, r6, pc}
 8003dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd0:	3601      	adds	r6, #1
 8003dd2:	4798      	blx	r3
 8003dd4:	e7ee      	b.n	8003db4 <__libc_init_array+0xc>
 8003dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dda:	3601      	adds	r6, #1
 8003ddc:	4798      	blx	r3
 8003dde:	e7f2      	b.n	8003dc6 <__libc_init_array+0x1e>
 8003de0:	08003e70 	.word	0x08003e70
 8003de4:	08003e70 	.word	0x08003e70
 8003de8:	08003e70 	.word	0x08003e70
 8003dec:	08003e74 	.word	0x08003e74

08003df0 <memset>:
 8003df0:	4402      	add	r2, r0
 8003df2:	4603      	mov	r3, r0
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d100      	bne.n	8003dfa <memset+0xa>
 8003df8:	4770      	bx	lr
 8003dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8003dfe:	e7f9      	b.n	8003df4 <memset+0x4>

08003e00 <_init>:
 8003e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e02:	bf00      	nop
 8003e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e06:	bc08      	pop	{r3}
 8003e08:	469e      	mov	lr, r3
 8003e0a:	4770      	bx	lr

08003e0c <_fini>:
 8003e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0e:	bf00      	nop
 8003e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e12:	bc08      	pop	{r3}
 8003e14:	469e      	mov	lr, r3
 8003e16:	4770      	bx	lr
