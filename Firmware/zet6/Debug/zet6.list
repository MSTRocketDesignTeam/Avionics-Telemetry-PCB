
zet6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b2c  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003d20  08003d20  00013d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d78  08003d78  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d78  08003d78  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d78  08003d78  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d78  08003d78  00013d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  2000000c  08003d8c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08003d8c  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e064  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b2  00000000  00000000  0002e0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00030258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  00030ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029074  00000000  00000000  00031a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da1b  00000000  00000000  0005aa74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102f64  00000000  00000000  0006848f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b3f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c4  00000000  00000000  0016b444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08003d08 	.word	0x08003d08

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08003d08 	.word	0x08003d08

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b088      	sub	sp, #32
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char spi_buf[20] = {0};
 800023a:	2300      	movs	r3, #0
 800023c:	60fb      	str	r3, [r7, #12]
 800023e:	f107 0310 	add.w	r3, r7, #16
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024c:	f000 fc19 	bl	8000a82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000250:	f000 f862 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000254:	f000 f968 	bl	8000528 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000258:	f000 f8ae 	bl	80003b8 <MX_ICACHE_Init>
  MX_USB_PCD_Init();
 800025c:	f000 f93c 	bl	80004d8 <MX_USB_PCD_Init>
  MX_SPI2_Init();
 8000260:	f000 f8be 	bl	80003e0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000264:	f000 f8fa 	bl	800045c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_7, GPIO_PIN_SET);
 8000268:	2201      	movs	r2, #1
 800026a:	2180      	movs	r1, #128	; 0x80
 800026c:	4826      	ldr	r0, [pc, #152]	; (8000308 <main+0xd4>)
 800026e:	f000 ff0f 	bl	8001090 <HAL_GPIO_WritePin>

  //Powerup transceiver chip
  uint8_t command[8] = {0x02,0x01,0x00,0x01,0xC9,0xC3,0x80};
 8000272:	4a26      	ldr	r2, [pc, #152]	; (800030c <main+0xd8>)
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	e892 0003 	ldmia.w	r2, {r0, r1}
 800027a:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0, GPIO_PIN_RESET);
 800027e:	2200      	movs	r2, #0
 8000280:	2101      	movs	r1, #1
 8000282:	4823      	ldr	r0, [pc, #140]	; (8000310 <main+0xdc>)
 8000284:	f000 ff04 	bl	8001090 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2,(uint8_t*)&command,7,100);
 8000288:	1d39      	adds	r1, r7, #4
 800028a:	2364      	movs	r3, #100	; 0x64
 800028c:	2207      	movs	r2, #7
 800028e:	4821      	ldr	r0, [pc, #132]	; (8000314 <main+0xe0>)
 8000290:	f002 fe65 	bl	8002f5e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0, GPIO_PIN_SET);
 8000294:	2201      	movs	r2, #1
 8000296:	2101      	movs	r1, #1
 8000298:	481d      	ldr	r0, [pc, #116]	; (8000310 <main+0xdc>)
 800029a:	f000 fef9 	bl	8001090 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2101      	movs	r1, #1
 80002a2:	481b      	ldr	r0, [pc, #108]	; (8000310 <main+0xdc>)
 80002a4:	f000 fef4 	bl	8001090 <HAL_GPIO_WritePin>
  HAL_SPI_Receive(&hspi2, (uint8_t*)spi_buf,1,100);
 80002a8:	f107 010c 	add.w	r1, r7, #12
 80002ac:	2364      	movs	r3, #100	; 0x64
 80002ae:	2201      	movs	r2, #1
 80002b0:	4818      	ldr	r0, [pc, #96]	; (8000314 <main+0xe0>)
 80002b2:	f002 ffc2 	bl	800323a <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0, GPIO_PIN_SET);
 80002b6:	2201      	movs	r2, #1
 80002b8:	2101      	movs	r1, #1
 80002ba:	4815      	ldr	r0, [pc, #84]	; (8000310 <main+0xdc>)
 80002bc:	f000 fee8 	bl	8001090 <HAL_GPIO_WritePin>

  //Check transceiver is on
  command[0] = 0x01;
 80002c0:	2301      	movs	r3, #1
 80002c2:	713b      	strb	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0, GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2101      	movs	r1, #1
 80002c8:	4811      	ldr	r0, [pc, #68]	; (8000310 <main+0xdc>)
 80002ca:	f000 fee1 	bl	8001090 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2,(uint8_t*)&command,1,100);
 80002ce:	1d39      	adds	r1, r7, #4
 80002d0:	2364      	movs	r3, #100	; 0x64
 80002d2:	2201      	movs	r2, #1
 80002d4:	480f      	ldr	r0, [pc, #60]	; (8000314 <main+0xe0>)
 80002d6:	f002 fe42 	bl	8002f5e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0, GPIO_PIN_SET);
 80002da:	2201      	movs	r2, #1
 80002dc:	2101      	movs	r1, #1
 80002de:	480c      	ldr	r0, [pc, #48]	; (8000310 <main+0xdc>)
 80002e0:	f000 fed6 	bl	8001090 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0, GPIO_PIN_RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2101      	movs	r1, #1
 80002e8:	4809      	ldr	r0, [pc, #36]	; (8000310 <main+0xdc>)
 80002ea:	f000 fed1 	bl	8001090 <HAL_GPIO_WritePin>
  HAL_SPI_Receive(&hspi2, (uint8_t*)spi_buf,9,100);
 80002ee:	f107 010c 	add.w	r1, r7, #12
 80002f2:	2364      	movs	r3, #100	; 0x64
 80002f4:	2209      	movs	r2, #9
 80002f6:	4807      	ldr	r0, [pc, #28]	; (8000314 <main+0xe0>)
 80002f8:	f002 ff9f 	bl	800323a <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0, GPIO_PIN_SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2101      	movs	r1, #1
 8000300:	4803      	ldr	r0, [pc, #12]	; (8000310 <main+0xdc>)
 8000302:	f000 fec5 	bl	8001090 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000306:	e7fe      	b.n	8000306 <main+0xd2>
 8000308:	42021000 	.word	0x42021000
 800030c:	08003d20 	.word	0x08003d20
 8000310:	42020c00 	.word	0x42020c00
 8000314:	20000028 	.word	0x20000028

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b098      	sub	sp, #96	; 0x60
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0318 	add.w	r3, r7, #24
 8000322:	2248      	movs	r2, #72	; 0x48
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f003 fce6 	bl	8003cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
 8000338:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800033a:	2000      	movs	r0, #0
 800033c:	f001 f844 	bl	80013c8 <HAL_PWREx_ControlVoltageScaling>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000346:	f000 f97b 	bl	8000640 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800034a:	2321      	movs	r3, #33	; 0x21
 800034c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800034e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000352:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000354:	2301      	movs	r3, #1
 8000356:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000358:	2302      	movs	r3, #2
 800035a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800035c:	2303      	movs	r3, #3
 800035e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000360:	2308      	movs	r3, #8
 8000362:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000364:	2337      	movs	r3, #55	; 0x37
 8000366:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000368:	2307      	movs	r3, #7
 800036a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800036c:	2302      	movs	r3, #2
 800036e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000370:	2302      	movs	r3, #2
 8000372:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000374:	f107 0318 	add.w	r3, r7, #24
 8000378:	4618      	mov	r0, r3
 800037a:	f001 f8a5 	bl	80014c8 <HAL_RCC_OscConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000384:	f000 f95c 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000388:	230f      	movs	r3, #15
 800038a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038c:	2303      	movs	r3, #3
 800038e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2105      	movs	r1, #5
 80003a0:	4618      	mov	r0, r3
 80003a2:	f001 fd67 	bl	8001e74 <HAL_RCC_ClockConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80003ac:	f000 f948 	bl	8000640 <Error_Handler>
  }
}
 80003b0:	bf00      	nop
 80003b2:	3760      	adds	r7, #96	; 0x60
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80003bc:	2000      	movs	r0, #0
 80003be:	f000 fe7f 	bl	80010c0 <HAL_ICACHE_ConfigAssociativityMode>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80003c8:	f000 f93a 	bl	8000640 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80003cc:	f000 fe98 	bl	8001100 <HAL_ICACHE_Enable>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80003d6:	f000 f933 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003e4:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <MX_SPI2_Init+0x74>)
 80003e6:	4a1c      	ldr	r2, [pc, #112]	; (8000458 <MX_SPI2_Init+0x78>)
 80003e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003ea:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <MX_SPI2_Init+0x74>)
 80003ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003f2:	4b18      	ldr	r3, [pc, #96]	; (8000454 <MX_SPI2_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003f8:	4b16      	ldr	r3, [pc, #88]	; (8000454 <MX_SPI2_Init+0x74>)
 80003fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80003fe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000400:	4b14      	ldr	r3, [pc, #80]	; (8000454 <MX_SPI2_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000406:	4b13      	ldr	r3, [pc, #76]	; (8000454 <MX_SPI2_Init+0x74>)
 8000408:	2200      	movs	r2, #0
 800040a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <MX_SPI2_Init+0x74>)
 800040e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000412:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000414:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <MX_SPI2_Init+0x74>)
 8000416:	2230      	movs	r2, #48	; 0x30
 8000418:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <MX_SPI2_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <MX_SPI2_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <MX_SPI2_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <MX_SPI2_Init+0x74>)
 800042e:	2207      	movs	r2, #7
 8000430:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000432:	4b08      	ldr	r3, [pc, #32]	; (8000454 <MX_SPI2_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <MX_SPI2_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800043e:	4805      	ldr	r0, [pc, #20]	; (8000454 <MX_SPI2_Init+0x74>)
 8000440:	f002 fcea 	bl	8002e18 <HAL_SPI_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800044a:	f000 f8f9 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000028 	.word	0x20000028
 8000458:	40003800 	.word	0x40003800

0800045c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <MX_SPI3_Init+0x74>)
 8000462:	4a1c      	ldr	r2, [pc, #112]	; (80004d4 <MX_SPI3_Init+0x78>)
 8000464:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000466:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <MX_SPI3_Init+0x74>)
 8000468:	f44f 7282 	mov.w	r2, #260	; 0x104
 800046c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <MX_SPI3_Init+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000474:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <MX_SPI3_Init+0x74>)
 8000476:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800047a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800047c:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <MX_SPI3_Init+0x74>)
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000482:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <MX_SPI3_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_SPI3_Init+0x74>)
 800048a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800048e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_SPI3_Init+0x74>)
 8000492:	2228      	movs	r2, #40	; 0x28
 8000494:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_SPI3_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_SPI3_Init+0x74>)
 800049e:	2200      	movs	r2, #0
 80004a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <MX_SPI3_Init+0x74>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_SPI3_Init+0x74>)
 80004aa:	2207      	movs	r2, #7
 80004ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <MX_SPI3_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_SPI3_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_SPI3_Init+0x74>)
 80004bc:	f002 fcac 	bl	8002e18 <HAL_SPI_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80004c6:	f000 f8bb 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	2000008c 	.word	0x2000008c
 80004d4:	40003c00 	.word	0x40003c00

080004d8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80004dc:	4b10      	ldr	r3, [pc, #64]	; (8000520 <MX_USB_PCD_Init+0x48>)
 80004de:	4a11      	ldr	r2, [pc, #68]	; (8000524 <MX_USB_PCD_Init+0x4c>)
 80004e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80004e2:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <MX_USB_PCD_Init+0x48>)
 80004e4:	2208      	movs	r2, #8
 80004e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80004e8:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <MX_USB_PCD_Init+0x48>)
 80004ea:	2202      	movs	r2, #2
 80004ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <MX_USB_PCD_Init+0x48>)
 80004f0:	2202      	movs	r2, #2
 80004f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80004f4:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <MX_USB_PCD_Init+0x48>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_USB_PCD_Init+0x48>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <MX_USB_PCD_Init+0x48>)
 8000502:	2200      	movs	r2, #0
 8000504:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000506:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_USB_PCD_Init+0x48>)
 8000508:	2200      	movs	r2, #0
 800050a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800050c:	4804      	ldr	r0, [pc, #16]	; (8000520 <MX_USB_PCD_Init+0x48>)
 800050e:	f000 fe49 	bl	80011a4 <HAL_PCD_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000518:	f000 f892 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}
 8000520:	200000f0 	.word	0x200000f0
 8000524:	4000d400 	.word	0x4000d400

08000528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08c      	sub	sp, #48	; 0x30
 800052c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 031c 	add.w	r3, r7, #28
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053e:	4b3d      	ldr	r3, [pc, #244]	; (8000634 <MX_GPIO_Init+0x10c>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a3c      	ldr	r2, [pc, #240]	; (8000634 <MX_GPIO_Init+0x10c>)
 8000544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b3a      	ldr	r3, [pc, #232]	; (8000634 <MX_GPIO_Init+0x10c>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000552:	61bb      	str	r3, [r7, #24]
 8000554:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000556:	4b37      	ldr	r3, [pc, #220]	; (8000634 <MX_GPIO_Init+0x10c>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a36      	ldr	r2, [pc, #216]	; (8000634 <MX_GPIO_Init+0x10c>)
 800055c:	f043 0310 	orr.w	r3, r3, #16
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b34      	ldr	r3, [pc, #208]	; (8000634 <MX_GPIO_Init+0x10c>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0310 	and.w	r3, r3, #16
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b31      	ldr	r3, [pc, #196]	; (8000634 <MX_GPIO_Init+0x10c>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	4a30      	ldr	r2, [pc, #192]	; (8000634 <MX_GPIO_Init+0x10c>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057a:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <MX_GPIO_Init+0x10c>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000586:	4b2b      	ldr	r3, [pc, #172]	; (8000634 <MX_GPIO_Init+0x10c>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	4a2a      	ldr	r2, [pc, #168]	; (8000634 <MX_GPIO_Init+0x10c>)
 800058c:	f043 0308 	orr.w	r3, r3, #8
 8000590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000592:	4b28      	ldr	r3, [pc, #160]	; (8000634 <MX_GPIO_Init+0x10c>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	f003 0308 	and.w	r3, r3, #8
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b25      	ldr	r3, [pc, #148]	; (8000634 <MX_GPIO_Init+0x10c>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	4a24      	ldr	r2, [pc, #144]	; (8000634 <MX_GPIO_Init+0x10c>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005aa:	4b22      	ldr	r3, [pc, #136]	; (8000634 <MX_GPIO_Init+0x10c>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <MX_GPIO_Init+0x10c>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	4a1e      	ldr	r2, [pc, #120]	; (8000634 <MX_GPIO_Init+0x10c>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c2:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <MX_GPIO_Init+0x10c>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 80005d4:	4818      	ldr	r0, [pc, #96]	; (8000638 <MX_GPIO_Init+0x110>)
 80005d6:	f000 fd5b 	bl	8001090 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e0:	4816      	ldr	r0, [pc, #88]	; (800063c <MX_GPIO_Init+0x114>)
 80005e2:	f000 fd55 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2101      	movs	r1, #1
 80005ea:	4814      	ldr	r0, [pc, #80]	; (800063c <MX_GPIO_Init+0x114>)
 80005ec:	f000 fd50 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80005f0:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 80005f4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	2300      	movs	r3, #0
 8000600:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	4619      	mov	r1, r3
 8000608:	480b      	ldr	r0, [pc, #44]	; (8000638 <MX_GPIO_Init+0x110>)
 800060a:	f000 fbc1 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_0;
 800060e:	f240 1301 	movw	r3, #257	; 0x101
 8000612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	2301      	movs	r3, #1
 8000616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2300      	movs	r3, #0
 800061e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000620:	f107 031c 	add.w	r3, r7, #28
 8000624:	4619      	mov	r1, r3
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_GPIO_Init+0x114>)
 8000628:	f000 fbb2 	bl	8000d90 <HAL_GPIO_Init>

}
 800062c:	bf00      	nop
 800062e:	3730      	adds	r7, #48	; 0x30
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40021000 	.word	0x40021000
 8000638:	42021000 	.word	0x42021000
 800063c:	42020c00 	.word	0x42020c00

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	e7fe      	b.n	8000648 <Error_Handler+0x8>
	...

0800064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <HAL_MspInit+0x50>)
 8000654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000656:	4a11      	ldr	r2, [pc, #68]	; (800069c <HAL_MspInit+0x50>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6613      	str	r3, [r2, #96]	; 0x60
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <HAL_MspInit+0x50>)
 8000660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <HAL_MspInit+0x50>)
 800066c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800066e:	4a0b      	ldr	r2, [pc, #44]	; (800069c <HAL_MspInit+0x50>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000674:	6593      	str	r3, [r2, #88]	; 0x58
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <HAL_MspInit+0x50>)
 8000678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* ICACHE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ICACHE_IRQn, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	206b      	movs	r0, #107	; 0x6b
 8000688:	f000 fb4d 	bl	8000d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ICACHE_IRQn);
 800068c:	206b      	movs	r0, #107	; 0x6b
 800068e:	f000 fb64 	bl	8000d5a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000

080006a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08c      	sub	sp, #48	; 0x30
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a2f      	ldr	r2, [pc, #188]	; (800077c <HAL_SPI_MspInit+0xdc>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d129      	bne.n	8000716 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80006c2:	4b2f      	ldr	r3, [pc, #188]	; (8000780 <HAL_SPI_MspInit+0xe0>)
 80006c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c6:	4a2e      	ldr	r2, [pc, #184]	; (8000780 <HAL_SPI_MspInit+0xe0>)
 80006c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006cc:	6593      	str	r3, [r2, #88]	; 0x58
 80006ce:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <HAL_SPI_MspInit+0xe0>)
 80006d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d6:	61bb      	str	r3, [r7, #24]
 80006d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	4b29      	ldr	r3, [pc, #164]	; (8000780 <HAL_SPI_MspInit+0xe0>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a28      	ldr	r2, [pc, #160]	; (8000780 <HAL_SPI_MspInit+0xe0>)
 80006e0:	f043 0302 	orr.w	r3, r3, #2
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b26      	ldr	r3, [pc, #152]	; (8000780 <HAL_SPI_MspInit+0xe0>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80006f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000704:	2305      	movs	r3, #5
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	481d      	ldr	r0, [pc, #116]	; (8000784 <HAL_SPI_MspInit+0xe4>)
 8000710:	f000 fb3e 	bl	8000d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000714:	e02d      	b.n	8000772 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a1b      	ldr	r2, [pc, #108]	; (8000788 <HAL_SPI_MspInit+0xe8>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d128      	bne.n	8000772 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <HAL_SPI_MspInit+0xe0>)
 8000722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000724:	4a16      	ldr	r2, [pc, #88]	; (8000780 <HAL_SPI_MspInit+0xe0>)
 8000726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800072a:	6593      	str	r3, [r2, #88]	; 0x58
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <HAL_SPI_MspInit+0xe0>)
 800072e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <HAL_SPI_MspInit+0xe0>)
 800073a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073c:	4a10      	ldr	r2, [pc, #64]	; (8000780 <HAL_SPI_MspInit+0xe0>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <HAL_SPI_MspInit+0xe0>)
 8000746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000750:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	2302      	movs	r3, #2
 8000758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000762:	2306      	movs	r3, #6
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4807      	ldr	r0, [pc, #28]	; (800078c <HAL_SPI_MspInit+0xec>)
 800076e:	f000 fb0f 	bl	8000d90 <HAL_GPIO_Init>
}
 8000772:	bf00      	nop
 8000774:	3730      	adds	r7, #48	; 0x30
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40003800 	.word	0x40003800
 8000780:	40021000 	.word	0x40021000
 8000784:	42020400 	.word	0x42020400
 8000788:	40003c00 	.word	0x40003c00
 800078c:	42020800 	.word	0x42020800

08000790 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b0ae      	sub	sp, #184	; 0xb8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	2294      	movs	r2, #148	; 0x94
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f003 faa1 	bl	8003cf8 <memset>
  if(hpcd->Instance==USB)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a22      	ldr	r2, [pc, #136]	; (8000844 <HAL_PCD_MspInit+0xb4>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d13d      	bne.n	800083c <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80007c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fe0b 	bl	80023ec <HAL_RCCEx_PeriphCLKConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80007dc:	f7ff ff30 	bl	8000640 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <HAL_PCD_MspInit+0xb8>)
 80007e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e4:	4a18      	ldr	r2, [pc, #96]	; (8000848 <HAL_PCD_MspInit+0xb8>)
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <HAL_PCD_MspInit+0xb8>)
 80007ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000812:	230a      	movs	r3, #10
 8000814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800081c:	4619      	mov	r1, r3
 800081e:	480b      	ldr	r0, [pc, #44]	; (800084c <HAL_PCD_MspInit+0xbc>)
 8000820:	f000 fab6 	bl	8000d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <HAL_PCD_MspInit+0xb8>)
 8000826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000828:	4a07      	ldr	r2, [pc, #28]	; (8000848 <HAL_PCD_MspInit+0xb8>)
 800082a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800082e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_PCD_MspInit+0xb8>)
 8000832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800083c:	bf00      	nop
 800083e:	37b8      	adds	r7, #184	; 0xb8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	4000d400 	.word	0x4000d400
 8000848:	40021000 	.word	0x40021000
 800084c:	42020000 	.word	0x42020000

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <NMI_Handler+0x4>

08000856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089c:	f000 f948 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <ICACHE_IRQHandler>:

/**
  * @brief This function handles Instruction cache global interrupt.
  */
void ICACHE_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_IRQn 0 */

  /* USER CODE END ICACHE_IRQn 0 */
  HAL_ICACHE_IRQHandler();
 80008a8:	f000 fc3a 	bl	8001120 <HAL_ICACHE_IRQHandler>
  /* USER CODE BEGIN ICACHE_IRQn 1 */

  /* USER CODE END ICACHE_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <SystemInit+0x20>)
 80008b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <SystemInit+0x20>)
 80008bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b087      	sub	sp, #28
 80008d8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80008da:	4b4f      	ldr	r3, [pc, #316]	; (8000a18 <SystemCoreClockUpdate+0x144>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d107      	bne.n	80008f6 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80008e6:	4b4c      	ldr	r3, [pc, #304]	; (8000a18 <SystemCoreClockUpdate+0x144>)
 80008e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	e005      	b.n	8000902 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80008f6:	4b48      	ldr	r3, [pc, #288]	; (8000a18 <SystemCoreClockUpdate+0x144>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	091b      	lsrs	r3, r3, #4
 80008fc:	f003 030f 	and.w	r3, r3, #15
 8000900:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000902:	4a46      	ldr	r2, [pc, #280]	; (8000a1c <SystemCoreClockUpdate+0x148>)
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800090a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800090c:	4b42      	ldr	r3, [pc, #264]	; (8000a18 <SystemCoreClockUpdate+0x144>)
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	f003 030c 	and.w	r3, r3, #12
 8000914:	2b0c      	cmp	r3, #12
 8000916:	d866      	bhi.n	80009e6 <SystemCoreClockUpdate+0x112>
 8000918:	a201      	add	r2, pc, #4	; (adr r2, 8000920 <SystemCoreClockUpdate+0x4c>)
 800091a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091e:	bf00      	nop
 8000920:	08000955 	.word	0x08000955
 8000924:	080009e7 	.word	0x080009e7
 8000928:	080009e7 	.word	0x080009e7
 800092c:	080009e7 	.word	0x080009e7
 8000930:	0800095d 	.word	0x0800095d
 8000934:	080009e7 	.word	0x080009e7
 8000938:	080009e7 	.word	0x080009e7
 800093c:	080009e7 	.word	0x080009e7
 8000940:	08000965 	.word	0x08000965
 8000944:	080009e7 	.word	0x080009e7
 8000948:	080009e7 	.word	0x080009e7
 800094c:	080009e7 	.word	0x080009e7
 8000950:	0800096d 	.word	0x0800096d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000954:	4a32      	ldr	r2, [pc, #200]	; (8000a20 <SystemCoreClockUpdate+0x14c>)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	6013      	str	r3, [r2, #0]
      break;
 800095a:	e048      	b.n	80009ee <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800095c:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <SystemCoreClockUpdate+0x14c>)
 800095e:	4a31      	ldr	r2, [pc, #196]	; (8000a24 <SystemCoreClockUpdate+0x150>)
 8000960:	601a      	str	r2, [r3, #0]
      break;
 8000962:	e044      	b.n	80009ee <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000964:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <SystemCoreClockUpdate+0x14c>)
 8000966:	4a30      	ldr	r2, [pc, #192]	; (8000a28 <SystemCoreClockUpdate+0x154>)
 8000968:	601a      	str	r2, [r3, #0]
      break;
 800096a:	e040      	b.n	80009ee <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800096c:	4b2a      	ldr	r3, [pc, #168]	; (8000a18 <SystemCoreClockUpdate+0x144>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000976:	4b28      	ldr	r3, [pc, #160]	; (8000a18 <SystemCoreClockUpdate+0x144>)
 8000978:	68db      	ldr	r3, [r3, #12]
 800097a:	091b      	lsrs	r3, r3, #4
 800097c:	f003 030f 	and.w	r3, r3, #15
 8000980:	3301      	adds	r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b02      	cmp	r3, #2
 8000988:	d003      	beq.n	8000992 <SystemCoreClockUpdate+0xbe>
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2b03      	cmp	r3, #3
 800098e:	d006      	beq.n	800099e <SystemCoreClockUpdate+0xca>
 8000990:	e00b      	b.n	80009aa <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000992:	4a24      	ldr	r2, [pc, #144]	; (8000a24 <SystemCoreClockUpdate+0x150>)
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	fbb2 f3f3 	udiv	r3, r2, r3
 800099a:	613b      	str	r3, [r7, #16]
          break;
 800099c:	e00b      	b.n	80009b6 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800099e:	4a22      	ldr	r2, [pc, #136]	; (8000a28 <SystemCoreClockUpdate+0x154>)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a6:	613b      	str	r3, [r7, #16]
          break;
 80009a8:	e005      	b.n	80009b6 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b2:	613b      	str	r3, [r7, #16]
          break;
 80009b4:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <SystemCoreClockUpdate+0x144>)
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	0a1b      	lsrs	r3, r3, #8
 80009bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	fb02 f303 	mul.w	r3, r2, r3
 80009c6:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <SystemCoreClockUpdate+0x144>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	0e5b      	lsrs	r3, r3, #25
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	3301      	adds	r3, #1
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e0:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <SystemCoreClockUpdate+0x14c>)
 80009e2:	6013      	str	r3, [r2, #0]
      break;
 80009e4:	e003      	b.n	80009ee <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <SystemCoreClockUpdate+0x14c>)
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	6013      	str	r3, [r2, #0]
      break;
 80009ec:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <SystemCoreClockUpdate+0x144>)
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	091b      	lsrs	r3, r3, #4
 80009f4:	f003 030f 	and.w	r3, r3, #15
 80009f8:	4a0c      	ldr	r2, [pc, #48]	; (8000a2c <SystemCoreClockUpdate+0x158>)
 80009fa:	5cd3      	ldrb	r3, [r2, r3]
 80009fc:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <SystemCoreClockUpdate+0x14c>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	fa22 f303 	lsr.w	r3, r2, r3
 8000a08:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <SystemCoreClockUpdate+0x14c>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	371c      	adds	r7, #28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	08003d38 	.word	0x08003d38
 8000a20:	20000000 	.word	0x20000000
 8000a24:	00f42400 	.word	0x00f42400
 8000a28:	01e84800 	.word	0x01e84800
 8000a2c:	08003d28 	.word	0x08003d28

08000a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a34:	f7ff ff3c 	bl	80008b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a38:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a3a:	e003      	b.n	8000a44 <LoopCopyDataInit>

08000a3c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a3e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a40:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a42:	3104      	adds	r1, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a44:	480a      	ldr	r0, [pc, #40]	; (8000a70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a48:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a4a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a4c:	d3f6      	bcc.n	8000a3c <CopyDataInit>
	ldr	r2, =_sbss
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a50:	e002      	b.n	8000a58 <LoopFillZerobss>

08000a52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a52:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a54:	f842 3b04 	str.w	r3, [r2], #4

08000a58 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <LoopForever+0x16>)
	cmp	r2, r3
 8000a5a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a5c:	d3f9      	bcc.n	8000a52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a5e:	f003 f927 	bl	8003cb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a62:	f7ff fbe7 	bl	8000234 <main>

08000a66 <LoopForever>:

LoopForever:
    b LoopForever
 8000a66:	e7fe      	b.n	8000a66 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000a68:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000a6c:	08003d80 	.word	0x08003d80
	ldr	r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a74:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a78:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a7c:	200003e8 	.word	0x200003e8

08000a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_2_IRQHandler>

08000a82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000a8c:	2004      	movs	r0, #4
 8000a8e:	f000 f93f 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000a92:	f7ff ff1f 	bl	80008d4 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a96:	2007      	movs	r0, #7
 8000a98:	f000 f80e 	bl	8000ab8 <HAL_InitTick>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d002      	beq.n	8000aa8 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	71fb      	strb	r3, [r7, #7]
 8000aa6:	e001      	b.n	8000aac <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aa8:	f7ff fdd0 	bl	800064c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aac:	79fb      	ldrb	r3, [r7, #7]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <HAL_InitTick+0x6c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d023      	beq.n	8000b14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <HAL_InitTick+0x70>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <HAL_InitTick+0x6c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f947 	bl	8000d76 <HAL_SYSTICK_Config>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d10f      	bne.n	8000b0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b07      	cmp	r3, #7
 8000af2:	d809      	bhi.n	8000b08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af4:	2200      	movs	r2, #0
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f000 f913 	bl	8000d26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b00:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <HAL_InitTick+0x74>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6013      	str	r3, [r2, #0]
 8000b06:	e007      	b.n	8000b18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	73fb      	strb	r3, [r7, #15]
 8000b0c:	e004      	b.n	8000b18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	73fb      	strb	r3, [r7, #15]
 8000b12:	e001      	b.n	8000b18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20000004 	.word	0x20000004

08000b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_IncTick+0x20>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_IncTick+0x24>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <HAL_IncTick+0x24>)
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008
 8000b54:	200003e4 	.word	0x200003e4

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_GetTick+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	200003e4 	.word	0x200003e4

08000b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	60d3      	str	r3, [r2, #12]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	f003 0307 	and.w	r3, r3, #7
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	db0b      	blt.n	8000bfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	f003 021f 	and.w	r2, r3, #31
 8000bec:	4907      	ldr	r1, [pc, #28]	; (8000c0c <__NVIC_EnableIRQ+0x38>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	095b      	lsrs	r3, r3, #5
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000e100 	.word	0xe000e100

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	; (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	0152      	lsls	r2, r2, #5
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	; (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0152      	lsls	r2, r2, #5
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	bf28      	it	cs
 8000c82:	2303      	movcs	r3, #3
 8000c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3303      	adds	r3, #3
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b04      	subs	r3, #4
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	4313      	orrs	r3, r2
         );
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	; 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cdc:	d301      	bcc.n	8000ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00f      	b.n	8000d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <SysTick_Config+0x40>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cea:	2107      	movs	r1, #7
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f7ff ff8e 	bl	8000c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <SysTick_Config+0x40>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <SysTick_Config+0x40>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	e000e010 	.word	0xe000e010

08000d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff29 	bl	8000b70 <__NVIC_SetPriorityGrouping>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d34:	f7ff ff40 	bl	8000bb8 <__NVIC_GetPriorityGrouping>
 8000d38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	f7ff ff90 	bl	8000c64 <NVIC_EncodePriority>
 8000d44:	4602      	mov	r2, r0
 8000d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff5f 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff33 	bl	8000bd4 <__NVIC_EnableIRQ>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ffa4 	bl	8000ccc <SysTick_Config>
 8000d84:	4603      	mov	r3, r0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d9e:	e158      	b.n	8001052 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	2101      	movs	r1, #1
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dac:	4013      	ands	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f000 814a 	beq.w	800104c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d005      	beq.n	8000dd0 <HAL_GPIO_Init+0x40>
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d130      	bne.n	8000e32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e06:	2201      	movs	r2, #1
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	091b      	lsrs	r3, r3, #4
 8000e1c:	f003 0201 	and.w	r2, r3, #1
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	d017      	beq.n	8000e6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d123      	bne.n	8000ec2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	08da      	lsrs	r2, r3, #3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3208      	adds	r2, #8
 8000e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	220f      	movs	r2, #15
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	691a      	ldr	r2, [r3, #16]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	f003 0307 	and.w	r3, r3, #7
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	08da      	lsrs	r2, r3, #3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3208      	adds	r2, #8
 8000ebc:	6939      	ldr	r1, [r7, #16]
 8000ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0203 	and.w	r2, r3, #3
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 80a4 	beq.w	800104c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000f04:	4a5a      	ldr	r2, [pc, #360]	; (8001070 <HAL_GPIO_Init+0x2e0>)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	089b      	lsrs	r3, r3, #2
 8000f0a:	3318      	adds	r3, #24
 8000f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a52      	ldr	r2, [pc, #328]	; (8001074 <HAL_GPIO_Init+0x2e4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d025      	beq.n	8000f7c <HAL_GPIO_Init+0x1ec>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a51      	ldr	r2, [pc, #324]	; (8001078 <HAL_GPIO_Init+0x2e8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d01f      	beq.n	8000f78 <HAL_GPIO_Init+0x1e8>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a50      	ldr	r2, [pc, #320]	; (800107c <HAL_GPIO_Init+0x2ec>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d019      	beq.n	8000f74 <HAL_GPIO_Init+0x1e4>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a4f      	ldr	r2, [pc, #316]	; (8001080 <HAL_GPIO_Init+0x2f0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d013      	beq.n	8000f70 <HAL_GPIO_Init+0x1e0>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a4e      	ldr	r2, [pc, #312]	; (8001084 <HAL_GPIO_Init+0x2f4>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d00d      	beq.n	8000f6c <HAL_GPIO_Init+0x1dc>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a4d      	ldr	r2, [pc, #308]	; (8001088 <HAL_GPIO_Init+0x2f8>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d007      	beq.n	8000f68 <HAL_GPIO_Init+0x1d8>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a4c      	ldr	r2, [pc, #304]	; (800108c <HAL_GPIO_Init+0x2fc>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d101      	bne.n	8000f64 <HAL_GPIO_Init+0x1d4>
 8000f60:	2306      	movs	r3, #6
 8000f62:	e00c      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f64:	2307      	movs	r3, #7
 8000f66:	e00a      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f68:	2305      	movs	r3, #5
 8000f6a:	e008      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	e006      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f70:	2303      	movs	r3, #3
 8000f72:	e004      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f74:	2302      	movs	r3, #2
 8000f76:	e002      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	f002 0203 	and.w	r2, r2, #3
 8000f84:	00d2      	lsls	r2, r2, #3
 8000f86:	4093      	lsls	r3, r2
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000f8e:	4938      	ldr	r1, [pc, #224]	; (8001070 <HAL_GPIO_Init+0x2e0>)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3318      	adds	r3, #24
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f9c:	4b34      	ldr	r3, [pc, #208]	; (8001070 <HAL_GPIO_Init+0x2e0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fc0:	4a2b      	ldr	r2, [pc, #172]	; (8001070 <HAL_GPIO_Init+0x2e0>)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <HAL_GPIO_Init+0x2e0>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fea:	4a21      	ldr	r2, [pc, #132]	; (8001070 <HAL_GPIO_Init+0x2e0>)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <HAL_GPIO_Init+0x2e0>)
 8000ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001016:	4a16      	ldr	r2, [pc, #88]	; (8001070 <HAL_GPIO_Init+0x2e0>)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_GPIO_Init+0x2e0>)
 8001020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001044:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <HAL_GPIO_Init+0x2e0>)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3301      	adds	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	fa22 f303 	lsr.w	r3, r2, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	f47f ae9f 	bne.w	8000da0 <HAL_GPIO_Init+0x10>
  }
}
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	4002f400 	.word	0x4002f400
 8001074:	42020000 	.word	0x42020000
 8001078:	42020400 	.word	0x42020400
 800107c:	42020800 	.word	0x42020800
 8001080:	42020c00 	.word	0x42020c00
 8001084:	42021000 	.word	0x42021000
 8001088:	42021400 	.word	0x42021400
 800108c:	42021800 	.word	0x42021800

08001090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
 800109c:	4613      	mov	r3, r2
 800109e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a0:	787b      	ldrb	r3, [r7, #1]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e007      	b.n	80010ee <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f023 0204 	bic.w	r2, r3, #4
 80010e6:	4905      	ldr	r1, [pc, #20]	; (80010fc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]
  }

  return status;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40030400 	.word	0x40030400

08001100 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_ICACHE_Enable+0x1c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_ICACHE_Enable+0x1c>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	40030400 	.word	0x40030400

08001120 <HAL_ICACHE_IRQHandler>:
  * @note This function respectively disables the interrupt and clears the
  *       flag of any pending flag before calling the associated user callback.
  * @retval None
  */
void HAL_ICACHE_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
  /* Get current interrupt flags and interrupt sources value */
  uint32_t itflags   = READ_REG(ICACHE->SR);
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <HAL_ICACHE_IRQHandler+0x64>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	607b      	str	r3, [r7, #4]
  uint32_t itsources = READ_REG(ICACHE->IER);
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_ICACHE_IRQHandler+0x64>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	603b      	str	r3, [r7, #0]

  /* Check Instruction cache Error interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_ERROR) != 0U)
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	4013      	ands	r3, r2
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00a      	beq.n	8001156 <HAL_ICACHE_IRQHandler+0x36>
  {
    /* Disable error interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_ERRIE);
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_ICACHE_IRQHandler+0x64>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <HAL_ICACHE_IRQHandler+0x64>)
 8001146:	f023 0304 	bic.w	r3, r3, #4
 800114a:	6093      	str	r3, [r2, #8]

    /* Clear ERR pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CERRF);
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_ICACHE_IRQHandler+0x64>)
 800114e:	2204      	movs	r2, #4
 8001150:	60da      	str	r2, [r3, #12]

    /* Instruction cache error interrupt user callback */
    HAL_ICACHE_ErrorCallback();
 8001152:	f000 f820 	bl	8001196 <HAL_ICACHE_ErrorCallback>
  }

  /* Check Instruction cache BusyEnd interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_BUSYEND) != 0U)
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	4013      	ands	r3, r2
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00a      	beq.n	800117a <HAL_ICACHE_IRQHandler+0x5a>
  {
    /* Disable end of cache invalidation interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_BSYENDIE);
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <HAL_ICACHE_IRQHandler+0x64>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_ICACHE_IRQHandler+0x64>)
 800116a:	f023 0302 	bic.w	r3, r3, #2
 800116e:	6093      	str	r3, [r2, #8]

    /* Clear BSYENDF pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <HAL_ICACHE_IRQHandler+0x64>)
 8001172:	2202      	movs	r2, #2
 8001174:	60da      	str	r2, [r3, #12]

    /* Instruction cache busyend interrupt user callback */
    HAL_ICACHE_InvalidateCompleteCallback();
 8001176:	f000 f807 	bl	8001188 <HAL_ICACHE_InvalidateCompleteCallback>
  }
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40030400 	.word	0x40030400

08001188 <HAL_ICACHE_InvalidateCompleteCallback>:

/**
  * @brief  Cache invalidation complete callback.
  */
__weak void HAL_ICACHE_InvalidateCompleteCallback(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <HAL_ICACHE_ErrorCallback>:

/**
  * @brief  Error callback.
  */
__weak void HAL_ICACHE_ErrorCallback(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_ErrorCallback() should be implemented in the user file
   */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	b08b      	sub	sp, #44	; 0x2c
 80011a8:	af06      	add	r7, sp, #24
 80011aa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e0cb      	b.n	800134e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d106      	bne.n	80011d0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff fae0 	bl	8000790 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2203      	movs	r2, #3
 80011d4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 fd2b 	bl	8003c38 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	73fb      	strb	r3, [r7, #15]
 80011e6:	e040      	b.n	800126a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	1c5a      	adds	r2, r3, #1
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	440b      	add	r3, r1
 80011f8:	3301      	adds	r3, #1
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	440b      	add	r3, r1
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	440b      	add	r3, r1
 8001222:	3303      	adds	r3, #3
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	440b      	add	r3, r1
 8001236:	3338      	adds	r3, #56	; 0x38
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	440b      	add	r3, r1
 800124a:	333c      	adds	r3, #60	; 0x3c
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	440b      	add	r3, r1
 800125e:	3340      	adds	r3, #64	; 0x40
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	3301      	adds	r3, #1
 8001268:	73fb      	strb	r3, [r7, #15]
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	d3b9      	bcc.n	80011e8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e044      	b.n	8001304 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	440b      	add	r3, r1
 8001288:	f203 1369 	addw	r3, r3, #361	; 0x169
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	440b      	add	r3, r1
 800129e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012a2:	7bfa      	ldrb	r2, [r7, #15]
 80012a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	440b      	add	r3, r1
 80012b4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	440b      	add	r3, r1
 80012ca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012d2:	7bfa      	ldrb	r2, [r7, #15]
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	440b      	add	r3, r1
 80012e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	440b      	add	r3, r1
 80012f6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	3301      	adds	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	d3b5      	bcc.n	800127a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	687e      	ldr	r6, [r7, #4]
 8001316:	466d      	mov	r5, sp
 8001318:	f106 0410 	add.w	r4, r6, #16
 800131c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	602b      	str	r3, [r5, #0]
 8001324:	1d33      	adds	r3, r6, #4
 8001326:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001328:	6838      	ldr	r0, [r7, #0]
 800132a:	f002 fca0 	bl	8003c6e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d102      	bne.n	800134c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f805 	bl	8001356 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001356 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001356:	b480      	push	{r7}
 8001358:	b085      	sub	sp, #20
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800137a:	b29b      	uxth	r3, r3
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	b29a      	uxth	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800138e:	b29b      	uxth	r3, r3
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	b29a      	uxth	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40007000 	.word	0x40007000

080013c8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80013d0:	4b27      	ldr	r3, [pc, #156]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013d8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80013da:	f000 f851 	bl	8001480 <HAL_PWREx_SMPS_GetEffectiveMode>
 80013de:	4603      	mov	r3, r0
 80013e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013e4:	d101      	bne.n	80013ea <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e03e      	b.n	8001468 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80013ea:	4b21      	ldr	r3, [pc, #132]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013f6:	d101      	bne.n	80013fc <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e035      	b.n	8001468 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	d101      	bne.n	8001408 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	e02f      	b.n	8001468 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001410:	4917      	ldr	r1, [pc, #92]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4313      	orrs	r3, r2
 8001416:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	095b      	lsrs	r3, r3, #5
 800141e:	4a16      	ldr	r2, [pc, #88]	; (8001478 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001420:	fba2 2303 	umull	r2, r3, r2, r3
 8001424:	09db      	lsrs	r3, r3, #7
 8001426:	2232      	movs	r2, #50	; 0x32
 8001428:	fb02 f303 	mul.w	r3, r2, r3
 800142c:	4a13      	ldr	r2, [pc, #76]	; (800147c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	08db      	lsrs	r3, r3, #3
 8001434:	3301      	adds	r3, #1
 8001436:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001438:	e002      	b.n	8001440 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3b01      	subs	r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144c:	d102      	bne.n	8001454 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f2      	bne.n	800143a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800145c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001460:	d101      	bne.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e000      	b.n	8001468 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40007000 	.word	0x40007000
 8001474:	20000000 	.word	0x20000000
 8001478:	0a7c5ac5 	.word	0x0a7c5ac5
 800147c:	cccccccd 	.word	0xcccccccd

08001480 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8001496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	e00a      	b.n	80014b4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d103      	bne.n	80014b0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80014a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	e001      	b.n	80014b4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80014b4:	687b      	ldr	r3, [r7, #4]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40007000 	.word	0x40007000

080014c8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	f000 bcc2 	b.w	8001e60 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014dc:	4b99      	ldr	r3, [pc, #612]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 030c 	and.w	r3, r3, #12
 80014e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014e6:	4b97      	ldr	r3, [pc, #604]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0310 	and.w	r3, r3, #16
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 80e9 	beq.w	80016d0 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d006      	beq.n	8001512 <HAL_RCC_OscConfig+0x4a>
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	2b0c      	cmp	r3, #12
 8001508:	f040 8083 	bne.w	8001612 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d17f      	bne.n	8001612 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001512:	4b8c      	ldr	r3, [pc, #560]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <HAL_RCC_OscConfig+0x64>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	f000 bc9a 	b.w	8001e60 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001530:	4b84      	ldr	r3, [pc, #528]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d004      	beq.n	8001546 <HAL_RCC_OscConfig+0x7e>
 800153c:	4b81      	ldr	r3, [pc, #516]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001544:	e005      	b.n	8001552 <HAL_RCC_OscConfig+0x8a>
 8001546:	4b7f      	ldr	r3, [pc, #508]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001552:	4293      	cmp	r3, r2
 8001554:	d224      	bcs.n	80015a0 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	4618      	mov	r0, r3
 800155c:	f000 fe74 	bl	8002248 <RCC_SetFlashLatencyFromMSIRange>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	f000 bc7a 	b.w	8001e60 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800156c:	4b75      	ldr	r3, [pc, #468]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a74      	ldr	r2, [pc, #464]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001572:	f043 0308 	orr.w	r3, r3, #8
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b72      	ldr	r3, [pc, #456]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	496f      	ldr	r1, [pc, #444]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800158a:	4b6e      	ldr	r3, [pc, #440]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	496a      	ldr	r1, [pc, #424]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 800159a:	4313      	orrs	r3, r2
 800159c:	604b      	str	r3, [r1, #4]
 800159e:	e026      	b.n	80015ee <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015a0:	4b68      	ldr	r3, [pc, #416]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a67      	ldr	r2, [pc, #412]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 80015a6:	f043 0308 	orr.w	r3, r3, #8
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b65      	ldr	r3, [pc, #404]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	4962      	ldr	r1, [pc, #392]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015be:	4b61      	ldr	r3, [pc, #388]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	495d      	ldr	r1, [pc, #372]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10a      	bne.n	80015ee <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 fe33 	bl	8002248 <RCC_SetFlashLatencyFromMSIRange>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	f000 bc39 	b.w	8001e60 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80015ee:	f000 fe17 	bl	8002220 <HAL_RCC_GetHCLKFreq>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a54      	ldr	r2, [pc, #336]	; (8001748 <HAL_RCC_OscConfig+0x280>)
 80015f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015f8:	4b54      	ldr	r3, [pc, #336]	; (800174c <HAL_RCC_OscConfig+0x284>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fa5b 	bl	8000ab8 <HAL_InitTick>
 8001602:	4603      	mov	r3, r0
 8001604:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d060      	beq.n	80016ce <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	f000 bc27 	b.w	8001e60 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d039      	beq.n	800168e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800161a:	4b4a      	ldr	r3, [pc, #296]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a49      	ldr	r2, [pc, #292]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001626:	f7ff fa97 	bl	8000b58 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800162c:	e00f      	b.n	800164e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800162e:	f7ff fa93 	bl	8000b58 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d908      	bls.n	800164e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800163c:	4b41      	ldr	r3, [pc, #260]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	f000 bc09 	b.w	8001e60 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800164e:	4b3d      	ldr	r3, [pc, #244]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0e9      	beq.n	800162e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800165a:	4b3a      	ldr	r3, [pc, #232]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a39      	ldr	r2, [pc, #228]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001660:	f043 0308 	orr.w	r3, r3, #8
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b37      	ldr	r3, [pc, #220]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	4934      	ldr	r1, [pc, #208]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001678:	4b32      	ldr	r3, [pc, #200]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	492f      	ldr	r1, [pc, #188]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001688:	4313      	orrs	r3, r2
 800168a:	604b      	str	r3, [r1, #4]
 800168c:	e020      	b.n	80016d0 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800168e:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a2c      	ldr	r2, [pc, #176]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800169a:	f7ff fa5d 	bl	8000b58 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016a0:	e00e      	b.n	80016c0 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016a2:	f7ff fa59 	bl	8000b58 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d907      	bls.n	80016c0 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016b0:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e3cf      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016c0:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1ea      	bne.n	80016a2 <HAL_RCC_OscConfig+0x1da>
 80016cc:	e000      	b.n	80016d0 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d07e      	beq.n	80017da <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d005      	beq.n	80016ee <HAL_RCC_OscConfig+0x226>
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	2b0c      	cmp	r3, #12
 80016e6:	d10e      	bne.n	8001706 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d10b      	bne.n	8001706 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d06e      	beq.n	80017d8 <HAL_RCC_OscConfig+0x310>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d16a      	bne.n	80017d8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e3ac      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170e:	d106      	bne.n	800171e <HAL_RCC_OscConfig+0x256>
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	e024      	b.n	8001768 <HAL_RCC_OscConfig+0x2a0>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001726:	d113      	bne.n	8001750 <HAL_RCC_OscConfig+0x288>
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a05      	ldr	r2, [pc, #20]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 800172e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a02      	ldr	r2, [pc, #8]	; (8001744 <HAL_RCC_OscConfig+0x27c>)
 800173a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	e012      	b.n	8001768 <HAL_RCC_OscConfig+0x2a0>
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000
 8001748:	20000000 	.word	0x20000000
 800174c:	20000004 	.word	0x20000004
 8001750:	4b8b      	ldr	r3, [pc, #556]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a8a      	ldr	r2, [pc, #552]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b88      	ldr	r3, [pc, #544]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a87      	ldr	r2, [pc, #540]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d019      	beq.n	80017a4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff f9f2 	bl	8000b58 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001776:	e00e      	b.n	8001796 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff f9ee 	bl	8000b58 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d907      	bls.n	8001796 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001786:	4b7e      	ldr	r3, [pc, #504]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e364      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001796:	4b7a      	ldr	r3, [pc, #488]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0ea      	beq.n	8001778 <HAL_RCC_OscConfig+0x2b0>
 80017a2:	e01a      	b.n	80017da <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff f9d8 	bl	8000b58 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017aa:	e00e      	b.n	80017ca <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff f9d4 	bl	8000b58 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d907      	bls.n	80017ca <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ba:	4b71      	ldr	r3, [pc, #452]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e34a      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ca:	4b6d      	ldr	r3, [pc, #436]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1ea      	bne.n	80017ac <HAL_RCC_OscConfig+0x2e4>
 80017d6:	e000      	b.n	80017da <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d06c      	beq.n	80018c0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_OscConfig+0x330>
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2b0c      	cmp	r3, #12
 80017f0:	d119      	bne.n	8001826 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d116      	bne.n	8001826 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f8:	4b61      	ldr	r3, [pc, #388]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_OscConfig+0x348>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e327      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001810:	4b5b      	ldr	r3, [pc, #364]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	061b      	lsls	r3, r3, #24
 800181e:	4958      	ldr	r1, [pc, #352]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001824:	e04c      	b.n	80018c0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d029      	beq.n	8001882 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800182e:	4b54      	ldr	r3, [pc, #336]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a53      	ldr	r2, [pc, #332]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7ff f98d 	bl	8000b58 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001840:	e00e      	b.n	8001860 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff f989 	bl	8000b58 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d907      	bls.n	8001860 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001850:	4b4b      	ldr	r3, [pc, #300]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e2ff      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001860:	4b47      	ldr	r3, [pc, #284]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0ea      	beq.n	8001842 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186c:	4b44      	ldr	r3, [pc, #272]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	061b      	lsls	r3, r3, #24
 800187a:	4941      	ldr	r1, [pc, #260]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
 8001880:	e01e      	b.n	80018c0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001882:	4b3f      	ldr	r3, [pc, #252]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a3e      	ldr	r2, [pc, #248]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800188c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188e:	f7ff f963 	bl	8000b58 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001894:	e00e      	b.n	80018b4 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001896:	f7ff f95f 	bl	8000b58 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d907      	bls.n	80018b4 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018a4:	4b36      	ldr	r3, [pc, #216]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e2d5      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018b4:	4b32      	ldr	r3, [pc, #200]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1ea      	bne.n	8001896 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d062      	beq.n	8001992 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d038      	beq.n	8001946 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d108      	bne.n	80018ee <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80018dc:	4b28      	ldr	r3, [pc, #160]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 80018de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e2:	4a27      	ldr	r2, [pc, #156]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 80018e4:	f023 0310 	bic.w	r3, r3, #16
 80018e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80018ec:	e007      	b.n	80018fe <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80018ee:	4b24      	ldr	r3, [pc, #144]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 80018f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f4:	4a22      	ldr	r2, [pc, #136]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 80018f6:	f043 0310 	orr.w	r3, r3, #16
 80018fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001904:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190e:	f7ff f923 	bl	8000b58 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001914:	e00f      	b.n	8001936 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001916:	f7ff f91f 	bl	8000b58 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b07      	cmp	r3, #7
 8001922:	d908      	bls.n	8001936 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001924:	4b16      	ldr	r3, [pc, #88]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e294      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0e8      	beq.n	8001916 <HAL_RCC_OscConfig+0x44e>
 8001944:	e025      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 8001948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194c:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 800194e:	f023 0301 	bic.w	r3, r3, #1
 8001952:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001956:	f7ff f8ff 	bl	8000b58 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800195c:	e012      	b.n	8001984 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195e:	f7ff f8fb 	bl	8000b58 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b07      	cmp	r3, #7
 800196a:	d90b      	bls.n	8001984 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <HAL_RCC_OscConfig+0x4b8>)
 800196e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e270      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001984:	4ba8      	ldr	r3, [pc, #672]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1e5      	bne.n	800195e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 812d 	beq.w	8001bfa <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019a4:	4ba0      	ldr	r3, [pc, #640]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10d      	bne.n	80019cc <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b0:	4b9d      	ldr	r3, [pc, #628]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	4a9c      	ldr	r2, [pc, #624]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 80019b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ba:	6593      	str	r3, [r2, #88]	; 0x58
 80019bc:	4b9a      	ldr	r3, [pc, #616]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019c8:	2301      	movs	r3, #1
 80019ca:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019cc:	4b97      	ldr	r3, [pc, #604]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d11e      	bne.n	8001a16 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019d8:	4b94      	ldr	r3, [pc, #592]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a93      	ldr	r2, [pc, #588]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 80019de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e4:	f7ff f8b8 	bl	8000b58 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ea:	e00e      	b.n	8001a0a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ec:	f7ff f8b4 	bl	8000b58 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d907      	bls.n	8001a0a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019fa:	4b8c      	ldr	r3, [pc, #560]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e22a      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0a:	4b88      	ldr	r3, [pc, #544]	; (8001c2c <HAL_RCC_OscConfig+0x764>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0ea      	beq.n	80019ec <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d01f      	beq.n	8001a62 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d010      	beq.n	8001a50 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a2e:	4b7e      	ldr	r3, [pc, #504]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a34:	4a7c      	ldr	r2, [pc, #496]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001a36:	f043 0304 	orr.w	r3, r3, #4
 8001a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a3e:	4b7a      	ldr	r3, [pc, #488]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a44:	4a78      	ldr	r2, [pc, #480]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a4e:	e018      	b.n	8001a82 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a50:	4b75      	ldr	r3, [pc, #468]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a56:	4a74      	ldr	r2, [pc, #464]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a60:	e00f      	b.n	8001a82 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a62:	4b71      	ldr	r3, [pc, #452]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a68:	4a6f      	ldr	r2, [pc, #444]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a72:	4b6d      	ldr	r3, [pc, #436]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a78:	4a6b      	ldr	r2, [pc, #428]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001a7a:	f023 0304 	bic.w	r3, r3, #4
 8001a7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d068      	beq.n	8001b5c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f865 	bl	8000b58 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a90:	e011      	b.n	8001ab6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7ff f861 	bl	8000b58 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d908      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa4:	4b60      	ldr	r3, [pc, #384]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e1d4      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab6:	4b5c      	ldr	r3, [pc, #368]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0e6      	beq.n	8001a92 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d022      	beq.n	8001b16 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ad0:	4b55      	ldr	r3, [pc, #340]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad6:	4a54      	ldr	r2, [pc, #336]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001ae0:	e011      	b.n	8001b06 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	f7ff f839 	bl	8000b58 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d908      	bls.n	8001b06 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001af4:	4b4c      	ldr	r3, [pc, #304]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e1ac      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b06:	4b48      	ldr	r3, [pc, #288]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0e6      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x61a>
 8001b14:	e068      	b.n	8001be8 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b16:	4b44      	ldr	r3, [pc, #272]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1c:	4a42      	ldr	r2, [pc, #264]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b26:	e011      	b.n	8001b4c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b28:	f7ff f816 	bl	8000b58 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d908      	bls.n	8001b4c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e189      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b4c:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1e6      	bne.n	8001b28 <HAL_RCC_OscConfig+0x660>
 8001b5a:	e045      	b.n	8001be8 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5c:	f7fe fffc 	bl	8000b58 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b62:	e011      	b.n	8001b88 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b64:	f7fe fff8 	bl	8000b58 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d908      	bls.n	8001b88 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b76:	4b2c      	ldr	r3, [pc, #176]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e16b      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b88:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1e6      	bne.n	8001b64 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001b96:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d021      	beq.n	8001be8 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ba4:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001baa:	4a1f      	ldr	r2, [pc, #124]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bb4:	e011      	b.n	8001bda <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb6:	f7fe ffcf 	bl	8000b58 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d908      	bls.n	8001bda <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bc8:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e142      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1e6      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001be8:	7ffb      	ldrb	r3, [r7, #31]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d105      	bne.n	8001bfa <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d04f      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d028      	beq.n	8001c60 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c14:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <HAL_RCC_OscConfig+0x760>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7fe ff9b 	bl	8000b58 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c24:	e014      	b.n	8001c50 <HAL_RCC_OscConfig+0x788>
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c30:	f7fe ff92 	bl	8000b58 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d908      	bls.n	8001c50 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c3e:	4b8a      	ldr	r3, [pc, #552]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001c40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e107      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c50:	4b85      	ldr	r3, [pc, #532]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001c52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0e8      	beq.n	8001c30 <HAL_RCC_OscConfig+0x768>
 8001c5e:	e022      	b.n	8001ca6 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c60:	4b81      	ldr	r3, [pc, #516]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001c62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c66:	4a80      	ldr	r2, [pc, #512]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c70:	f7fe ff72 	bl	8000b58 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c76:	e00f      	b.n	8001c98 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c78:	f7fe ff6e 	bl	8000b58 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d908      	bls.n	8001c98 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c86:	4b78      	ldr	r3, [pc, #480]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e0e3      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c98:	4b73      	ldr	r3, [pc, #460]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1e8      	bne.n	8001c78 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80d7 	beq.w	8001e5e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb0:	4b6d      	ldr	r3, [pc, #436]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 030c 	and.w	r3, r3, #12
 8001cb8:	2b0c      	cmp	r3, #12
 8001cba:	f000 8091 	beq.w	8001de0 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d166      	bne.n	8001d94 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc6:	4b68      	ldr	r3, [pc, #416]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a67      	ldr	r2, [pc, #412]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001ccc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd2:	f7fe ff41 	bl	8000b58 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd8:	e00e      	b.n	8001cf8 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cda:	f7fe ff3d 	bl	8000b58 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d907      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce8:	4b5f      	ldr	r3, [pc, #380]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e0b3      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf8:	4b5b      	ldr	r3, [pc, #364]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1ea      	bne.n	8001cda <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d04:	4b58      	ldr	r3, [pc, #352]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	4b58      	ldr	r3, [pc, #352]	; (8001e6c <HAL_RCC_OscConfig+0x9a4>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d14:	3a01      	subs	r2, #1
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	4311      	orrs	r1, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d1e:	0212      	lsls	r2, r2, #8
 8001d20:	4311      	orrs	r1, r2
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d26:	0852      	lsrs	r2, r2, #1
 8001d28:	3a01      	subs	r2, #1
 8001d2a:	0552      	lsls	r2, r2, #21
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d32:	0852      	lsrs	r2, r2, #1
 8001d34:	3a01      	subs	r2, #1
 8001d36:	0652      	lsls	r2, r2, #25
 8001d38:	4311      	orrs	r1, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d3e:	06d2      	lsls	r2, r2, #27
 8001d40:	430a      	orrs	r2, r1
 8001d42:	4949      	ldr	r1, [pc, #292]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d48:	4b47      	ldr	r3, [pc, #284]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a46      	ldr	r2, [pc, #280]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d52:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d54:	4b44      	ldr	r3, [pc, #272]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4a43      	ldr	r2, [pc, #268]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7fe fefa 	bl	8000b58 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d66:	e00e      	b.n	8001d86 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d68:	f7fe fef6 	bl	8000b58 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d907      	bls.n	8001d86 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d76:	4b3c      	ldr	r3, [pc, #240]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e06c      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d86:	4b38      	ldr	r3, [pc, #224]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0ea      	beq.n	8001d68 <HAL_RCC_OscConfig+0x8a0>
 8001d92:	e064      	b.n	8001e5e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d94:	4b34      	ldr	r3, [pc, #208]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a33      	ldr	r2, [pc, #204]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001d9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7fe feda 	bl	8000b58 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da6:	e00e      	b.n	8001dc6 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da8:	f7fe fed6 	bl	8000b58 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d907      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db6:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e04c      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc6:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1ea      	bne.n	8001da8 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dd2:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	4924      	ldr	r1, [pc, #144]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001dd8:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <HAL_RCC_OscConfig+0x9a8>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	60cb      	str	r3, [r1, #12]
 8001dde:	e03e      	b.n	8001e5e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e039      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <HAL_RCC_OscConfig+0x9a0>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f003 0203 	and.w	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d12c      	bne.n	8001e5a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d123      	bne.n	8001e5a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d11b      	bne.n	8001e5a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d113      	bne.n	8001e5a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	085b      	lsrs	r3, r3, #1
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d109      	bne.n	8001e5a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e50:	085b      	lsrs	r3, r3, #1
 8001e52:	3b01      	subs	r3, #1
 8001e54:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d001      	beq.n	8001e5e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	019f800c 	.word	0x019f800c
 8001e70:	feeefffc 	.word	0xfeeefffc

08001e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e11c      	b.n	80020c6 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b90      	ldr	r3, [pc, #576]	; (80020d0 <HAL_RCC_ClockConfig+0x25c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d910      	bls.n	8001ebc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b8d      	ldr	r3, [pc, #564]	; (80020d0 <HAL_RCC_ClockConfig+0x25c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 020f 	bic.w	r2, r3, #15
 8001ea2:	498b      	ldr	r1, [pc, #556]	; (80020d0 <HAL_RCC_ClockConfig+0x25c>)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b89      	ldr	r3, [pc, #548]	; (80020d0 <HAL_RCC_ClockConfig+0x25c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e104      	b.n	80020c6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d010      	beq.n	8001eea <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	4b81      	ldr	r3, [pc, #516]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d908      	bls.n	8001eea <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed8:	4b7e      	ldr	r3, [pc, #504]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	497b      	ldr	r1, [pc, #492]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 8085 	beq.w	8002002 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d11f      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f00:	4b74      	ldr	r3, [pc, #464]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0da      	b.n	80020c6 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f10:	f000 f9fe 	bl	8002310 <RCC_GetSysClockFreqFromPLLSource>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4a6f      	ldr	r2, [pc, #444]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d947      	bls.n	8001fae <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f1e:	4b6d      	ldr	r3, [pc, #436]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d141      	bne.n	8001fae <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f2a:	4b6a      	ldr	r3, [pc, #424]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f32:	4a68      	ldr	r2, [pc, #416]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	e036      	b.n	8001fae <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d107      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f48:	4b62      	ldr	r3, [pc, #392]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d115      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0b6      	b.n	80020c6 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d107      	bne.n	8001f70 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f60:	4b5c      	ldr	r3, [pc, #368]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d109      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0aa      	b.n	80020c6 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f70:	4b58      	ldr	r3, [pc, #352]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0a2      	b.n	80020c6 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f80:	f000 f8b0 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4a53      	ldr	r2, [pc, #332]	; (80020d8 <HAL_RCC_ClockConfig+0x264>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d90f      	bls.n	8001fae <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f8e:	4b51      	ldr	r3, [pc, #324]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f9a:	4b4e      	ldr	r3, [pc, #312]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fa2:	4a4c      	ldr	r2, [pc, #304]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fae:	4b49      	ldr	r3, [pc, #292]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f023 0203 	bic.w	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4946      	ldr	r1, [pc, #280]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fc0:	f7fe fdca 	bl	8000b58 <HAL_GetTick>
 8001fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	e013      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc8:	f7fe fdc6 	bl	8000b58 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d90a      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	4b3e      	ldr	r3, [pc, #248]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 020c 	and.w	r2, r3, #12
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e06a      	b.n	80020c6 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff0:	4b38      	ldr	r3, [pc, #224]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 020c 	and.w	r2, r3, #12
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d1e2      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2b80      	cmp	r3, #128	; 0x80
 8002006:	d105      	bne.n	8002014 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002008:	4b32      	ldr	r3, [pc, #200]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	4a31      	ldr	r2, [pc, #196]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 800200e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002012:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d010      	beq.n	8002042 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800202c:	429a      	cmp	r2, r3
 800202e:	d208      	bcs.n	8002042 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002030:	4b28      	ldr	r3, [pc, #160]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	4925      	ldr	r1, [pc, #148]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 800203e:	4313      	orrs	r3, r2
 8002040:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002042:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <HAL_RCC_ClockConfig+0x25c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d210      	bcs.n	8002072 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002050:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <HAL_RCC_ClockConfig+0x25c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f023 020f 	bic.w	r2, r3, #15
 8002058:	491d      	ldr	r1, [pc, #116]	; (80020d0 <HAL_RCC_ClockConfig+0x25c>)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	4313      	orrs	r3, r2
 800205e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_RCC_ClockConfig+0x25c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d001      	beq.n	8002072 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e029      	b.n	80020c6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b00      	cmp	r3, #0
 800207c:	d008      	beq.n	8002090 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	4912      	ldr	r1, [pc, #72]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 800208c:	4313      	orrs	r3, r2
 800208e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d009      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209c:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	490a      	ldr	r1, [pc, #40]	; (80020d4 <HAL_RCC_ClockConfig+0x260>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80020b0:	f000 f8b6 	bl	8002220 <HAL_RCC_GetHCLKFreq>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4a09      	ldr	r2, [pc, #36]	; (80020dc <HAL_RCC_ClockConfig+0x268>)
 80020b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_RCC_ClockConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fcfa 	bl	8000ab8 <HAL_InitTick>
 80020c4:	4603      	mov	r3, r0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40022000 	.word	0x40022000
 80020d4:	40021000 	.word	0x40021000
 80020d8:	04c4b400 	.word	0x04c4b400
 80020dc:	20000000 	.word	0x20000000
 80020e0:	20000004 	.word	0x20000004

080020e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f2:	4b47      	ldr	r3, [pc, #284]	; (8002210 <HAL_RCC_GetSysClockFreq+0x12c>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020fc:	4b44      	ldr	r3, [pc, #272]	; (8002210 <HAL_RCC_GetSysClockFreq+0x12c>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x34>
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	2b0c      	cmp	r3, #12
 8002110:	d121      	bne.n	8002156 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d11e      	bne.n	8002156 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002118:	4b3d      	ldr	r3, [pc, #244]	; (8002210 <HAL_RCC_GetSysClockFreq+0x12c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d107      	bne.n	8002134 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002124:	4b3a      	ldr	r3, [pc, #232]	; (8002210 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	f003 030f 	and.w	r3, r3, #15
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	e005      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002134:	4b36      	ldr	r3, [pc, #216]	; (8002210 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8002140:	4a34      	ldr	r2, [pc, #208]	; (8002214 <HAL_RCC_GetSysClockFreq+0x130>)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002148:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10d      	bne.n	800216c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002154:	e00a      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b04      	cmp	r3, #4
 800215a:	d102      	bne.n	8002162 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800215c:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <HAL_RCC_GetSysClockFreq+0x134>)
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	e004      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b08      	cmp	r3, #8
 8002166:	d101      	bne.n	800216c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002168:	4b2c      	ldr	r3, [pc, #176]	; (800221c <HAL_RCC_GetSysClockFreq+0x138>)
 800216a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b0c      	cmp	r3, #12
 8002170:	d146      	bne.n	8002200 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002172:	4b27      	ldr	r3, [pc, #156]	; (8002210 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800217c:	4b24      	ldr	r3, [pc, #144]	; (8002210 <HAL_RCC_GetSysClockFreq+0x12c>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3301      	adds	r3, #1
 8002188:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d003      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0xb4>
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b03      	cmp	r3, #3
 8002194:	d00d      	beq.n	80021b2 <HAL_RCC_GetSysClockFreq+0xce>
 8002196:	e019      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002198:	4a1f      	ldr	r2, [pc, #124]	; (8002218 <HAL_RCC_GetSysClockFreq+0x134>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a0:	4a1b      	ldr	r2, [pc, #108]	; (8002210 <HAL_RCC_GetSysClockFreq+0x12c>)
 80021a2:	68d2      	ldr	r2, [r2, #12]
 80021a4:	0a12      	lsrs	r2, r2, #8
 80021a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	617b      	str	r3, [r7, #20]
        break;
 80021b0:	e019      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021b2:	4a1a      	ldr	r2, [pc, #104]	; (800221c <HAL_RCC_GetSysClockFreq+0x138>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	4a15      	ldr	r2, [pc, #84]	; (8002210 <HAL_RCC_GetSysClockFreq+0x12c>)
 80021bc:	68d2      	ldr	r2, [r2, #12]
 80021be:	0a12      	lsrs	r2, r2, #8
 80021c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	617b      	str	r3, [r7, #20]
        break;
 80021ca:	e00c      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d4:	4a0e      	ldr	r2, [pc, #56]	; (8002210 <HAL_RCC_GetSysClockFreq+0x12c>)
 80021d6:	68d2      	ldr	r2, [r2, #12]
 80021d8:	0a12      	lsrs	r2, r2, #8
 80021da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	617b      	str	r3, [r7, #20]
        break;
 80021e4:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_RCC_GetSysClockFreq+0x12c>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	0e5b      	lsrs	r3, r3, #25
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	3301      	adds	r3, #1
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002200:	69bb      	ldr	r3, [r7, #24]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3724      	adds	r7, #36	; 0x24
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000
 8002214:	08003d38 	.word	0x08003d38
 8002218:	00f42400 	.word	0x00f42400
 800221c:	01e84800 	.word	0x01e84800

08002220 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8002224:	f7ff ff5e 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCC_GetHCLKFreq+0x20>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	091b      	lsrs	r3, r3, #4
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	4903      	ldr	r1, [pc, #12]	; (8002244 <HAL_RCC_GetHCLKFreq+0x24>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800223c:	4618      	mov	r0, r3
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000
 8002244:	08003d28 	.word	0x08003d28

08002248 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002254:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002260:	f7ff f8a4 	bl	80013ac <HAL_PWREx_GetVoltageRange>
 8002264:	6138      	str	r0, [r7, #16]
 8002266:	e014      	b.n	8002292 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002268:	4b27      	ldr	r3, [pc, #156]	; (8002308 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	4a26      	ldr	r2, [pc, #152]	; (8002308 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800226e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002272:	6593      	str	r3, [r2, #88]	; 0x58
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002280:	f7ff f894 	bl	80013ac <HAL_PWREx_GetVoltageRange>
 8002284:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	4a1f      	ldr	r2, [pc, #124]	; (8002308 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800228c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002290:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800229e:	d10b      	bne.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b80      	cmp	r3, #128	; 0x80
 80022a4:	d919      	bls.n	80022da <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2ba0      	cmp	r3, #160	; 0xa0
 80022aa:	d902      	bls.n	80022b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ac:	2302      	movs	r3, #2
 80022ae:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80022b0:	e013      	b.n	80022da <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022b2:	2301      	movs	r3, #1
 80022b4:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80022b6:	e010      	b.n	80022da <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b80      	cmp	r3, #128	; 0x80
 80022bc:	d902      	bls.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022be:	2303      	movs	r3, #3
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	e00a      	b.n	80022da <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b80      	cmp	r3, #128	; 0x80
 80022c8:	d102      	bne.n	80022d0 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ca:	2302      	movs	r3, #2
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	e004      	b.n	80022da <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b70      	cmp	r3, #112	; 0x70
 80022d4:	d101      	bne.n	80022da <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022d6:	2301      	movs	r3, #1
 80022d8:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022da:	4b0c      	ldr	r3, [pc, #48]	; (800230c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 020f 	bic.w	r2, r3, #15
 80022e2:	490a      	ldr	r1, [pc, #40]	; (800230c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80022ea:	4b08      	ldr	r3, [pc, #32]	; (800230c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	40022000 	.word	0x40022000

08002310 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002316:	4b31      	ldr	r3, [pc, #196]	; (80023dc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002320:	4b2e      	ldr	r3, [pc, #184]	; (80023dc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	3301      	adds	r3, #1
 800232c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b03      	cmp	r3, #3
 8002332:	d015      	beq.n	8002360 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d839      	bhi.n	80023ae <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d01c      	beq.n	800237a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d133      	bne.n	80023ae <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002346:	4a26      	ldr	r2, [pc, #152]	; (80023e0 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	fbb2 f3f3 	udiv	r3, r2, r3
 800234e:	4a23      	ldr	r2, [pc, #140]	; (80023dc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002350:	68d2      	ldr	r2, [r2, #12]
 8002352:	0a12      	lsrs	r2, r2, #8
 8002354:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002358:	fb02 f303 	mul.w	r3, r2, r3
 800235c:	613b      	str	r3, [r7, #16]
      break;
 800235e:	e029      	b.n	80023b4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002360:	4a20      	ldr	r2, [pc, #128]	; (80023e4 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	4a1c      	ldr	r2, [pc, #112]	; (80023dc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800236a:	68d2      	ldr	r2, [r2, #12]
 800236c:	0a12      	lsrs	r2, r2, #8
 800236e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002372:	fb02 f303 	mul.w	r3, r2, r3
 8002376:	613b      	str	r3, [r7, #16]
      break;
 8002378:	e01c      	b.n	80023b4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800237a:	4b18      	ldr	r3, [pc, #96]	; (80023dc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d107      	bne.n	8002396 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	e005      	b.n	80023a2 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	091b      	lsrs	r3, r3, #4
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80023a2:	4a11      	ldr	r2, [pc, #68]	; (80023e8 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023aa:	613b      	str	r3, [r7, #16]
        break;
 80023ac:	e002      	b.n	80023b4 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
      break;
 80023b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	0e5b      	lsrs	r3, r3, #25
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	3301      	adds	r3, #1
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023cc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80023ce:	683b      	ldr	r3, [r7, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	40021000 	.word	0x40021000
 80023e0:	00f42400 	.word	0x00f42400
 80023e4:	01e84800 	.word	0x01e84800
 80023e8:	08003d38 	.word	0x08003d38

080023ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023f4:	2300      	movs	r3, #0
 80023f6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023f8:	2300      	movs	r3, #0
 80023fa:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002404:	2b00      	cmp	r3, #0
 8002406:	d040      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800240c:	2b80      	cmp	r3, #128	; 0x80
 800240e:	d02a      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002410:	2b80      	cmp	r3, #128	; 0x80
 8002412:	d825      	bhi.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002414:	2b60      	cmp	r3, #96	; 0x60
 8002416:	d026      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002418:	2b60      	cmp	r3, #96	; 0x60
 800241a:	d821      	bhi.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800241c:	2b40      	cmp	r3, #64	; 0x40
 800241e:	d006      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002420:	2b40      	cmp	r3, #64	; 0x40
 8002422:	d81d      	bhi.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002424:	2b00      	cmp	r3, #0
 8002426:	d009      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002428:	2b20      	cmp	r3, #32
 800242a:	d010      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800242c:	e018      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800242e:	4b8f      	ldr	r3, [pc, #572]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	4a8e      	ldr	r2, [pc, #568]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002438:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800243a:	e015      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3304      	adds	r3, #4
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fb56 	bl	8002af4 <RCCEx_PLLSAI1_Config>
 8002448:	4603      	mov	r3, r0
 800244a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800244c:	e00c      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3320      	adds	r3, #32
 8002452:	2100      	movs	r1, #0
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fc33 	bl	8002cc0 <RCCEx_PLLSAI2_Config>
 800245a:	4603      	mov	r3, r0
 800245c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800245e:	e003      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	77fb      	strb	r3, [r7, #31]
        break;
 8002464:	e000      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8002466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002468:	7ffb      	ldrb	r3, [r7, #31]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10b      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800246e:	4b7f      	ldr	r3, [pc, #508]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002470:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002474:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800247c:	497b      	ldr	r1, [pc, #492]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002484:	e001      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002486:	7ffb      	ldrb	r3, [r7, #31]
 8002488:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d047      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800249e:	d030      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80024a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a4:	d82a      	bhi.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80024a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024aa:	d02a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80024ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024b0:	d824      	bhi.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80024b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024b6:	d008      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0xde>
 80024b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024bc:	d81e      	bhi.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80024c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c6:	d010      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80024c8:	e018      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024ca:	4b68      	ldr	r3, [pc, #416]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	4a67      	ldr	r2, [pc, #412]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d4:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80024d6:	e015      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3304      	adds	r3, #4
 80024dc:	2100      	movs	r1, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fb08 	bl	8002af4 <RCCEx_PLLSAI1_Config>
 80024e4:	4603      	mov	r3, r0
 80024e6:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80024e8:	e00c      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3320      	adds	r3, #32
 80024ee:	2100      	movs	r1, #0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 fbe5 	bl	8002cc0 <RCCEx_PLLSAI2_Config>
 80024f6:	4603      	mov	r3, r0
 80024f8:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80024fa:	e003      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	77fb      	strb	r3, [r7, #31]
        break;
 8002500:	e000      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8002502:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002504:	7ffb      	ldrb	r3, [r7, #31]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10b      	bne.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800250a:	4b58      	ldr	r3, [pc, #352]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800250c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002510:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	4954      	ldr	r1, [pc, #336]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002520:	e001      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002522:	7ffb      	ldrb	r3, [r7, #31]
 8002524:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80ab 	beq.w	800268a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002534:	2300      	movs	r3, #0
 8002536:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002538:	4b4c      	ldr	r3, [pc, #304]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10d      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002544:	4b49      	ldr	r3, [pc, #292]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	4a48      	ldr	r2, [pc, #288]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800254a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254e:	6593      	str	r3, [r2, #88]	; 0x58
 8002550:	4b46      	ldr	r3, [pc, #280]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800255c:	2301      	movs	r3, #1
 800255e:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002560:	4b43      	ldr	r3, [pc, #268]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a42      	ldr	r2, [pc, #264]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800256c:	f7fe faf4 	bl	8000b58 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002572:	e00f      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002574:	f7fe faf0 	bl	8000b58 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d908      	bls.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002582:	4b3b      	ldr	r3, [pc, #236]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8002592:	e006      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002594:	4b36      	ldr	r3, [pc, #216]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0e9      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80025a0:	e000      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80025a2:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80025a4:	7ffb      	ldrb	r3, [r7, #31]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d164      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025aa:	4b30      	ldr	r3, [pc, #192]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b4:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d01f      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d019      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025c8:	4b28      	ldr	r3, [pc, #160]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d2:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025d4:	4b25      	ldr	r3, [pc, #148]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025da:	4a24      	ldr	r2, [pc, #144]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025e4:	4b21      	ldr	r3, [pc, #132]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ea:	4a20      	ldr	r2, [pc, #128]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025f4:	4a1d      	ldr	r2, [pc, #116]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d01f      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002606:	f7fe faa7 	bl	8000b58 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800260c:	e012      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260e:	f7fe faa3 	bl	8000b58 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	f241 3288 	movw	r2, #5000	; 0x1388
 800261c:	4293      	cmp	r3, r2
 800261e:	d909      	bls.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10a      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8002632:	e007      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0e5      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8002642:	e000      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8002644:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8002646:	7ffb      	ldrb	r3, [r7, #31]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10c      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800264c:	4b07      	ldr	r3, [pc, #28]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002652:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265c:	4903      	ldr	r1, [pc, #12]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002664:	e008      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002666:	7ffb      	ldrb	r3, [r7, #31]
 8002668:	77bb      	strb	r3, [r7, #30]
 800266a:	e005      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800266c:	40021000 	.word	0x40021000
 8002670:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002674:	7ffb      	ldrb	r3, [r7, #31]
 8002676:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002678:	7dfb      	ldrb	r3, [r7, #23]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d105      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267e:	4b9c      	ldr	r3, [pc, #624]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002682:	4a9b      	ldr	r2, [pc, #620]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002688:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002696:	4b96      	ldr	r3, [pc, #600]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269c:	f023 0203 	bic.w	r2, r3, #3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a4:	4992      	ldr	r1, [pc, #584]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026b8:	4b8d      	ldr	r3, [pc, #564]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	f023 020c 	bic.w	r2, r3, #12
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	498a      	ldr	r1, [pc, #552]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026da:	4b85      	ldr	r3, [pc, #532]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e8:	4981      	ldr	r1, [pc, #516]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026fc:	4b7c      	ldr	r3, [pc, #496]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	4979      	ldr	r1, [pc, #484]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800271e:	4b74      	ldr	r3, [pc, #464]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	4970      	ldr	r1, [pc, #448]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002740:	4b6b      	ldr	r3, [pc, #428]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274e:	4968      	ldr	r1, [pc, #416]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002762:	4b63      	ldr	r3, [pc, #396]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002770:	495f      	ldr	r1, [pc, #380]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002784:	4b5a      	ldr	r3, [pc, #360]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002792:	4957      	ldr	r1, [pc, #348]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80027a6:	4b52      	ldr	r3, [pc, #328]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027b4:	494e      	ldr	r1, [pc, #312]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d031      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027d0:	d00e      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027d6:	d814      	bhi.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d015      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80027dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e0:	d10f      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027e2:	4b43      	ldr	r3, [pc, #268]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	4a42      	ldr	r2, [pc, #264]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80027e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ec:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80027ee:	e00c      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3304      	adds	r3, #4
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f97c 	bl	8002af4 <RCCEx_PLLSAI1_Config>
 80027fc:	4603      	mov	r3, r0
 80027fe:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8002800:	e003      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	77fb      	strb	r3, [r7, #31]
        break;
 8002806:	e000      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8002808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800280a:	7ffb      	ldrb	r3, [r7, #31]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10b      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002810:	4b37      	ldr	r3, [pc, #220]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002816:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800281e:	4934      	ldr	r1, [pc, #208]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002826:	e001      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002828:	7ffb      	ldrb	r3, [r7, #31]
 800282a:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002838:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002846:	492a      	ldr	r1, [pc, #168]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800285a:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800285c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002860:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002868:	4921      	ldr	r1, [pc, #132]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800287c:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002882:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288a:	4919      	ldr	r1, [pc, #100]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800289e:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80028a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028a4:	f023 0203 	bic.w	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ac:	4910      	ldr	r1, [pc, #64]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d02b      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ce:	4908      	ldr	r1, [pc, #32]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028de:	d109      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4a02      	ldr	r2, [pc, #8]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80028e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ea:	60d3      	str	r3, [r2, #12]
 80028ec:	e014      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028fc:	d10c      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3304      	adds	r3, #4
 8002902:	2101      	movs	r1, #1
 8002904:	4618      	mov	r0, r3
 8002906:	f000 f8f5 	bl	8002af4 <RCCEx_PLLSAI1_Config>
 800290a:	4603      	mov	r3, r0
 800290c:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800290e:	7ffb      	ldrb	r3, [r7, #31]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8002914:	7ffb      	ldrb	r3, [r7, #31]
 8002916:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d04a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800292c:	d108      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x554>
 800292e:	4b70      	ldr	r3, [pc, #448]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002930:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002934:	4a6e      	ldr	r2, [pc, #440]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800293a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800293e:	e012      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002940:	4b6b      	ldr	r3, [pc, #428]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002946:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800294e:	4968      	ldr	r1, [pc, #416]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002956:	4b66      	ldr	r3, [pc, #408]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002958:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800295c:	4a64      	ldr	r2, [pc, #400]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800295e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002962:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800296a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800296e:	d10d      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3304      	adds	r3, #4
 8002974:	2101      	movs	r1, #1
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f8bc 	bl	8002af4 <RCCEx_PLLSAI1_Config>
 800297c:	4603      	mov	r3, r0
 800297e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002980:	7ffb      	ldrb	r3, [r7, #31]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d019      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8002986:	7ffb      	ldrb	r3, [r7, #31]
 8002988:	77bb      	strb	r3, [r7, #30]
 800298a:	e016      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002990:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002994:	d106      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002996:	4b56      	ldr	r3, [pc, #344]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	4a55      	ldr	r2, [pc, #340]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800299c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029a0:	60d3      	str	r3, [r2, #12]
 80029a2:	e00a      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ac:	d105      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029ae:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	4a4f      	ldr	r2, [pc, #316]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d028      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029c6:	4b4a      	ldr	r3, [pc, #296]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029d4:	4946      	ldr	r1, [pc, #280]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029e4:	d106      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e6:	4b42      	ldr	r3, [pc, #264]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	4a41      	ldr	r2, [pc, #260]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80029ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029f0:	60d3      	str	r3, [r2, #12]
 80029f2:	e011      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3304      	adds	r3, #4
 8002a02:	2101      	movs	r1, #1
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 f875 	bl	8002af4 <RCCEx_PLLSAI1_Config>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002a0e:	7ffb      	ldrb	r3, [r7, #31]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8002a14:	7ffb      	ldrb	r3, [r7, #31]
 8002a16:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01e      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a24:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a34:	492e      	ldr	r1, [pc, #184]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a46:	d10c      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f850 	bl	8002af4 <RCCEx_PLLSAI1_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002a58:	7ffb      	ldrb	r3, [r7, #31]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8002a5e:	7ffb      	ldrb	r3, [r7, #31]
 8002a60:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a6e:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a74:	f023 0204 	bic.w	r2, r3, #4
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a7e:	491c      	ldr	r1, [pc, #112]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00b      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002a92:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a98:	f023 0218 	bic.w	r2, r3, #24
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	4913      	ldr	r1, [pc, #76]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d017      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002ab8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002abc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ac6:	490a      	ldr	r1, [pc, #40]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ad4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ad8:	d105      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ada:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002ae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002ae6:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3720      	adds	r7, #32
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000

08002af4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d018      	beq.n	8002b3c <RCCEx_PLLSAI1_Config+0x48>
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d81f      	bhi.n	8002b4e <RCCEx_PLLSAI1_Config+0x5a>
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d002      	beq.n	8002b18 <RCCEx_PLLSAI1_Config+0x24>
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d009      	beq.n	8002b2a <RCCEx_PLLSAI1_Config+0x36>
 8002b16:	e01a      	b.n	8002b4e <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b18:	4b65      	ldr	r3, [pc, #404]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d117      	bne.n	8002b54 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b28:	e014      	b.n	8002b54 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b2a:	4b61      	ldr	r3, [pc, #388]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d110      	bne.n	8002b58 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b3a:	e00d      	b.n	8002b58 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8002b3c:	4b5c      	ldr	r3, [pc, #368]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d109      	bne.n	8002b5c <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4c:	e006      	b.n	8002b5c <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	73fb      	strb	r3, [r7, #15]
      break;
 8002b52:	e004      	b.n	8002b5e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002b54:	bf00      	nop
 8002b56:	e002      	b.n	8002b5e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002b58:	bf00      	nop
 8002b5a:	e000      	b.n	8002b5e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002b5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f040 809f 	bne.w	8002ca4 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b66:	4b52      	ldr	r3, [pc, #328]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a51      	ldr	r2, [pc, #324]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002b6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b72:	f7fd fff1 	bl	8000b58 <HAL_GetTick>
 8002b76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b78:	e00f      	b.n	8002b9a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b7a:	f7fd ffed 	bl	8000b58 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d908      	bls.n	8002b9a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b88:	4b49      	ldr	r3, [pc, #292]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d009      	beq.n	8002ba8 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002b98:	e006      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b9a:	4b45      	ldr	r3, [pc, #276]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1e9      	bne.n	8002b7a <RCCEx_PLLSAI1_Config+0x86>
 8002ba6:	e000      	b.n	8002baa <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8002ba8:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d179      	bne.n	8002ca4 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d116      	bne.n	8002be4 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bb6:	4b3e      	ldr	r3, [pc, #248]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	4b3e      	ldr	r3, [pc, #248]	; (8002cb4 <RCCEx_PLLSAI1_Config+0x1c0>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6892      	ldr	r2, [r2, #8]
 8002bc2:	0211      	lsls	r1, r2, #8
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	68d2      	ldr	r2, [r2, #12]
 8002bc8:	06d2      	lsls	r2, r2, #27
 8002bca:	4311      	orrs	r1, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6852      	ldr	r2, [r2, #4]
 8002bd0:	3a01      	subs	r2, #1
 8002bd2:	0112      	lsls	r2, r2, #4
 8002bd4:	4311      	orrs	r1, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	4934      	ldr	r1, [pc, #208]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	610b      	str	r3, [r1, #16]
 8002be2:	e033      	b.n	8002c4c <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d118      	bne.n	8002c1c <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bea:	4b31      	ldr	r3, [pc, #196]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <RCCEx_PLLSAI1_Config+0x1c4>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6892      	ldr	r2, [r2, #8]
 8002bf6:	0211      	lsls	r1, r2, #8
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6912      	ldr	r2, [r2, #16]
 8002bfc:	0852      	lsrs	r2, r2, #1
 8002bfe:	3a01      	subs	r2, #1
 8002c00:	0552      	lsls	r2, r2, #21
 8002c02:	4311      	orrs	r1, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6852      	ldr	r2, [r2, #4]
 8002c08:	3a01      	subs	r2, #1
 8002c0a:	0112      	lsls	r2, r2, #4
 8002c0c:	4311      	orrs	r1, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	4926      	ldr	r1, [pc, #152]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	610b      	str	r3, [r1, #16]
 8002c1a:	e017      	b.n	8002c4c <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c1c:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <RCCEx_PLLSAI1_Config+0x1c8>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6892      	ldr	r2, [r2, #8]
 8002c28:	0211      	lsls	r1, r2, #8
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6952      	ldr	r2, [r2, #20]
 8002c2e:	0852      	lsrs	r2, r2, #1
 8002c30:	3a01      	subs	r2, #1
 8002c32:	0652      	lsls	r2, r2, #25
 8002c34:	4311      	orrs	r1, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6852      	ldr	r2, [r2, #4]
 8002c3a:	3a01      	subs	r2, #1
 8002c3c:	0112      	lsls	r2, r2, #4
 8002c3e:	4311      	orrs	r1, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	491a      	ldr	r1, [pc, #104]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c4c:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a17      	ldr	r2, [pc, #92]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c58:	f7fd ff7e 	bl	8000b58 <HAL_GetTick>
 8002c5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c5e:	e00f      	b.n	8002c80 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c60:	f7fd ff7a 	bl	8000b58 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d908      	bls.n	8002c80 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c6e:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8002c7e:	e006      	b.n	8002c8e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0e9      	beq.n	8002c60 <RCCEx_PLLSAI1_Config+0x16c>
 8002c8c:	e000      	b.n	8002c90 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8002c8e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c98:	691a      	ldr	r2, [r3, #16]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	4904      	ldr	r1, [pc, #16]	; (8002cb0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	07ff800c 	.word	0x07ff800c
 8002cb8:	ff9f800c 	.word	0xff9f800c
 8002cbc:	f9ff800c 	.word	0xf9ff800c

08002cc0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d018      	beq.n	8002d08 <RCCEx_PLLSAI2_Config+0x48>
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d81f      	bhi.n	8002d1a <RCCEx_PLLSAI2_Config+0x5a>
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d002      	beq.n	8002ce4 <RCCEx_PLLSAI2_Config+0x24>
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d009      	beq.n	8002cf6 <RCCEx_PLLSAI2_Config+0x36>
 8002ce2:	e01a      	b.n	8002d1a <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ce4:	4b4a      	ldr	r3, [pc, #296]	; (8002e10 <RCCEx_PLLSAI2_Config+0x150>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d117      	bne.n	8002d20 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf4:	e014      	b.n	8002d20 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cf6:	4b46      	ldr	r3, [pc, #280]	; (8002e10 <RCCEx_PLLSAI2_Config+0x150>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d110      	bne.n	8002d24 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d06:	e00d      	b.n	8002d24 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8002d08:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <RCCEx_PLLSAI2_Config+0x150>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d109      	bne.n	8002d28 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d18:	e006      	b.n	8002d28 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d1e:	e004      	b.n	8002d2a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8002d20:	bf00      	nop
 8002d22:	e002      	b.n	8002d2a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8002d24:	bf00      	nop
 8002d26:	e000      	b.n	8002d2a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8002d28:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d169      	bne.n	8002e04 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d30:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <RCCEx_PLLSAI2_Config+0x150>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a36      	ldr	r2, [pc, #216]	; (8002e10 <RCCEx_PLLSAI2_Config+0x150>)
 8002d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d3c:	f7fd ff0c 	bl	8000b58 <HAL_GetTick>
 8002d40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d42:	e00f      	b.n	8002d64 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d44:	f7fd ff08 	bl	8000b58 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d908      	bls.n	8002d64 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d52:	4b2f      	ldr	r3, [pc, #188]	; (8002e10 <RCCEx_PLLSAI2_Config+0x150>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d62:	e006      	b.n	8002d72 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d64:	4b2a      	ldr	r3, [pc, #168]	; (8002e10 <RCCEx_PLLSAI2_Config+0x150>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1e9      	bne.n	8002d44 <RCCEx_PLLSAI2_Config+0x84>
 8002d70:	e000      	b.n	8002d74 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8002d72:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d144      	bne.n	8002e04 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d115      	bne.n	8002dac <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d80:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <RCCEx_PLLSAI2_Config+0x150>)
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	4b23      	ldr	r3, [pc, #140]	; (8002e14 <RCCEx_PLLSAI2_Config+0x154>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6892      	ldr	r2, [r2, #8]
 8002d8c:	0211      	lsls	r1, r2, #8
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68d2      	ldr	r2, [r2, #12]
 8002d92:	06d2      	lsls	r2, r2, #27
 8002d94:	4311      	orrs	r1, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6852      	ldr	r2, [r2, #4]
 8002d9a:	3a01      	subs	r2, #1
 8002d9c:	0112      	lsls	r2, r2, #4
 8002d9e:	4311      	orrs	r1, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	491a      	ldr	r1, [pc, #104]	; (8002e10 <RCCEx_PLLSAI2_Config+0x150>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002dac:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <RCCEx_PLLSAI2_Config+0x150>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <RCCEx_PLLSAI2_Config+0x150>)
 8002db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db8:	f7fd fece 	bl	8000b58 <HAL_GetTick>
 8002dbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dbe:	e00f      	b.n	8002de0 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dc0:	f7fd feca 	bl	8000b58 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d908      	bls.n	8002de0 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dce:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <RCCEx_PLLSAI2_Config+0x150>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8002dde:	e006      	b.n	8002dee <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <RCCEx_PLLSAI2_Config+0x150>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0e9      	beq.n	8002dc0 <RCCEx_PLLSAI2_Config+0x100>
 8002dec:	e000      	b.n	8002df0 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8002dee:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8002df6:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <RCCEx_PLLSAI2_Config+0x150>)
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	4904      	ldr	r1, [pc, #16]	; (8002e10 <RCCEx_PLLSAI2_Config+0x150>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	07ff800c 	.word	0x07ff800c

08002e18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e095      	b.n	8002f56 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d108      	bne.n	8002e44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e3a:	d009      	beq.n	8002e50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	61da      	str	r2, [r3, #28]
 8002e42:	e005      	b.n	8002e50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fd fc18 	bl	80006a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e90:	d902      	bls.n	8002e98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	e002      	b.n	8002e9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ea6:	d007      	beq.n	8002eb8 <HAL_SPI_Init+0xa0>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002eb0:	d002      	beq.n	8002eb8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efa:	ea42 0103 	orr.w	r1, r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	0c1b      	lsrs	r3, r3, #16
 8002f14:	f003 0204 	and.w	r2, r3, #4
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f34:	ea42 0103 	orr.w	r1, r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b088      	sub	sp, #32
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_SPI_Transmit+0x22>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e158      	b.n	8003232 <HAL_SPI_Transmit+0x2d4>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f88:	f7fd fde6 	bl	8000b58 <HAL_GetTick>
 8002f8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d002      	beq.n	8002fa4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fa2:	e13d      	b.n	8003220 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_SPI_Transmit+0x52>
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fb4:	e134      	b.n	8003220 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2203      	movs	r2, #3
 8002fba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	88fa      	ldrh	r2, [r7, #6]
 8002fce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	88fa      	ldrh	r2, [r7, #6]
 8002fd4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003000:	d10f      	bne.n	8003022 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003010:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003020:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302c:	2b40      	cmp	r3, #64	; 0x40
 800302e:	d007      	beq.n	8003040 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800303e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003048:	d94b      	bls.n	80030e2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_SPI_Transmit+0xfa>
 8003052:	8afb      	ldrh	r3, [r7, #22]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d13e      	bne.n	80030d6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	881a      	ldrh	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003068:	1c9a      	adds	r2, r3, #2
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800307c:	e02b      	b.n	80030d6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b02      	cmp	r3, #2
 800308a:	d112      	bne.n	80030b2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	881a      	ldrh	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	1c9a      	adds	r2, r3, #2
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030b0:	e011      	b.n	80030d6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030b2:	f7fd fd51 	bl	8000b58 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d803      	bhi.n	80030ca <HAL_SPI_Transmit+0x16c>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c8:	d102      	bne.n	80030d0 <HAL_SPI_Transmit+0x172>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d102      	bne.n	80030d6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030d4:	e0a4      	b.n	8003220 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1ce      	bne.n	800307e <HAL_SPI_Transmit+0x120>
 80030e0:	e07c      	b.n	80031dc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_SPI_Transmit+0x192>
 80030ea:	8afb      	ldrh	r3, [r7, #22]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d170      	bne.n	80031d2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d912      	bls.n	8003120 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fe:	881a      	ldrh	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	1c9a      	adds	r2, r3, #2
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b02      	subs	r3, #2
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800311e:	e058      	b.n	80031d2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	330c      	adds	r3, #12
 800312a:	7812      	ldrb	r2, [r2, #0]
 800312c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003146:	e044      	b.n	80031d2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b02      	cmp	r3, #2
 8003154:	d12b      	bne.n	80031ae <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d912      	bls.n	8003186 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	881a      	ldrh	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	1c9a      	adds	r2, r3, #2
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b02      	subs	r3, #2
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003184:	e025      	b.n	80031d2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	330c      	adds	r3, #12
 8003190:	7812      	ldrb	r2, [r2, #0]
 8003192:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031ac:	e011      	b.n	80031d2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031ae:	f7fd fcd3 	bl	8000b58 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d803      	bhi.n	80031c6 <HAL_SPI_Transmit+0x268>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c4:	d102      	bne.n	80031cc <HAL_SPI_Transmit+0x26e>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d102      	bne.n	80031d2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031d0:	e026      	b.n	8003220 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1b5      	bne.n	8003148 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	6839      	ldr	r1, [r7, #0]
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 fce3 	bl	8003bac <SPI_EndRxTxTransaction>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10a      	bne.n	8003210 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	77fb      	strb	r3, [r7, #31]
 800321c:	e000      	b.n	8003220 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800321e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003230:	7ffb      	ldrb	r3, [r7, #31]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b088      	sub	sp, #32
 800323e:	af02      	add	r7, sp, #8
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	603b      	str	r3, [r7, #0]
 8003246:	4613      	mov	r3, r2
 8003248:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003256:	d112      	bne.n	800327e <HAL_SPI_Receive+0x44>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10e      	bne.n	800327e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2204      	movs	r2, #4
 8003264:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003268:	88fa      	ldrh	r2, [r7, #6]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	4613      	mov	r3, r2
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f910 	bl	800349a <HAL_SPI_TransmitReceive>
 800327a:	4603      	mov	r3, r0
 800327c:	e109      	b.n	8003492 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_SPI_Receive+0x52>
 8003288:	2302      	movs	r3, #2
 800328a:	e102      	b.n	8003492 <HAL_SPI_Receive+0x258>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003294:	f7fd fc60 	bl	8000b58 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d002      	beq.n	80032ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80032a6:	2302      	movs	r3, #2
 80032a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80032aa:	e0e9      	b.n	8003480 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <HAL_SPI_Receive+0x7e>
 80032b2:	88fb      	ldrh	r3, [r7, #6]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80032bc:	e0e0      	b.n	8003480 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2204      	movs	r2, #4
 80032c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	88fa      	ldrh	r2, [r7, #6]
 80032d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	88fa      	ldrh	r2, [r7, #6]
 80032de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003308:	d908      	bls.n	800331c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	e007      	b.n	800332c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800332a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003334:	d10f      	bne.n	8003356 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003344:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003354:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	d007      	beq.n	8003374 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003372:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800337c:	d867      	bhi.n	800344e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800337e:	e030      	b.n	80033e2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b01      	cmp	r3, #1
 800338c:	d117      	bne.n	80033be <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f103 020c 	add.w	r2, r3, #12
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	7812      	ldrb	r2, [r2, #0]
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80033bc:	e011      	b.n	80033e2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033be:	f7fd fbcb 	bl	8000b58 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d803      	bhi.n	80033d6 <HAL_SPI_Receive+0x19c>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d102      	bne.n	80033dc <HAL_SPI_Receive+0x1a2>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d102      	bne.n	80033e2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80033e0:	e04e      	b.n	8003480 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1c8      	bne.n	8003380 <HAL_SPI_Receive+0x146>
 80033ee:	e034      	b.n	800345a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d115      	bne.n	800342a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	b292      	uxth	r2, r2
 800340a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	1c9a      	adds	r2, r3, #2
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003428:	e011      	b.n	800344e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800342a:	f7fd fb95 	bl	8000b58 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d803      	bhi.n	8003442 <HAL_SPI_Receive+0x208>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003440:	d102      	bne.n	8003448 <HAL_SPI_Receive+0x20e>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d102      	bne.n	800344e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800344c:	e018      	b.n	8003480 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1ca      	bne.n	80033f0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	6839      	ldr	r1, [r7, #0]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 fb4c 	bl	8003afc <SPI_EndRxTransaction>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2220      	movs	r2, #32
 800346e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	75fb      	strb	r3, [r7, #23]
 800347c:	e000      	b.n	8003480 <HAL_SPI_Receive+0x246>
  }

error :
 800347e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003490:	7dfb      	ldrb	r3, [r7, #23]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b08a      	sub	sp, #40	; 0x28
 800349e:	af00      	add	r7, sp, #0
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034a8:	2301      	movs	r3, #1
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_SPI_TransmitReceive+0x26>
 80034bc:	2302      	movs	r3, #2
 80034be:	e1fb      	b.n	80038b8 <HAL_SPI_TransmitReceive+0x41e>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034c8:	f7fd fb46 	bl	8000b58 <HAL_GetTick>
 80034cc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034d4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80034dc:	887b      	ldrh	r3, [r7, #2]
 80034de:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80034e0:	887b      	ldrh	r3, [r7, #2]
 80034e2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034e4:	7efb      	ldrb	r3, [r7, #27]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d00e      	beq.n	8003508 <HAL_SPI_TransmitReceive+0x6e>
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034f0:	d106      	bne.n	8003500 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d102      	bne.n	8003500 <HAL_SPI_TransmitReceive+0x66>
 80034fa:	7efb      	ldrb	r3, [r7, #27]
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d003      	beq.n	8003508 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003500:	2302      	movs	r3, #2
 8003502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003506:	e1cd      	b.n	80038a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_SPI_TransmitReceive+0x80>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <HAL_SPI_TransmitReceive+0x80>
 8003514:	887b      	ldrh	r3, [r7, #2]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d103      	bne.n	8003522 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003520:	e1c0      	b.n	80038a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b04      	cmp	r3, #4
 800352c:	d003      	beq.n	8003536 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2205      	movs	r2, #5
 8003532:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	887a      	ldrh	r2, [r7, #2]
 8003546:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	887a      	ldrh	r2, [r7, #2]
 800354e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	887a      	ldrh	r2, [r7, #2]
 800355c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	887a      	ldrh	r2, [r7, #2]
 8003562:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003578:	d802      	bhi.n	8003580 <HAL_SPI_TransmitReceive+0xe6>
 800357a:	8a3b      	ldrh	r3, [r7, #16]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d908      	bls.n	8003592 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	e007      	b.n	80035a2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035a0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ac:	2b40      	cmp	r3, #64	; 0x40
 80035ae:	d007      	beq.n	80035c0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035c8:	d97c      	bls.n	80036c4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <HAL_SPI_TransmitReceive+0x13e>
 80035d2:	8a7b      	ldrh	r3, [r7, #18]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d169      	bne.n	80036ac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	881a      	ldrh	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	1c9a      	adds	r2, r3, #2
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035fc:	e056      	b.n	80036ac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b02      	cmp	r3, #2
 800360a:	d11b      	bne.n	8003644 <HAL_SPI_TransmitReceive+0x1aa>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d016      	beq.n	8003644 <HAL_SPI_TransmitReceive+0x1aa>
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	2b01      	cmp	r3, #1
 800361a:	d113      	bne.n	8003644 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	881a      	ldrh	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	1c9a      	adds	r2, r3, #2
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d11c      	bne.n	800368c <HAL_SPI_TransmitReceive+0x1f2>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d016      	beq.n	800368c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	b292      	uxth	r2, r2
 800366a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	1c9a      	adds	r2, r3, #2
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003688:	2301      	movs	r3, #1
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800368c:	f7fd fa64 	bl	8000b58 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003698:	429a      	cmp	r2, r3
 800369a:	d807      	bhi.n	80036ac <HAL_SPI_TransmitReceive+0x212>
 800369c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a2:	d003      	beq.n	80036ac <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80036aa:	e0fb      	b.n	80038a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1a3      	bne.n	80035fe <HAL_SPI_TransmitReceive+0x164>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d19d      	bne.n	80035fe <HAL_SPI_TransmitReceive+0x164>
 80036c2:	e0df      	b.n	8003884 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_SPI_TransmitReceive+0x23a>
 80036cc:	8a7b      	ldrh	r3, [r7, #18]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	f040 80cb 	bne.w	800386a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d912      	bls.n	8003704 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	881a      	ldrh	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	1c9a      	adds	r2, r3, #2
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b02      	subs	r3, #2
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003702:	e0b2      	b.n	800386a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	330c      	adds	r3, #12
 800370e:	7812      	ldrb	r2, [r2, #0]
 8003710:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800372a:	e09e      	b.n	800386a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b02      	cmp	r3, #2
 8003738:	d134      	bne.n	80037a4 <HAL_SPI_TransmitReceive+0x30a>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d02f      	beq.n	80037a4 <HAL_SPI_TransmitReceive+0x30a>
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	2b01      	cmp	r3, #1
 8003748:	d12c      	bne.n	80037a4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	d912      	bls.n	800377a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	881a      	ldrh	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	1c9a      	adds	r2, r3, #2
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b02      	subs	r3, #2
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003778:	e012      	b.n	80037a0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	330c      	adds	r3, #12
 8003784:	7812      	ldrb	r2, [r2, #0]
 8003786:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d148      	bne.n	8003844 <HAL_SPI_TransmitReceive+0x3aa>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d042      	beq.n	8003844 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d923      	bls.n	8003812 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	b292      	uxth	r2, r2
 80037d6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	1c9a      	adds	r2, r3, #2
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3b02      	subs	r3, #2
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d81f      	bhi.n	8003840 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800380e:	605a      	str	r2, [r3, #4]
 8003810:	e016      	b.n	8003840 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f103 020c 	add.w	r2, r3, #12
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	7812      	ldrb	r2, [r2, #0]
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003840:	2301      	movs	r3, #1
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003844:	f7fd f988 	bl	8000b58 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003850:	429a      	cmp	r2, r3
 8003852:	d803      	bhi.n	800385c <HAL_SPI_TransmitReceive+0x3c2>
 8003854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385a:	d102      	bne.n	8003862 <HAL_SPI_TransmitReceive+0x3c8>
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003868:	e01c      	b.n	80038a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	f47f af5b 	bne.w	800372c <HAL_SPI_TransmitReceive+0x292>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	f47f af54 	bne.w	800372c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f98f 	bl	8003bac <SPI_EndRxTxTransaction>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d006      	beq.n	80038a2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	661a      	str	r2, [r3, #96]	; 0x60
 80038a0:	e000      	b.n	80038a4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80038a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80038b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3728      	adds	r7, #40	; 0x28
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	4613      	mov	r3, r2
 80038ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038d0:	f7fd f942 	bl	8000b58 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	4413      	add	r3, r2
 80038de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038e0:	f7fd f93a 	bl	8000b58 <HAL_GetTick>
 80038e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038e6:	4b39      	ldr	r3, [pc, #228]	; (80039cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	015b      	lsls	r3, r3, #5
 80038ec:	0d1b      	lsrs	r3, r3, #20
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	fb02 f303 	mul.w	r3, r2, r3
 80038f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038f6:	e054      	b.n	80039a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fe:	d050      	beq.n	80039a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003900:	f7fd f92a 	bl	8000b58 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	429a      	cmp	r2, r3
 800390e:	d902      	bls.n	8003916 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d13d      	bne.n	8003992 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003924:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800392e:	d111      	bne.n	8003954 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003938:	d004      	beq.n	8003944 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003942:	d107      	bne.n	8003954 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003952:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800395c:	d10f      	bne.n	800397e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800397c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e017      	b.n	80039c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	3b01      	subs	r3, #1
 80039a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4013      	ands	r3, r2
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	bf0c      	ite	eq
 80039b2:	2301      	moveq	r3, #1
 80039b4:	2300      	movne	r3, #0
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d19b      	bne.n	80038f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3720      	adds	r7, #32
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000000 	.word	0x20000000

080039d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08a      	sub	sp, #40	; 0x28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80039e2:	f7fd f8b9 	bl	8000b58 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	4413      	add	r3, r2
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80039f2:	f7fd f8b1 	bl	8000b58 <HAL_GetTick>
 80039f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	330c      	adds	r3, #12
 80039fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003a00:	4b3d      	ldr	r3, [pc, #244]	; (8003af8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	00da      	lsls	r2, r3, #3
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	0d1b      	lsrs	r3, r3, #20
 8003a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a12:	fb02 f303 	mul.w	r3, r2, r3
 8003a16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003a18:	e060      	b.n	8003adc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a20:	d107      	bne.n	8003a32 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d104      	bne.n	8003a32 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d050      	beq.n	8003adc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a3a:	f7fd f88d 	bl	8000b58 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d902      	bls.n	8003a50 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d13d      	bne.n	8003acc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a68:	d111      	bne.n	8003a8e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a72:	d004      	beq.n	8003a7e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a7c:	d107      	bne.n	8003a8e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a96:	d10f      	bne.n	8003ab8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ab6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e010      	b.n	8003aee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d196      	bne.n	8003a1a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3728      	adds	r7, #40	; 0x28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000000 	.word	0x20000000

08003afc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b10:	d111      	bne.n	8003b36 <SPI_EndRxTransaction+0x3a>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b1a:	d004      	beq.n	8003b26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b24:	d107      	bne.n	8003b36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b34:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2180      	movs	r1, #128	; 0x80
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f7ff febd 	bl	80038c0 <SPI_WaitFlagStateUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b50:	f043 0220 	orr.w	r2, r3, #32
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e023      	b.n	8003ba4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b64:	d11d      	bne.n	8003ba2 <SPI_EndRxTransaction+0xa6>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b6e:	d004      	beq.n	8003b7a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b78:	d113      	bne.n	8003ba2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f7ff ff22 	bl	80039d0 <SPI_WaitFifoStateUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b96:	f043 0220 	orr.w	r2, r3, #32
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e000      	b.n	8003ba4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f7ff ff03 	bl	80039d0 <SPI_WaitFifoStateUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d007      	beq.n	8003be0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd4:	f043 0220 	orr.w	r2, r3, #32
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e027      	b.n	8003c30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2200      	movs	r2, #0
 8003be8:	2180      	movs	r1, #128	; 0x80
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f7ff fe68 	bl	80038c0 <SPI_WaitFlagStateUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d007      	beq.n	8003c06 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bfa:	f043 0220 	orr.w	r2, r3, #32
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e014      	b.n	8003c30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7ff fedc 	bl	80039d0 <SPI_WaitFifoStateUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d007      	beq.n	8003c2e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c22:	f043 0220 	orr.w	r2, r3, #32
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e000      	b.n	8003c30 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c40:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003c44:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	4013      	ands	r3, r2
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c6e:	b084      	sub	sp, #16
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	f107 0014 	add.w	r0, r7, #20
 8003c7c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	b004      	add	sp, #16
 8003cae:	4770      	bx	lr

08003cb0 <__libc_init_array>:
 8003cb0:	b570      	push	{r4, r5, r6, lr}
 8003cb2:	4d0d      	ldr	r5, [pc, #52]	; (8003ce8 <__libc_init_array+0x38>)
 8003cb4:	2600      	movs	r6, #0
 8003cb6:	4c0d      	ldr	r4, [pc, #52]	; (8003cec <__libc_init_array+0x3c>)
 8003cb8:	1b64      	subs	r4, r4, r5
 8003cba:	10a4      	asrs	r4, r4, #2
 8003cbc:	42a6      	cmp	r6, r4
 8003cbe:	d109      	bne.n	8003cd4 <__libc_init_array+0x24>
 8003cc0:	4d0b      	ldr	r5, [pc, #44]	; (8003cf0 <__libc_init_array+0x40>)
 8003cc2:	2600      	movs	r6, #0
 8003cc4:	4c0b      	ldr	r4, [pc, #44]	; (8003cf4 <__libc_init_array+0x44>)
 8003cc6:	f000 f81f 	bl	8003d08 <_init>
 8003cca:	1b64      	subs	r4, r4, r5
 8003ccc:	10a4      	asrs	r4, r4, #2
 8003cce:	42a6      	cmp	r6, r4
 8003cd0:	d105      	bne.n	8003cde <__libc_init_array+0x2e>
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}
 8003cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd8:	3601      	adds	r6, #1
 8003cda:	4798      	blx	r3
 8003cdc:	e7ee      	b.n	8003cbc <__libc_init_array+0xc>
 8003cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce2:	3601      	adds	r6, #1
 8003ce4:	4798      	blx	r3
 8003ce6:	e7f2      	b.n	8003cce <__libc_init_array+0x1e>
 8003ce8:	08003d78 	.word	0x08003d78
 8003cec:	08003d78 	.word	0x08003d78
 8003cf0:	08003d78 	.word	0x08003d78
 8003cf4:	08003d7c 	.word	0x08003d7c

08003cf8 <memset>:
 8003cf8:	4402      	add	r2, r0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d100      	bne.n	8003d02 <memset+0xa>
 8003d00:	4770      	bx	lr
 8003d02:	f803 1b01 	strb.w	r1, [r3], #1
 8003d06:	e7f9      	b.n	8003cfc <memset+0x4>

08003d08 <_init>:
 8003d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0a:	bf00      	nop
 8003d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0e:	bc08      	pop	{r3}
 8003d10:	469e      	mov	lr, r3
 8003d12:	4770      	bx	lr

08003d14 <_fini>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	bf00      	nop
 8003d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1a:	bc08      	pop	{r3}
 8003d1c:	469e      	mov	lr, r3
 8003d1e:	4770      	bx	lr
