
zet6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e68  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030ac  080030ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080030ac  080030ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030ac  080030ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030ac  080030ac  000130ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030b0  080030b0  000130b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  2000000c  080030c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  080030c0  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dff8  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c5  00000000  00000000  0002e03a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00030200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  00030e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028462  00000000  00000000  000319a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d866  00000000  00000000  00059e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff212  00000000  00000000  00067670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166882  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c0  00000000  00000000  001668d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08003044 	.word	0x08003044

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08003044 	.word	0x08003044

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fbef 	bl	8000a1a <HAL_Init>

  SystemClock_Config();
 800023c:	f000 f834 	bl	80002a8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f93a 	bl	80004b8 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000244:	f000 f880 	bl	8000348 <MX_ICACHE_Init>
  MX_USB_PCD_Init();
 8000248:	f000 f90e 	bl	8000468 <MX_USB_PCD_Init>
  MX_SPI2_Init();
 800024c:	f000 f890 	bl	8000370 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000250:	f000 f8cc 	bl	80003ec <MX_SPI3_Init>

  while (1)
  {
  	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_7);
 8000254:	2180      	movs	r1, #128	; 0x80
 8000256:	4813      	ldr	r0, [pc, #76]	; (80002a4 <main+0x70>)
 8000258:	f000 ff22 	bl	80010a0 <HAL_GPIO_TogglePin>
  	  HAL_Delay(100);
 800025c:	2064      	movs	r0, #100	; 0x64
 800025e:	f000 fc53 	bl	8000b08 <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000262:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000266:	480f      	ldr	r0, [pc, #60]	; (80002a4 <main+0x70>)
 8000268:	f000 ff1a 	bl	80010a0 <HAL_GPIO_TogglePin>
  	  HAL_Delay(100);
 800026c:	2064      	movs	r0, #100	; 0x64
 800026e:	f000 fc4b 	bl	8000b08 <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_9);
 8000272:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000276:	480b      	ldr	r0, [pc, #44]	; (80002a4 <main+0x70>)
 8000278:	f000 ff12 	bl	80010a0 <HAL_GPIO_TogglePin>
  	  HAL_Delay(100);
 800027c:	2064      	movs	r0, #100	; 0x64
 800027e:	f000 fc43 	bl	8000b08 <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_10);
 8000282:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000286:	4807      	ldr	r0, [pc, #28]	; (80002a4 <main+0x70>)
 8000288:	f000 ff0a 	bl	80010a0 <HAL_GPIO_TogglePin>
  	  HAL_Delay(100);
 800028c:	2064      	movs	r0, #100	; 0x64
 800028e:	f000 fc3b 	bl	8000b08 <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_11);
 8000292:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000296:	4803      	ldr	r0, [pc, #12]	; (80002a4 <main+0x70>)
 8000298:	f000 ff02 	bl	80010a0 <HAL_GPIO_TogglePin>
  	  HAL_Delay(100);
 800029c:	2064      	movs	r0, #100	; 0x64
 800029e:	f000 fc33 	bl	8000b08 <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_7);
 80002a2:	e7d7      	b.n	8000254 <main+0x20>
 80002a4:	42021000 	.word	0x42021000

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b098      	sub	sp, #96	; 0x60
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0318 	add.w	r3, r7, #24
 80002b2:	2248      	movs	r2, #72	; 0x48
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 febc 	bl	8003034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80002ca:	2000      	movs	r0, #0
 80002cc:	f001 f886 	bl	80013dc <HAL_PWREx_ControlVoltageScaling>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x32>
  {
    Error_Handler();
 80002d6:	f000 f953 	bl	8000580 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80002da:	2321      	movs	r3, #33	; 0x21
 80002dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002e4:	2301      	movs	r3, #1
 80002e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e8:	2302      	movs	r3, #2
 80002ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ec:	2303      	movs	r3, #3
 80002ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 8;
 80002f0:	2308      	movs	r3, #8
 80002f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80002f4:	2337      	movs	r3, #55	; 0x37
 80002f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002f8:	2307      	movs	r3, #7
 80002fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002fc:	2302      	movs	r3, #2
 80002fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000300:	2302      	movs	r3, #2
 8000302:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000304:	f107 0318 	add.w	r3, r7, #24
 8000308:	4618      	mov	r0, r3
 800030a:	f001 f8e7 	bl	80014dc <HAL_RCC_OscConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000314:	f000 f934 	bl	8000580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000318:	230f      	movs	r3, #15
 800031a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031c:	2303      	movs	r3, #3
 800031e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2105      	movs	r1, #5
 8000330:	4618      	mov	r0, r3
 8000332:	f001 fda9 	bl	8001e88 <HAL_RCC_ClockConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800033c:	f000 f920 	bl	8000580 <Error_Handler>
  }
}
 8000340:	bf00      	nop
 8000342:	3760      	adds	r7, #96	; 0x60
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800034c:	2000      	movs	r0, #0
 800034e:	f000 fec1 	bl	80010d4 <HAL_ICACHE_ConfigAssociativityMode>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000358:	f000 f912 	bl	8000580 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800035c:	f000 feda 	bl	8001114 <HAL_ICACHE_Enable>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000366:	f000 f90b 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <MX_SPI2_Init+0x74>)
 8000376:	4a1c      	ldr	r2, [pc, #112]	; (80003e8 <MX_SPI2_Init+0x78>)
 8000378:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800037a:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <MX_SPI2_Init+0x74>)
 800037c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000380:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000382:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <MX_SPI2_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000388:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <MX_SPI2_Init+0x74>)
 800038a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800038e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <MX_SPI2_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000396:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <MX_SPI2_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <MX_SPI2_Init+0x74>)
 800039e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <MX_SPI2_Init+0x74>)
 80003a6:	2210      	movs	r2, #16
 80003a8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <MX_SPI2_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <MX_SPI2_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <MX_SPI2_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80003bc:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <MX_SPI2_Init+0x74>)
 80003be:	2207      	movs	r2, #7
 80003c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <MX_SPI2_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <MX_SPI2_Init+0x74>)
 80003ca:	2208      	movs	r2, #8
 80003cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003ce:	4805      	ldr	r0, [pc, #20]	; (80003e4 <MX_SPI2_Init+0x74>)
 80003d0:	f002 fd2c 	bl	8002e2c <HAL_SPI_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80003da:	f000 f8d1 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000028 	.word	0x20000028
 80003e8:	40003800 	.word	0x40003800

080003ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80003f0:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <MX_SPI3_Init+0x74>)
 80003f2:	4a1c      	ldr	r2, [pc, #112]	; (8000464 <MX_SPI3_Init+0x78>)
 80003f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80003f6:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <MX_SPI3_Init+0x74>)
 80003f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80003fe:	4b18      	ldr	r3, [pc, #96]	; (8000460 <MX_SPI3_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000404:	4b16      	ldr	r3, [pc, #88]	; (8000460 <MX_SPI3_Init+0x74>)
 8000406:	f44f 7240 	mov.w	r2, #768	; 0x300
 800040a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800040c:	4b14      	ldr	r3, [pc, #80]	; (8000460 <MX_SPI3_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000412:	4b13      	ldr	r3, [pc, #76]	; (8000460 <MX_SPI3_Init+0x74>)
 8000414:	2200      	movs	r2, #0
 8000416:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <MX_SPI3_Init+0x74>)
 800041a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800041e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <MX_SPI3_Init+0x74>)
 8000422:	2210      	movs	r2, #16
 8000424:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000426:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <MX_SPI3_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800042c:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <MX_SPI3_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000432:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <MX_SPI3_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000438:	4b09      	ldr	r3, [pc, #36]	; (8000460 <MX_SPI3_Init+0x74>)
 800043a:	2207      	movs	r2, #7
 800043c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800043e:	4b08      	ldr	r3, [pc, #32]	; (8000460 <MX_SPI3_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <MX_SPI3_Init+0x74>)
 8000446:	2208      	movs	r2, #8
 8000448:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800044a:	4805      	ldr	r0, [pc, #20]	; (8000460 <MX_SPI3_Init+0x74>)
 800044c:	f002 fcee 	bl	8002e2c <HAL_SPI_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000456:	f000 f893 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	2000008c 	.word	0x2000008c
 8000464:	40003c00 	.word	0x40003c00

08000468 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800046c:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <MX_USB_PCD_Init+0x48>)
 800046e:	4a11      	ldr	r2, [pc, #68]	; (80004b4 <MX_USB_PCD_Init+0x4c>)
 8000470:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_USB_PCD_Init+0x48>)
 8000474:	2208      	movs	r2, #8
 8000476:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000478:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <MX_USB_PCD_Init+0x48>)
 800047a:	2202      	movs	r2, #2
 800047c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <MX_USB_PCD_Init+0x48>)
 8000480:	2202      	movs	r2, #2
 8000482:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000484:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <MX_USB_PCD_Init+0x48>)
 8000486:	2200      	movs	r2, #0
 8000488:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <MX_USB_PCD_Init+0x48>)
 800048c:	2200      	movs	r2, #0
 800048e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <MX_USB_PCD_Init+0x48>)
 8000492:	2200      	movs	r2, #0
 8000494:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <MX_USB_PCD_Init+0x48>)
 8000498:	2200      	movs	r2, #0
 800049a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800049c:	4804      	ldr	r0, [pc, #16]	; (80004b0 <MX_USB_PCD_Init+0x48>)
 800049e:	f000 fe8b 	bl	80011b8 <HAL_PCD_Init>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80004a8:	f000 f86a 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	200000f0 	.word	0x200000f0
 80004b4:	4000d400 	.word	0x4000d400

080004b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	; 0x28
 80004bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ce:	4b2a      	ldr	r3, [pc, #168]	; (8000578 <MX_GPIO_Init+0xc0>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d2:	4a29      	ldr	r2, [pc, #164]	; (8000578 <MX_GPIO_Init+0xc0>)
 80004d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004da:	4b27      	ldr	r3, [pc, #156]	; (8000578 <MX_GPIO_Init+0xc0>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004e2:	613b      	str	r3, [r7, #16]
 80004e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	4b24      	ldr	r3, [pc, #144]	; (8000578 <MX_GPIO_Init+0xc0>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	4a23      	ldr	r2, [pc, #140]	; (8000578 <MX_GPIO_Init+0xc0>)
 80004ec:	f043 0304 	orr.w	r3, r3, #4
 80004f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f2:	4b21      	ldr	r3, [pc, #132]	; (8000578 <MX_GPIO_Init+0xc0>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	f003 0304 	and.w	r3, r3, #4
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004fe:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <MX_GPIO_Init+0xc0>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	4a1d      	ldr	r2, [pc, #116]	; (8000578 <MX_GPIO_Init+0xc0>)
 8000504:	f043 0310 	orr.w	r3, r3, #16
 8000508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050a:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <MX_GPIO_Init+0xc0>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	f003 0310 	and.w	r3, r3, #16
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <MX_GPIO_Init+0xc0>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	4a17      	ldr	r2, [pc, #92]	; (8000578 <MX_GPIO_Init+0xc0>)
 800051c:	f043 0302 	orr.w	r3, r3, #2
 8000520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <MX_GPIO_Init+0xc0>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MX_GPIO_Init+0xc0>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a11      	ldr	r2, [pc, #68]	; (8000578 <MX_GPIO_Init+0xc0>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_GPIO_Init+0xc0>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 800054c:	480b      	ldr	r0, [pc, #44]	; (800057c <MX_GPIO_Init+0xc4>)
 800054e:	f000 fd8f 	bl	8001070 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000552:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 8000556:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	2301      	movs	r3, #1
 800055a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2300      	movs	r3, #0
 8000562:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	4619      	mov	r1, r3
 800056a:	4804      	ldr	r0, [pc, #16]	; (800057c <MX_GPIO_Init+0xc4>)
 800056c:	f000 fc00 	bl	8000d70 <HAL_GPIO_Init>

}
 8000570:	bf00      	nop
 8000572:	3728      	adds	r7, #40	; 0x28
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40021000 	.word	0x40021000
 800057c:	42021000 	.word	0x42021000

08000580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000584:	b672      	cpsid	i
}
 8000586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000588:	e7fe      	b.n	8000588 <Error_Handler+0x8>
	...

0800058c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000592:	4b12      	ldr	r3, [pc, #72]	; (80005dc <HAL_MspInit+0x50>)
 8000594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000596:	4a11      	ldr	r2, [pc, #68]	; (80005dc <HAL_MspInit+0x50>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6613      	str	r3, [r2, #96]	; 0x60
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <HAL_MspInit+0x50>)
 80005a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <HAL_MspInit+0x50>)
 80005ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ae:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <HAL_MspInit+0x50>)
 80005b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b4:	6593      	str	r3, [r2, #88]	; 0x58
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <HAL_MspInit+0x50>)
 80005b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* ICACHE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ICACHE_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	206b      	movs	r0, #107	; 0x6b
 80005c8:	f000 fb9d 	bl	8000d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ICACHE_IRQn);
 80005cc:	206b      	movs	r0, #107	; 0x6b
 80005ce:	f000 fbb4 	bl	8000d3a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000

080005e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	; 0x30
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a45      	ldr	r2, [pc, #276]	; (8000714 <HAL_SPI_MspInit+0x134>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d155      	bne.n	80006ae <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000602:	4b45      	ldr	r3, [pc, #276]	; (8000718 <HAL_SPI_MspInit+0x138>)
 8000604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000606:	4a44      	ldr	r2, [pc, #272]	; (8000718 <HAL_SPI_MspInit+0x138>)
 8000608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060c:	6593      	str	r3, [r2, #88]	; 0x58
 800060e:	4b42      	ldr	r3, [pc, #264]	; (8000718 <HAL_SPI_MspInit+0x138>)
 8000610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000616:	61bb      	str	r3, [r7, #24]
 8000618:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b3f      	ldr	r3, [pc, #252]	; (8000718 <HAL_SPI_MspInit+0x138>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	4a3e      	ldr	r2, [pc, #248]	; (8000718 <HAL_SPI_MspInit+0x138>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000626:	4b3c      	ldr	r3, [pc, #240]	; (8000718 <HAL_SPI_MspInit+0x138>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b39      	ldr	r3, [pc, #228]	; (8000718 <HAL_SPI_MspInit+0x138>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	4a38      	ldr	r2, [pc, #224]	; (8000718 <HAL_SPI_MspInit+0x138>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063e:	4b36      	ldr	r3, [pc, #216]	; (8000718 <HAL_SPI_MspInit+0x138>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800064a:	2302      	movs	r3, #2
 800064c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064e:	2302      	movs	r3, #2
 8000650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800065a:	2303      	movs	r3, #3
 800065c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	482d      	ldr	r0, [pc, #180]	; (800071c <HAL_SPI_MspInit+0x13c>)
 8000666:	f000 fb83 	bl	8000d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800066a:	2304      	movs	r3, #4
 800066c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066e:	2302      	movs	r3, #2
 8000670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800067a:	2305      	movs	r3, #5
 800067c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	4619      	mov	r1, r3
 8000684:	4825      	ldr	r0, [pc, #148]	; (800071c <HAL_SPI_MspInit+0x13c>)
 8000686:	f000 fb73 	bl	8000d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800068a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800068e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800069c:	2305      	movs	r3, #5
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4619      	mov	r1, r3
 80006a6:	481e      	ldr	r0, [pc, #120]	; (8000720 <HAL_SPI_MspInit+0x140>)
 80006a8:	f000 fb62 	bl	8000d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80006ac:	e02d      	b.n	800070a <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI3)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <HAL_SPI_MspInit+0x144>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d128      	bne.n	800070a <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <HAL_SPI_MspInit+0x138>)
 80006ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006bc:	4a16      	ldr	r2, [pc, #88]	; (8000718 <HAL_SPI_MspInit+0x138>)
 80006be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006c2:	6593      	str	r3, [r2, #88]	; 0x58
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <HAL_SPI_MspInit+0x138>)
 80006c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <HAL_SPI_MspInit+0x138>)
 80006d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d4:	4a10      	ldr	r2, [pc, #64]	; (8000718 <HAL_SPI_MspInit+0x138>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <HAL_SPI_MspInit+0x138>)
 80006de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80006e8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80006ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ee:	2302      	movs	r3, #2
 80006f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006fa:	2306      	movs	r3, #6
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <HAL_SPI_MspInit+0x13c>)
 8000706:	f000 fb33 	bl	8000d70 <HAL_GPIO_Init>
}
 800070a:	bf00      	nop
 800070c:	3730      	adds	r7, #48	; 0x30
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40003800 	.word	0x40003800
 8000718:	40021000 	.word	0x40021000
 800071c:	42020800 	.word	0x42020800
 8000720:	42020400 	.word	0x42020400
 8000724:	40003c00 	.word	0x40003c00

08000728 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b0ae      	sub	sp, #184	; 0xb8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	2294      	movs	r2, #148	; 0x94
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f002 fc73 	bl	8003034 <memset>
  if(hpcd->Instance==USB)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a22      	ldr	r2, [pc, #136]	; (80007dc <HAL_PCD_MspInit+0xb4>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d13d      	bne.n	80007d4 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800075e:	2300      	movs	r3, #0
 8000760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fe49 	bl	8002400 <HAL_RCCEx_PeriphCLKConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000774:	f7ff ff04 	bl	8000580 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <HAL_PCD_MspInit+0xb8>)
 800077a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077c:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <HAL_PCD_MspInit+0xb8>)
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <HAL_PCD_MspInit+0xb8>)
 8000786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000790:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000794:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	2302      	movs	r3, #2
 800079a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80007aa:	230a      	movs	r3, #10
 80007ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80007b4:	4619      	mov	r1, r3
 80007b6:	480b      	ldr	r0, [pc, #44]	; (80007e4 <HAL_PCD_MspInit+0xbc>)
 80007b8:	f000 fada 	bl	8000d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <HAL_PCD_MspInit+0xb8>)
 80007be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007c0:	4a07      	ldr	r2, [pc, #28]	; (80007e0 <HAL_PCD_MspInit+0xb8>)
 80007c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007c6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_PCD_MspInit+0xb8>)
 80007ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80007d4:	bf00      	nop
 80007d6:	37b8      	adds	r7, #184	; 0xb8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	4000d400 	.word	0x4000d400
 80007e0:	40021000 	.word	0x40021000
 80007e4:	42020000 	.word	0x42020000

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000834:	f000 f948 	bl	8000ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <ICACHE_IRQHandler>:

/**
  * @brief This function handles Instruction cache global interrupt.
  */
void ICACHE_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_IRQn 0 */

  /* USER CODE END ICACHE_IRQn 0 */
  HAL_ICACHE_IRQHandler();
 8000840:	f000 fc78 	bl	8001134 <HAL_ICACHE_IRQHandler>
  /* USER CODE BEGIN ICACHE_IRQn 1 */

  /* USER CODE END ICACHE_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <SystemInit+0x20>)
 800084e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000852:	4a05      	ldr	r2, [pc, #20]	; (8000868 <SystemInit+0x20>)
 8000854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b087      	sub	sp, #28
 8000870:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000872:	4b4f      	ldr	r3, [pc, #316]	; (80009b0 <SystemCoreClockUpdate+0x144>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	2b00      	cmp	r3, #0
 800087c:	d107      	bne.n	800088e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800087e:	4b4c      	ldr	r3, [pc, #304]	; (80009b0 <SystemCoreClockUpdate+0x144>)
 8000880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	f003 030f 	and.w	r3, r3, #15
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	e005      	b.n	800089a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800088e:	4b48      	ldr	r3, [pc, #288]	; (80009b0 <SystemCoreClockUpdate+0x144>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	091b      	lsrs	r3, r3, #4
 8000894:	f003 030f 	and.w	r3, r3, #15
 8000898:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800089a:	4a46      	ldr	r2, [pc, #280]	; (80009b4 <SystemCoreClockUpdate+0x148>)
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80008a4:	4b42      	ldr	r3, [pc, #264]	; (80009b0 <SystemCoreClockUpdate+0x144>)
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	f003 030c 	and.w	r3, r3, #12
 80008ac:	2b0c      	cmp	r3, #12
 80008ae:	d866      	bhi.n	800097e <SystemCoreClockUpdate+0x112>
 80008b0:	a201      	add	r2, pc, #4	; (adr r2, 80008b8 <SystemCoreClockUpdate+0x4c>)
 80008b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b6:	bf00      	nop
 80008b8:	080008ed 	.word	0x080008ed
 80008bc:	0800097f 	.word	0x0800097f
 80008c0:	0800097f 	.word	0x0800097f
 80008c4:	0800097f 	.word	0x0800097f
 80008c8:	080008f5 	.word	0x080008f5
 80008cc:	0800097f 	.word	0x0800097f
 80008d0:	0800097f 	.word	0x0800097f
 80008d4:	0800097f 	.word	0x0800097f
 80008d8:	080008fd 	.word	0x080008fd
 80008dc:	0800097f 	.word	0x0800097f
 80008e0:	0800097f 	.word	0x0800097f
 80008e4:	0800097f 	.word	0x0800097f
 80008e8:	08000905 	.word	0x08000905
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80008ec:	4a32      	ldr	r2, [pc, #200]	; (80009b8 <SystemCoreClockUpdate+0x14c>)
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	6013      	str	r3, [r2, #0]
      break;
 80008f2:	e048      	b.n	8000986 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80008f4:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <SystemCoreClockUpdate+0x14c>)
 80008f6:	4a31      	ldr	r2, [pc, #196]	; (80009bc <SystemCoreClockUpdate+0x150>)
 80008f8:	601a      	str	r2, [r3, #0]
      break;
 80008fa:	e044      	b.n	8000986 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80008fc:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <SystemCoreClockUpdate+0x14c>)
 80008fe:	4a30      	ldr	r2, [pc, #192]	; (80009c0 <SystemCoreClockUpdate+0x154>)
 8000900:	601a      	str	r2, [r3, #0]
      break;
 8000902:	e040      	b.n	8000986 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000904:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <SystemCoreClockUpdate+0x144>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	f003 0303 	and.w	r3, r3, #3
 800090c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800090e:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <SystemCoreClockUpdate+0x144>)
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	091b      	lsrs	r3, r3, #4
 8000914:	f003 030f 	and.w	r3, r3, #15
 8000918:	3301      	adds	r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b02      	cmp	r3, #2
 8000920:	d003      	beq.n	800092a <SystemCoreClockUpdate+0xbe>
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2b03      	cmp	r3, #3
 8000926:	d006      	beq.n	8000936 <SystemCoreClockUpdate+0xca>
 8000928:	e00b      	b.n	8000942 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800092a:	4a24      	ldr	r2, [pc, #144]	; (80009bc <SystemCoreClockUpdate+0x150>)
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000932:	613b      	str	r3, [r7, #16]
          break;
 8000934:	e00b      	b.n	800094e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000936:	4a22      	ldr	r2, [pc, #136]	; (80009c0 <SystemCoreClockUpdate+0x154>)
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	613b      	str	r3, [r7, #16]
          break;
 8000940:	e005      	b.n	800094e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	613b      	str	r3, [r7, #16]
          break;
 800094c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <SystemCoreClockUpdate+0x144>)
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	0a1b      	lsrs	r3, r3, #8
 8000954:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	fb02 f303 	mul.w	r3, r2, r3
 800095e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <SystemCoreClockUpdate+0x144>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	0e5b      	lsrs	r3, r3, #25
 8000966:	f003 0303 	and.w	r3, r3, #3
 800096a:	3301      	adds	r3, #1
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	fbb2 f3f3 	udiv	r3, r2, r3
 8000978:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <SystemCoreClockUpdate+0x14c>)
 800097a:	6013      	str	r3, [r2, #0]
      break;
 800097c:	e003      	b.n	8000986 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <SystemCoreClockUpdate+0x14c>)
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	6013      	str	r3, [r2, #0]
      break;
 8000984:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <SystemCoreClockUpdate+0x144>)
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	091b      	lsrs	r3, r3, #4
 800098c:	f003 030f 	and.w	r3, r3, #15
 8000990:	4a0c      	ldr	r2, [pc, #48]	; (80009c4 <SystemCoreClockUpdate+0x158>)
 8000992:	5cd3      	ldrb	r3, [r2, r3]
 8000994:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <SystemCoreClockUpdate+0x14c>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	fa22 f303 	lsr.w	r3, r2, r3
 80009a0:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <SystemCoreClockUpdate+0x14c>)
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	bf00      	nop
 80009a6:	371c      	adds	r7, #28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	40021000 	.word	0x40021000
 80009b4:	0800306c 	.word	0x0800306c
 80009b8:	20000000 	.word	0x20000000
 80009bc:	00f42400 	.word	0x00f42400
 80009c0:	01e84800 	.word	0x01e84800
 80009c4:	0800305c 	.word	0x0800305c

080009c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80009c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009cc:	f7ff ff3c 	bl	8000848 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009d2:	e003      	b.n	80009dc <LoopCopyDataInit>

080009d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009da:	3104      	adds	r1, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009dc:	480a      	ldr	r0, [pc, #40]	; (8000a08 <LoopForever+0xa>)
	ldr	r3, =_edata
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <LoopForever+0xe>)
	adds	r2, r0, r1
 80009e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80009e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80009e4:	d3f6      	bcc.n	80009d4 <CopyDataInit>
	ldr	r2, =_sbss
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <LoopForever+0x12>)
	b	LoopFillZerobss
 80009e8:	e002      	b.n	80009f0 <LoopFillZerobss>

080009ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80009ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80009ec:	f842 3b04 	str.w	r3, [r2], #4

080009f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <LoopForever+0x16>)
	cmp	r2, r3
 80009f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80009f4:	d3f9      	bcc.n	80009ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009f6:	f002 faf9 	bl	8002fec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009fa:	f7ff fc1b 	bl	8000234 <main>

080009fe <LoopForever>:

LoopForever:
    b LoopForever
 80009fe:	e7fe      	b.n	80009fe <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000a00:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000a04:	080030b4 	.word	0x080030b4
	ldr	r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a0c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a10:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a14:	200003e8 	.word	0x200003e8

08000a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC1_2_IRQHandler>

08000a1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000a24:	2004      	movs	r0, #4
 8000a26:	f000 f963 	bl	8000cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000a2a:	f7ff ff1f 	bl	800086c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a2e:	2007      	movs	r0, #7
 8000a30:	f000 f80e 	bl	8000a50 <HAL_InitTick>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d002      	beq.n	8000a40 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	71fb      	strb	r3, [r7, #7]
 8000a3e:	e001      	b.n	8000a44 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a40:	f7ff fda4 	bl	800058c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a44:	79fb      	ldrb	r3, [r7, #7]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <HAL_InitTick+0x6c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d023      	beq.n	8000aac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <HAL_InitTick+0x70>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <HAL_InitTick+0x6c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f96b 	bl	8000d56 <HAL_SYSTICK_Config>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d10f      	bne.n	8000aa6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b07      	cmp	r3, #7
 8000a8a:	d809      	bhi.n	8000aa0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	f000 f937 	bl	8000d06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a98:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <HAL_InitTick+0x74>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	e007      	b.n	8000ab0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]
 8000aa4:	e004      	b.n	8000ab0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	73fb      	strb	r3, [r7, #15]
 8000aaa:	e001      	b.n	8000ab0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x24>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_IncTick+0x24>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	200003e4 	.word	0x200003e4

08000af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <HAL_GetTick+0x14>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	200003e4 	.word	0x200003e4

08000b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b10:	f7ff ffee 	bl	8000af0 <HAL_GetTick>
 8000b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b20:	d005      	beq.n	8000b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <HAL_Delay+0x44>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b2e:	bf00      	nop
 8000b30:	f7ff ffde 	bl	8000af0 <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d8f7      	bhi.n	8000b30 <HAL_Delay+0x28>
  {
  }
}
 8000b40:	bf00      	nop
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008

08000b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b82:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	60d3      	str	r3, [r2, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	f003 0307 	and.w	r3, r3, #7
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	db0b      	blt.n	8000bde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	f003 021f 	and.w	r2, r3, #31
 8000bcc:	4907      	ldr	r1, [pc, #28]	; (8000bec <__NVIC_EnableIRQ+0x38>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	095b      	lsrs	r3, r3, #5
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000e100 	.word	0xe000e100

08000bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db0a      	blt.n	8000c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	490c      	ldr	r1, [pc, #48]	; (8000c3c <__NVIC_SetPriority+0x4c>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	0152      	lsls	r2, r2, #5
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	440b      	add	r3, r1
 8000c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c18:	e00a      	b.n	8000c30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4908      	ldr	r1, [pc, #32]	; (8000c40 <__NVIC_SetPriority+0x50>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	3b04      	subs	r3, #4
 8000c28:	0152      	lsls	r2, r2, #5
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	761a      	strb	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	; 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f1c3 0307 	rsb	r3, r3, #7
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	bf28      	it	cs
 8000c62:	2303      	movcs	r3, #3
 8000c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3303      	adds	r3, #3
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d902      	bls.n	8000c74 <NVIC_EncodePriority+0x30>
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3b04      	subs	r3, #4
 8000c72:	e000      	b.n	8000c76 <NVIC_EncodePriority+0x32>
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43da      	mvns	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	43d9      	mvns	r1, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	4313      	orrs	r3, r2
         );
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3724      	adds	r7, #36	; 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cbc:	d301      	bcc.n	8000cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00f      	b.n	8000ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <SysTick_Config+0x40>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cca:	2107      	movs	r1, #7
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f7ff ff8e 	bl	8000bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <SysTick_Config+0x40>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cda:	4b04      	ldr	r3, [pc, #16]	; (8000cec <SysTick_Config+0x40>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	e000e010 	.word	0xe000e010

08000cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ff29 	bl	8000b50 <__NVIC_SetPriorityGrouping>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
 8000d12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d14:	f7ff ff40 	bl	8000b98 <__NVIC_GetPriorityGrouping>
 8000d18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	68b9      	ldr	r1, [r7, #8]
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	f7ff ff90 	bl	8000c44 <NVIC_EncodePriority>
 8000d24:	4602      	mov	r2, r0
 8000d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff5f 	bl	8000bf0 <__NVIC_SetPriority>
}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff33 	bl	8000bb4 <__NVIC_EnableIRQ>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ffa4 	bl	8000cac <SysTick_Config>
 8000d64:	4603      	mov	r3, r0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d7e:	e158      	b.n	8001032 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	2101      	movs	r1, #1
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 814a 	beq.w	800102c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d005      	beq.n	8000db0 <HAL_GPIO_Init+0x40>
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d130      	bne.n	8000e12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2203      	movs	r2, #3
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000de6:	2201      	movs	r2, #1
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	091b      	lsrs	r3, r3, #4
 8000dfc:	f003 0201 	and.w	r2, r3, #1
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d017      	beq.n	8000e4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d123      	bne.n	8000ea2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	08da      	lsrs	r2, r3, #3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3208      	adds	r2, #8
 8000e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	220f      	movs	r2, #15
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	691a      	ldr	r2, [r3, #16]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	08da      	lsrs	r2, r3, #3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3208      	adds	r2, #8
 8000e9c:	6939      	ldr	r1, [r7, #16]
 8000e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	2203      	movs	r2, #3
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 0203 	and.w	r2, r3, #3
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 80a4 	beq.w	800102c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000ee4:	4a5a      	ldr	r2, [pc, #360]	; (8001050 <HAL_GPIO_Init+0x2e0>)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3318      	adds	r3, #24
 8000eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a52      	ldr	r2, [pc, #328]	; (8001054 <HAL_GPIO_Init+0x2e4>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d025      	beq.n	8000f5c <HAL_GPIO_Init+0x1ec>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a51      	ldr	r2, [pc, #324]	; (8001058 <HAL_GPIO_Init+0x2e8>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d01f      	beq.n	8000f58 <HAL_GPIO_Init+0x1e8>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a50      	ldr	r2, [pc, #320]	; (800105c <HAL_GPIO_Init+0x2ec>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d019      	beq.n	8000f54 <HAL_GPIO_Init+0x1e4>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a4f      	ldr	r2, [pc, #316]	; (8001060 <HAL_GPIO_Init+0x2f0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d013      	beq.n	8000f50 <HAL_GPIO_Init+0x1e0>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a4e      	ldr	r2, [pc, #312]	; (8001064 <HAL_GPIO_Init+0x2f4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d00d      	beq.n	8000f4c <HAL_GPIO_Init+0x1dc>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a4d      	ldr	r2, [pc, #308]	; (8001068 <HAL_GPIO_Init+0x2f8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d007      	beq.n	8000f48 <HAL_GPIO_Init+0x1d8>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a4c      	ldr	r2, [pc, #304]	; (800106c <HAL_GPIO_Init+0x2fc>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d101      	bne.n	8000f44 <HAL_GPIO_Init+0x1d4>
 8000f40:	2306      	movs	r3, #6
 8000f42:	e00c      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f44:	2307      	movs	r3, #7
 8000f46:	e00a      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f48:	2305      	movs	r3, #5
 8000f4a:	e008      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	e006      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f50:	2303      	movs	r3, #3
 8000f52:	e004      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f54:	2302      	movs	r3, #2
 8000f56:	e002      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <HAL_GPIO_Init+0x1ee>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	f002 0203 	and.w	r2, r2, #3
 8000f64:	00d2      	lsls	r2, r2, #3
 8000f66:	4093      	lsls	r3, r2
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000f6e:	4938      	ldr	r1, [pc, #224]	; (8001050 <HAL_GPIO_Init+0x2e0>)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	3318      	adds	r3, #24
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f7c:	4b34      	ldr	r3, [pc, #208]	; (8001050 <HAL_GPIO_Init+0x2e0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fa0:	4a2b      	ldr	r2, [pc, #172]	; (8001050 <HAL_GPIO_Init+0x2e0>)
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_GPIO_Init+0x2e0>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fca:	4a21      	ldr	r2, [pc, #132]	; (8001050 <HAL_GPIO_Init+0x2e0>)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <HAL_GPIO_Init+0x2e0>)
 8000fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ff6:	4a16      	ldr	r2, [pc, #88]	; (8001050 <HAL_GPIO_Init+0x2e0>)
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_GPIO_Init+0x2e0>)
 8001000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001024:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <HAL_GPIO_Init+0x2e0>)
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	3301      	adds	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	fa22 f303 	lsr.w	r3, r2, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	f47f ae9f 	bne.w	8000d80 <HAL_GPIO_Init+0x10>
  }
}
 8001042:	bf00      	nop
 8001044:	bf00      	nop
 8001046:	371c      	adds	r7, #28
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	4002f400 	.word	0x4002f400
 8001054:	42020000 	.word	0x42020000
 8001058:	42020400 	.word	0x42020400
 800105c:	42020800 	.word	0x42020800
 8001060:	42020c00 	.word	0x42020c00
 8001064:	42021000 	.word	0x42021000
 8001068:	42021400 	.word	0x42021400
 800106c:	42021800 	.word	0x42021800

08001070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
 800107c:	4613      	mov	r3, r2
 800107e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001080:	787b      	ldrb	r3, [r7, #1]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800108c:	e002      	b.n	8001094 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010b2:	887a      	ldrh	r2, [r7, #2]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4013      	ands	r3, r2
 80010b8:	041a      	lsls	r2, r3, #16
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	43d9      	mvns	r1, r3
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	400b      	ands	r3, r1
 80010c2:	431a      	orrs	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	619a      	str	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e007      	b.n	8001102 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 0204 	bic.w	r2, r3, #4
 80010fa:	4905      	ldr	r1, [pc, #20]	; (8001110 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4313      	orrs	r3, r2
 8001100:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001102:	7bfb      	ldrb	r3, [r7, #15]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	40030400 	.word	0x40030400

08001114 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_ICACHE_Enable+0x1c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <HAL_ICACHE_Enable+0x1c>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	40030400 	.word	0x40030400

08001134 <HAL_ICACHE_IRQHandler>:
  * @note This function respectively disables the interrupt and clears the
  *       flag of any pending flag before calling the associated user callback.
  * @retval None
  */
void HAL_ICACHE_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
  /* Get current interrupt flags and interrupt sources value */
  uint32_t itflags   = READ_REG(ICACHE->SR);
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_ICACHE_IRQHandler+0x64>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	607b      	str	r3, [r7, #4]
  uint32_t itsources = READ_REG(ICACHE->IER);
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_ICACHE_IRQHandler+0x64>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	603b      	str	r3, [r7, #0]

  /* Check Instruction cache Error interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_ERROR) != 0U)
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	4013      	ands	r3, r2
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00a      	beq.n	800116a <HAL_ICACHE_IRQHandler+0x36>
  {
    /* Disable error interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_ERRIE);
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <HAL_ICACHE_IRQHandler+0x64>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	4a0f      	ldr	r2, [pc, #60]	; (8001198 <HAL_ICACHE_IRQHandler+0x64>)
 800115a:	f023 0304 	bic.w	r3, r3, #4
 800115e:	6093      	str	r3, [r2, #8]

    /* Clear ERR pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CERRF);
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <HAL_ICACHE_IRQHandler+0x64>)
 8001162:	2204      	movs	r2, #4
 8001164:	60da      	str	r2, [r3, #12]

    /* Instruction cache error interrupt user callback */
    HAL_ICACHE_ErrorCallback();
 8001166:	f000 f820 	bl	80011aa <HAL_ICACHE_ErrorCallback>
  }

  /* Check Instruction cache BusyEnd interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_BUSYEND) != 0U)
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	4013      	ands	r3, r2
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00a      	beq.n	800118e <HAL_ICACHE_IRQHandler+0x5a>
  {
    /* Disable end of cache invalidation interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_BSYENDIE);
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <HAL_ICACHE_IRQHandler+0x64>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_ICACHE_IRQHandler+0x64>)
 800117e:	f023 0302 	bic.w	r3, r3, #2
 8001182:	6093      	str	r3, [r2, #8]

    /* Clear BSYENDF pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <HAL_ICACHE_IRQHandler+0x64>)
 8001186:	2202      	movs	r2, #2
 8001188:	60da      	str	r2, [r3, #12]

    /* Instruction cache busyend interrupt user callback */
    HAL_ICACHE_InvalidateCompleteCallback();
 800118a:	f000 f807 	bl	800119c <HAL_ICACHE_InvalidateCompleteCallback>
  }
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40030400 	.word	0x40030400

0800119c <HAL_ICACHE_InvalidateCompleteCallback>:

/**
  * @brief  Cache invalidation complete callback.
  */
__weak void HAL_ICACHE_InvalidateCompleteCallback(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <HAL_ICACHE_ErrorCallback>:

/**
  * @brief  Error callback.
  */
__weak void HAL_ICACHE_ErrorCallback(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_ErrorCallback() should be implemented in the user file
   */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ba:	b08b      	sub	sp, #44	; 0x2c
 80011bc:	af06      	add	r7, sp, #24
 80011be:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0cb      	b.n	8001362 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d106      	bne.n	80011e4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff faa2 	bl	8000728 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2203      	movs	r2, #3
 80011e8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 febe 	bl	8002f72 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	e040      	b.n	800127e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	1c5a      	adds	r2, r3, #1
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	440b      	add	r3, r1
 800120c:	3301      	adds	r3, #1
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	440b      	add	r3, r1
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	440b      	add	r3, r1
 8001236:	3303      	adds	r3, #3
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	440b      	add	r3, r1
 800124a:	3338      	adds	r3, #56	; 0x38
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	440b      	add	r3, r1
 800125e:	333c      	adds	r3, #60	; 0x3c
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	440b      	add	r3, r1
 8001272:	3340      	adds	r3, #64	; 0x40
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	3301      	adds	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	d3b9      	bcc.n	80011fc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	e044      	b.n	8001318 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	f203 1369 	addw	r3, r3, #361	; 0x169
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	440b      	add	r3, r1
 80012b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	440b      	add	r3, r1
 80012c8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	440b      	add	r3, r1
 80012de:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	440b      	add	r3, r1
 80012f4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	3301      	adds	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	429a      	cmp	r2, r3
 8001320:	d3b5      	bcc.n	800128e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	687e      	ldr	r6, [r7, #4]
 800132a:	466d      	mov	r5, sp
 800132c:	f106 0410 	add.w	r4, r6, #16
 8001330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	602b      	str	r3, [r5, #0]
 8001338:	1d33      	adds	r3, r6, #4
 800133a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800133c:	6838      	ldr	r0, [r7, #0]
 800133e:	f001 fe33 	bl	8002fa8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d102      	bne.n	8001360 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 f805 	bl	800136a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800136a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800136a:	b480      	push	{r7}
 800136c:	b085      	sub	sp, #20
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800138e:	b29b      	uxth	r3, r3
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	b29a      	uxth	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40007000 	.word	0x40007000

080013dc <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80013e4:	4b27      	ldr	r3, [pc, #156]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ec:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80013ee:	f000 f851 	bl	8001494 <HAL_PWREx_SMPS_GetEffectiveMode>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013f8:	d101      	bne.n	80013fe <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e03e      	b.n	800147c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800140a:	d101      	bne.n	8001410 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e035      	b.n	800147c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	d101      	bne.n	800141c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	e02f      	b.n	800147c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800141c:	4b19      	ldr	r3, [pc, #100]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001424:	4917      	ldr	r1, [pc, #92]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4313      	orrs	r3, r2
 800142a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	095b      	lsrs	r3, r3, #5
 8001432:	4a16      	ldr	r2, [pc, #88]	; (800148c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001434:	fba2 2303 	umull	r2, r3, r2, r3
 8001438:	09db      	lsrs	r3, r3, #7
 800143a:	2232      	movs	r2, #50	; 0x32
 800143c:	fb02 f303 	mul.w	r3, r2, r3
 8001440:	4a13      	ldr	r2, [pc, #76]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001442:	fba2 2303 	umull	r2, r3, r2, r3
 8001446:	08db      	lsrs	r3, r3, #3
 8001448:	3301      	adds	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800144c:	e002      	b.n	8001454 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3b01      	subs	r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800145c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001460:	d102      	bne.n	8001468 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f2      	bne.n	800144e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001474:	d101      	bne.n	800147a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e000      	b.n	800147c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40007000 	.word	0x40007000
 8001488:	20000000 	.word	0x20000000
 800148c:	0a7c5ac5 	.word	0x0a7c5ac5
 8001490:	cccccccd 	.word	0xcccccccd

08001494 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80014aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	e00a      	b.n	80014c8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d103      	bne.n	80014c4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80014bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	e001      	b.n	80014c8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80014c8:	687b      	ldr	r3, [r7, #4]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40007000 	.word	0x40007000

080014dc <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	f000 bcc2 	b.w	8001e74 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014f0:	4b99      	ldr	r3, [pc, #612]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 030c 	and.w	r3, r3, #12
 80014f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014fa:	4b97      	ldr	r3, [pc, #604]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80e9 	beq.w	80016e4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <HAL_RCC_OscConfig+0x4a>
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	2b0c      	cmp	r3, #12
 800151c:	f040 8083 	bne.w	8001626 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d17f      	bne.n	8001626 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001526:	4b8c      	ldr	r3, [pc, #560]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <HAL_RCC_OscConfig+0x64>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d102      	bne.n	8001540 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	f000 bc9a 	b.w	8001e74 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001544:	4b84      	ldr	r3, [pc, #528]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	2b00      	cmp	r3, #0
 800154e:	d004      	beq.n	800155a <HAL_RCC_OscConfig+0x7e>
 8001550:	4b81      	ldr	r3, [pc, #516]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001558:	e005      	b.n	8001566 <HAL_RCC_OscConfig+0x8a>
 800155a:	4b7f      	ldr	r3, [pc, #508]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 800155c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001566:	4293      	cmp	r3, r2
 8001568:	d224      	bcs.n	80015b4 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	4618      	mov	r0, r3
 8001570:	f000 fe74 	bl	800225c <RCC_SetFlashLatencyFromMSIRange>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d002      	beq.n	8001580 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	f000 bc7a 	b.w	8001e74 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001580:	4b75      	ldr	r3, [pc, #468]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a74      	ldr	r2, [pc, #464]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 8001586:	f043 0308 	orr.w	r3, r3, #8
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4b72      	ldr	r3, [pc, #456]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	496f      	ldr	r1, [pc, #444]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800159e:	4b6e      	ldr	r3, [pc, #440]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	496a      	ldr	r1, [pc, #424]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	604b      	str	r3, [r1, #4]
 80015b2:	e026      	b.n	8001602 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015b4:	4b68      	ldr	r3, [pc, #416]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a67      	ldr	r2, [pc, #412]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 80015ba:	f043 0308 	orr.w	r3, r3, #8
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b65      	ldr	r3, [pc, #404]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	4962      	ldr	r1, [pc, #392]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d2:	4b61      	ldr	r3, [pc, #388]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	495d      	ldr	r1, [pc, #372]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10a      	bne.n	8001602 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fe33 	bl	800225c <RCC_SetFlashLatencyFromMSIRange>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	f000 bc39 	b.w	8001e74 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001602:	f000 fe17 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 8001606:	4603      	mov	r3, r0
 8001608:	4a54      	ldr	r2, [pc, #336]	; (800175c <HAL_RCC_OscConfig+0x280>)
 800160a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800160c:	4b54      	ldr	r3, [pc, #336]	; (8001760 <HAL_RCC_OscConfig+0x284>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fa1d 	bl	8000a50 <HAL_InitTick>
 8001616:	4603      	mov	r3, r0
 8001618:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d060      	beq.n	80016e2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	f000 bc27 	b.w	8001e74 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d039      	beq.n	80016a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800162e:	4b4a      	ldr	r3, [pc, #296]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a49      	ldr	r2, [pc, #292]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800163a:	f7ff fa59 	bl	8000af0 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001640:	e00f      	b.n	8001662 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001642:	f7ff fa55 	bl	8000af0 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d908      	bls.n	8001662 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001650:	4b41      	ldr	r3, [pc, #260]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	f000 bc09 	b.w	8001e74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001662:	4b3d      	ldr	r3, [pc, #244]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0e9      	beq.n	8001642 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800166e:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a39      	ldr	r2, [pc, #228]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	4934      	ldr	r1, [pc, #208]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 8001688:	4313      	orrs	r3, r2
 800168a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800168c:	4b32      	ldr	r3, [pc, #200]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	492f      	ldr	r1, [pc, #188]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
 80016a0:	e020      	b.n	80016e4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016a2:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a2c      	ldr	r2, [pc, #176]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016ae:	f7ff fa1f 	bl	8000af0 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016b4:	e00e      	b.n	80016d4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016b6:	f7ff fa1b 	bl	8000af0 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d907      	bls.n	80016d4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016c4:	4b24      	ldr	r3, [pc, #144]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e3cf      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016d4:	4b20      	ldr	r3, [pc, #128]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1ea      	bne.n	80016b6 <HAL_RCC_OscConfig+0x1da>
 80016e0:	e000      	b.n	80016e4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d07e      	beq.n	80017ee <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d005      	beq.n	8001702 <HAL_RCC_OscConfig+0x226>
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	2b0c      	cmp	r3, #12
 80016fa:	d10e      	bne.n	800171a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d10b      	bne.n	800171a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d06e      	beq.n	80017ec <HAL_RCC_OscConfig+0x310>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d16a      	bne.n	80017ec <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e3ac      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001722:	d106      	bne.n	8001732 <HAL_RCC_OscConfig+0x256>
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 800172a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	e024      	b.n	800177c <HAL_RCC_OscConfig+0x2a0>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800173a:	d113      	bne.n	8001764 <HAL_RCC_OscConfig+0x288>
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a05      	ldr	r2, [pc, #20]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 8001742:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a02      	ldr	r2, [pc, #8]	; (8001758 <HAL_RCC_OscConfig+0x27c>)
 800174e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	e012      	b.n	800177c <HAL_RCC_OscConfig+0x2a0>
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	20000000 	.word	0x20000000
 8001760:	20000004 	.word	0x20000004
 8001764:	4b8b      	ldr	r3, [pc, #556]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a8a      	ldr	r2, [pc, #552]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 800176a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b88      	ldr	r3, [pc, #544]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a87      	ldr	r2, [pc, #540]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 8001776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d019      	beq.n	80017b8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff f9b4 	bl	8000af0 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800178a:	e00e      	b.n	80017aa <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff f9b0 	bl	8000af0 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	; 0x64
 8001798:	d907      	bls.n	80017aa <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179a:	4b7e      	ldr	r3, [pc, #504]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e364      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017aa:	4b7a      	ldr	r3, [pc, #488]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0ea      	beq.n	800178c <HAL_RCC_OscConfig+0x2b0>
 80017b6:	e01a      	b.n	80017ee <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff f99a 	bl	8000af0 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017be:	e00e      	b.n	80017de <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff f996 	bl	8000af0 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	; 0x64
 80017cc:	d907      	bls.n	80017de <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ce:	4b71      	ldr	r3, [pc, #452]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e34a      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017de:	4b6d      	ldr	r3, [pc, #436]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1ea      	bne.n	80017c0 <HAL_RCC_OscConfig+0x2e4>
 80017ea:	e000      	b.n	80017ee <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d06c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d005      	beq.n	800180c <HAL_RCC_OscConfig+0x330>
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b0c      	cmp	r3, #12
 8001804:	d119      	bne.n	800183a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d116      	bne.n	800183a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800180c:	4b61      	ldr	r3, [pc, #388]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_OscConfig+0x348>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e327      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001824:	4b5b      	ldr	r3, [pc, #364]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	061b      	lsls	r3, r3, #24
 8001832:	4958      	ldr	r1, [pc, #352]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001838:	e04c      	b.n	80018d4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d029      	beq.n	8001896 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001842:	4b54      	ldr	r3, [pc, #336]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a53      	ldr	r2, [pc, #332]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 8001848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7ff f94f 	bl	8000af0 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001854:	e00e      	b.n	8001874 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001856:	f7ff f94b 	bl	8000af0 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d907      	bls.n	8001874 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001864:	4b4b      	ldr	r3, [pc, #300]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e2ff      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001874:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0ea      	beq.n	8001856 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001880:	4b44      	ldr	r3, [pc, #272]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	061b      	lsls	r3, r3, #24
 800188e:	4941      	ldr	r1, [pc, #260]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
 8001894:	e01e      	b.n	80018d4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001896:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a3e      	ldr	r2, [pc, #248]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 800189c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a2:	f7ff f925 	bl	8000af0 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018a8:	e00e      	b.n	80018c8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018aa:	f7ff f921 	bl	8000af0 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d907      	bls.n	80018c8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018b8:	4b36      	ldr	r3, [pc, #216]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e2d5      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c8:	4b32      	ldr	r3, [pc, #200]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1ea      	bne.n	80018aa <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d062      	beq.n	80019a6 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d038      	beq.n	800195a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d108      	bne.n	8001902 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80018f0:	4b28      	ldr	r3, [pc, #160]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 80018f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f6:	4a27      	ldr	r2, [pc, #156]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 80018f8:	f023 0310 	bic.w	r3, r3, #16
 80018fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001900:	e007      	b.n	8001912 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001902:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 8001904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001908:	4a22      	ldr	r2, [pc, #136]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 800190a:	f043 0310 	orr.w	r3, r3, #16
 800190e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 8001914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001918:	4a1e      	ldr	r2, [pc, #120]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001922:	f7ff f8e5 	bl	8000af0 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001928:	e00f      	b.n	800194a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192a:	f7ff f8e1 	bl	8000af0 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b07      	cmp	r3, #7
 8001936:	d908      	bls.n	800194a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 800193a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e294      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 800194c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0e8      	beq.n	800192a <HAL_RCC_OscConfig+0x44e>
 8001958:	e025      	b.n	80019a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 800195c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001960:	4a0c      	ldr	r2, [pc, #48]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196a:	f7ff f8c1 	bl	8000af0 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001970:	e012      	b.n	8001998 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001972:	f7ff f8bd 	bl	8000af0 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b07      	cmp	r3, #7
 800197e:	d90b      	bls.n	8001998 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <HAL_RCC_OscConfig+0x4b8>)
 8001982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d004      	beq.n	8001998 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e270      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001998:	4ba8      	ldr	r3, [pc, #672]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1e5      	bne.n	8001972 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 812d 	beq.w	8001c0e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b4:	2300      	movs	r3, #0
 80019b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019b8:	4ba0      	ldr	r3, [pc, #640]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 80019ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10d      	bne.n	80019e0 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c4:	4b9d      	ldr	r3, [pc, #628]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 80019c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c8:	4a9c      	ldr	r2, [pc, #624]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 80019ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ce:	6593      	str	r3, [r2, #88]	; 0x58
 80019d0:	4b9a      	ldr	r3, [pc, #616]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 80019d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019dc:	2301      	movs	r3, #1
 80019de:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e0:	4b97      	ldr	r3, [pc, #604]	; (8001c40 <HAL_RCC_OscConfig+0x764>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d11e      	bne.n	8001a2a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019ec:	4b94      	ldr	r3, [pc, #592]	; (8001c40 <HAL_RCC_OscConfig+0x764>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a93      	ldr	r2, [pc, #588]	; (8001c40 <HAL_RCC_OscConfig+0x764>)
 80019f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f8:	f7ff f87a 	bl	8000af0 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019fe:	e00e      	b.n	8001a1e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a00:	f7ff f876 	bl	8000af0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d907      	bls.n	8001a1e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0e:	4b8c      	ldr	r3, [pc, #560]	; (8001c40 <HAL_RCC_OscConfig+0x764>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e22a      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a1e:	4b88      	ldr	r3, [pc, #544]	; (8001c40 <HAL_RCC_OscConfig+0x764>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0ea      	beq.n	8001a00 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d01f      	beq.n	8001a76 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d010      	beq.n	8001a64 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a42:	4b7e      	ldr	r3, [pc, #504]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a48:	4a7c      	ldr	r2, [pc, #496]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a52:	4b7a      	ldr	r3, [pc, #488]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a58:	4a78      	ldr	r2, [pc, #480]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a62:	e018      	b.n	8001a96 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a64:	4b75      	ldr	r3, [pc, #468]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6a:	4a74      	ldr	r2, [pc, #464]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a74:	e00f      	b.n	8001a96 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a76:	4b71      	ldr	r3, [pc, #452]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7c:	4a6f      	ldr	r2, [pc, #444]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001a7e:	f023 0301 	bic.w	r3, r3, #1
 8001a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a86:	4b6d      	ldr	r3, [pc, #436]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8c:	4a6b      	ldr	r2, [pc, #428]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001a8e:	f023 0304 	bic.w	r3, r3, #4
 8001a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d068      	beq.n	8001b70 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9e:	f7ff f827 	bl	8000af0 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa4:	e011      	b.n	8001aca <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa6:	f7ff f823 	bl	8000af0 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d908      	bls.n	8001aca <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab8:	4b60      	ldr	r3, [pc, #384]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e1d4      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aca:	4b5c      	ldr	r3, [pc, #368]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0e6      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d022      	beq.n	8001b2a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ae4:	4b55      	ldr	r3, [pc, #340]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aea:	4a54      	ldr	r2, [pc, #336]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001af4:	e011      	b.n	8001b1a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7fe fffb 	bl	8000af0 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d908      	bls.n	8001b1a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b08:	4b4c      	ldr	r3, [pc, #304]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e1ac      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b1a:	4b48      	ldr	r3, [pc, #288]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0e6      	beq.n	8001af6 <HAL_RCC_OscConfig+0x61a>
 8001b28:	e068      	b.n	8001bfc <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b2a:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b30:	4a42      	ldr	r2, [pc, #264]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b3a:	e011      	b.n	8001b60 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3c:	f7fe ffd8 	bl	8000af0 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d908      	bls.n	8001b60 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e189      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b60:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1e6      	bne.n	8001b3c <HAL_RCC_OscConfig+0x660>
 8001b6e:	e045      	b.n	8001bfc <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b70:	f7fe ffbe 	bl	8000af0 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b76:	e011      	b.n	8001b9c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b78:	f7fe ffba 	bl	8000af0 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d908      	bls.n	8001b9c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b8a:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e16b      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b9c:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1e6      	bne.n	8001b78 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001baa:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d021      	beq.n	8001bfc <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001bb8:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbe:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bc8:	e011      	b.n	8001bee <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7fe ff91 	bl	8000af0 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d908      	bls.n	8001bee <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bdc:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e142      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bee:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1e6      	bne.n	8001bca <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bfc:	7ffb      	ldrb	r3, [r7, #31]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d105      	bne.n	8001c0e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c06:	4a0d      	ldr	r2, [pc, #52]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0320 	and.w	r3, r3, #32
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d04f      	beq.n	8001cba <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d028      	beq.n	8001c74 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c28:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <HAL_RCC_OscConfig+0x760>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c32:	f7fe ff5d 	bl	8000af0 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c38:	e014      	b.n	8001c64 <HAL_RCC_OscConfig+0x788>
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c44:	f7fe ff54 	bl	8000af0 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d908      	bls.n	8001c64 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c52:	4b8a      	ldr	r3, [pc, #552]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001c54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e107      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c64:	4b85      	ldr	r3, [pc, #532]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001c66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0e8      	beq.n	8001c44 <HAL_RCC_OscConfig+0x768>
 8001c72:	e022      	b.n	8001cba <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c74:	4b81      	ldr	r3, [pc, #516]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001c76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c7a:	4a80      	ldr	r2, [pc, #512]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001c7c:	f023 0301 	bic.w	r3, r3, #1
 8001c80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c84:	f7fe ff34 	bl	8000af0 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c8a:	e00f      	b.n	8001cac <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c8c:	f7fe ff30 	bl	8000af0 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d908      	bls.n	8001cac <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c9a:	4b78      	ldr	r3, [pc, #480]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e0e3      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cac:	4b73      	ldr	r3, [pc, #460]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001cae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1e8      	bne.n	8001c8c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 80d7 	beq.w	8001e72 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc4:	4b6d      	ldr	r3, [pc, #436]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b0c      	cmp	r3, #12
 8001cce:	f000 8091 	beq.w	8001df4 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d166      	bne.n	8001da8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cda:	4b68      	ldr	r3, [pc, #416]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a67      	ldr	r2, [pc, #412]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001ce0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7fe ff03 	bl	8000af0 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cec:	e00e      	b.n	8001d0c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cee:	f7fe feff 	bl	8000af0 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d907      	bls.n	8001d0c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cfc:	4b5f      	ldr	r3, [pc, #380]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e0b3      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d0c:	4b5b      	ldr	r3, [pc, #364]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1ea      	bne.n	8001cee <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d18:	4b58      	ldr	r3, [pc, #352]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	4b58      	ldr	r3, [pc, #352]	; (8001e80 <HAL_RCC_OscConfig+0x9a4>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d28:	3a01      	subs	r2, #1
 8001d2a:	0112      	lsls	r2, r2, #4
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d32:	0212      	lsls	r2, r2, #8
 8001d34:	4311      	orrs	r1, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d3a:	0852      	lsrs	r2, r2, #1
 8001d3c:	3a01      	subs	r2, #1
 8001d3e:	0552      	lsls	r2, r2, #21
 8001d40:	4311      	orrs	r1, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d46:	0852      	lsrs	r2, r2, #1
 8001d48:	3a01      	subs	r2, #1
 8001d4a:	0652      	lsls	r2, r2, #25
 8001d4c:	4311      	orrs	r1, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d52:	06d2      	lsls	r2, r2, #27
 8001d54:	430a      	orrs	r2, r1
 8001d56:	4949      	ldr	r1, [pc, #292]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d5c:	4b47      	ldr	r3, [pc, #284]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a46      	ldr	r2, [pc, #280]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d68:	4b44      	ldr	r3, [pc, #272]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4a43      	ldr	r2, [pc, #268]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7fe febc 	bl	8000af0 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7a:	e00e      	b.n	8001d9a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7c:	f7fe feb8 	bl	8000af0 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d907      	bls.n	8001d9a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d8a:	4b3c      	ldr	r3, [pc, #240]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e06c      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9a:	4b38      	ldr	r3, [pc, #224]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0ea      	beq.n	8001d7c <HAL_RCC_OscConfig+0x8a0>
 8001da6:	e064      	b.n	8001e72 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da8:	4b34      	ldr	r3, [pc, #208]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a33      	ldr	r2, [pc, #204]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7fe fe9c 	bl	8000af0 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dba:	e00e      	b.n	8001dda <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7fe fe98 	bl	8000af0 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d907      	bls.n	8001dda <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dca:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e04c      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dda:	4b28      	ldr	r3, [pc, #160]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1ea      	bne.n	8001dbc <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001de6:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	4924      	ldr	r1, [pc, #144]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001dec:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <HAL_RCC_OscConfig+0x9a8>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	60cb      	str	r3, [r1, #12]
 8001df2:	e03e      	b.n	8001e72 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e039      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f003 0203 	and.w	r2, r3, #3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d12c      	bne.n	8001e6e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d123      	bne.n	8001e6e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e30:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d11b      	bne.n	8001e6e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e40:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d113      	bne.n	8001e6e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	085b      	lsrs	r3, r3, #1
 8001e52:	3b01      	subs	r3, #1
 8001e54:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d109      	bne.n	8001e6e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e64:	085b      	lsrs	r3, r3, #1
 8001e66:	3b01      	subs	r3, #1
 8001e68:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3720      	adds	r7, #32
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	019f800c 	.word	0x019f800c
 8001e84:	feeefffc 	.word	0xfeeefffc

08001e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e11c      	b.n	80020da <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea0:	4b90      	ldr	r3, [pc, #576]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 030f 	and.w	r3, r3, #15
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d910      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	4b8d      	ldr	r3, [pc, #564]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 020f 	bic.w	r2, r3, #15
 8001eb6:	498b      	ldr	r1, [pc, #556]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b89      	ldr	r3, [pc, #548]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e104      	b.n	80020da <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d010      	beq.n	8001efe <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	4b81      	ldr	r3, [pc, #516]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d908      	bls.n	8001efe <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eec:	4b7e      	ldr	r3, [pc, #504]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	497b      	ldr	r1, [pc, #492]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 8085 	beq.w	8002016 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d11f      	bne.n	8001f54 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f14:	4b74      	ldr	r3, [pc, #464]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0da      	b.n	80020da <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f24:	f000 f9fe 	bl	8002324 <RCC_GetSysClockFreqFromPLLSource>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4a6f      	ldr	r2, [pc, #444]	; (80020ec <HAL_RCC_ClockConfig+0x264>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d947      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f32:	4b6d      	ldr	r3, [pc, #436]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d141      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f3e:	4b6a      	ldr	r3, [pc, #424]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f46:	4a68      	ldr	r2, [pc, #416]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	e036      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d107      	bne.n	8001f6c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f5c:	4b62      	ldr	r3, [pc, #392]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d115      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0b6      	b.n	80020da <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d107      	bne.n	8001f84 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f74:	4b5c      	ldr	r3, [pc, #368]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d109      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0aa      	b.n	80020da <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f84:	4b58      	ldr	r3, [pc, #352]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0a2      	b.n	80020da <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f94:	f000 f8b0 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4a53      	ldr	r2, [pc, #332]	; (80020ec <HAL_RCC_ClockConfig+0x264>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d90f      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001fa2:	4b51      	ldr	r3, [pc, #324]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d109      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fae:	4b4e      	ldr	r3, [pc, #312]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fb6:	4a4c      	ldr	r2, [pc, #304]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fc2:	4b49      	ldr	r3, [pc, #292]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f023 0203 	bic.w	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4946      	ldr	r1, [pc, #280]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd4:	f7fe fd8c 	bl	8000af0 <HAL_GetTick>
 8001fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	e013      	b.n	8002004 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fdc:	f7fe fd88 	bl	8000af0 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d90a      	bls.n	8002004 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	4b3e      	ldr	r3, [pc, #248]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 020c 	and.w	r2, r3, #12
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e06a      	b.n	80020da <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002004:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 020c 	and.w	r2, r3, #12
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	429a      	cmp	r2, r3
 8002014:	d1e2      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2b80      	cmp	r3, #128	; 0x80
 800201a:	d105      	bne.n	8002028 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800201c:	4b32      	ldr	r3, [pc, #200]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4a31      	ldr	r2, [pc, #196]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8002022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002026:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d010      	beq.n	8002056 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002040:	429a      	cmp	r2, r3
 8002042:	d208      	bcs.n	8002056 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002044:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4925      	ldr	r1, [pc, #148]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8002052:	4313      	orrs	r3, r2
 8002054:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002056:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d210      	bcs.n	8002086 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002064:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f023 020f 	bic.w	r2, r3, #15
 800206c:	491d      	ldr	r1, [pc, #116]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	4313      	orrs	r3, r2
 8002072:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002074:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d001      	beq.n	8002086 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e029      	b.n	80020da <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d008      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	4912      	ldr	r1, [pc, #72]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d009      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020b0:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	490a      	ldr	r1, [pc, #40]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80020c4:	f000 f8b6 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4a09      	ldr	r2, [pc, #36]	; (80020f0 <HAL_RCC_ClockConfig+0x268>)
 80020cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_RCC_ClockConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fcbc 	bl	8000a50 <HAL_InitTick>
 80020d8:	4603      	mov	r3, r0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40022000 	.word	0x40022000
 80020e8:	40021000 	.word	0x40021000
 80020ec:	04c4b400 	.word	0x04c4b400
 80020f0:	20000000 	.word	0x20000000
 80020f4:	20000004 	.word	0x20000004

080020f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	; 0x24
 80020fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002106:	4b47      	ldr	r3, [pc, #284]	; (8002224 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002110:	4b44      	ldr	r3, [pc, #272]	; (8002224 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x34>
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	2b0c      	cmp	r3, #12
 8002124:	d121      	bne.n	800216a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d11e      	bne.n	800216a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800212c:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <HAL_RCC_GetSysClockFreq+0x12c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d107      	bne.n	8002148 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002138:	4b3a      	ldr	r3, [pc, #232]	; (8002224 <HAL_RCC_GetSysClockFreq+0x12c>)
 800213a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	e005      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002148:	4b36      	ldr	r3, [pc, #216]	; (8002224 <HAL_RCC_GetSysClockFreq+0x12c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8002154:	4a34      	ldr	r2, [pc, #208]	; (8002228 <HAL_RCC_GetSysClockFreq+0x130>)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10d      	bne.n	8002180 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002168:	e00a      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b04      	cmp	r3, #4
 800216e:	d102      	bne.n	8002176 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002170:	4b2e      	ldr	r3, [pc, #184]	; (800222c <HAL_RCC_GetSysClockFreq+0x134>)
 8002172:	61bb      	str	r3, [r7, #24]
 8002174:	e004      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b08      	cmp	r3, #8
 800217a:	d101      	bne.n	8002180 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <HAL_RCC_GetSysClockFreq+0x138>)
 800217e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	2b0c      	cmp	r3, #12
 8002184:	d146      	bne.n	8002214 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002186:	4b27      	ldr	r3, [pc, #156]	; (8002224 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002190:	4b24      	ldr	r3, [pc, #144]	; (8002224 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	3301      	adds	r3, #1
 800219c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d003      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0xb4>
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d00d      	beq.n	80021c6 <HAL_RCC_GetSysClockFreq+0xce>
 80021aa:	e019      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021ac:	4a1f      	ldr	r2, [pc, #124]	; (800222c <HAL_RCC_GetSysClockFreq+0x134>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b4:	4a1b      	ldr	r2, [pc, #108]	; (8002224 <HAL_RCC_GetSysClockFreq+0x12c>)
 80021b6:	68d2      	ldr	r2, [r2, #12]
 80021b8:	0a12      	lsrs	r2, r2, #8
 80021ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021be:	fb02 f303 	mul.w	r3, r2, r3
 80021c2:	617b      	str	r3, [r7, #20]
        break;
 80021c4:	e019      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021c6:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <HAL_RCC_GetSysClockFreq+0x138>)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ce:	4a15      	ldr	r2, [pc, #84]	; (8002224 <HAL_RCC_GetSysClockFreq+0x12c>)
 80021d0:	68d2      	ldr	r2, [r2, #12]
 80021d2:	0a12      	lsrs	r2, r2, #8
 80021d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021d8:	fb02 f303 	mul.w	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
        break;
 80021de:	e00c      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e8:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <HAL_RCC_GetSysClockFreq+0x12c>)
 80021ea:	68d2      	ldr	r2, [r2, #12]
 80021ec:	0a12      	lsrs	r2, r2, #8
 80021ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021f2:	fb02 f303 	mul.w	r3, r2, r3
 80021f6:	617b      	str	r3, [r7, #20]
        break;
 80021f8:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <HAL_RCC_GetSysClockFreq+0x12c>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	0e5b      	lsrs	r3, r3, #25
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	3301      	adds	r3, #1
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002212:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002214:	69bb      	ldr	r3, [r7, #24]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3724      	adds	r7, #36	; 0x24
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000
 8002228:	0800306c 	.word	0x0800306c
 800222c:	00f42400 	.word	0x00f42400
 8002230:	01e84800 	.word	0x01e84800

08002234 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8002238:	f7ff ff5e 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 800223c:	4602      	mov	r2, r0
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_RCC_GetHCLKFreq+0x20>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	4903      	ldr	r1, [pc, #12]	; (8002258 <HAL_RCC_GetHCLKFreq+0x24>)
 800224a:	5ccb      	ldrb	r3, [r1, r3]
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000
 8002258:	0800305c 	.word	0x0800305c

0800225c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002268:	4b2c      	ldr	r3, [pc, #176]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002274:	f7ff f8a4 	bl	80013c0 <HAL_PWREx_GetVoltageRange>
 8002278:	6138      	str	r0, [r7, #16]
 800227a:	e014      	b.n	80022a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800227c:	4b27      	ldr	r3, [pc, #156]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	4a26      	ldr	r2, [pc, #152]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002286:	6593      	str	r3, [r2, #88]	; 0x58
 8002288:	4b24      	ldr	r3, [pc, #144]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002294:	f7ff f894 	bl	80013c0 <HAL_PWREx_GetVoltageRange>
 8002298:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800229a:	4b20      	ldr	r3, [pc, #128]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	4a1f      	ldr	r2, [pc, #124]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80022a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b2:	d10b      	bne.n	80022cc <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b80      	cmp	r3, #128	; 0x80
 80022b8:	d919      	bls.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2ba0      	cmp	r3, #160	; 0xa0
 80022be:	d902      	bls.n	80022c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022c0:	2302      	movs	r3, #2
 80022c2:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80022c4:	e013      	b.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022c6:	2301      	movs	r3, #1
 80022c8:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80022ca:	e010      	b.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b80      	cmp	r3, #128	; 0x80
 80022d0:	d902      	bls.n	80022d8 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022d2:	2303      	movs	r3, #3
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	e00a      	b.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b80      	cmp	r3, #128	; 0x80
 80022dc:	d102      	bne.n	80022e4 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022de:	2302      	movs	r3, #2
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e004      	b.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b70      	cmp	r3, #112	; 0x70
 80022e8:	d101      	bne.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022ea:	2301      	movs	r3, #1
 80022ec:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 020f 	bic.w	r2, r3, #15
 80022f6:	490a      	ldr	r1, [pc, #40]	; (8002320 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	40022000 	.word	0x40022000

08002324 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232a:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002334:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3301      	adds	r3, #1
 8002340:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b03      	cmp	r3, #3
 8002346:	d015      	beq.n	8002374 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d839      	bhi.n	80023c2 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d01c      	beq.n	800238e <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d133      	bne.n	80023c2 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800235a:	4a26      	ldr	r2, [pc, #152]	; (80023f4 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	4a23      	ldr	r2, [pc, #140]	; (80023f0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002364:	68d2      	ldr	r2, [r2, #12]
 8002366:	0a12      	lsrs	r2, r2, #8
 8002368:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800236c:	fb02 f303 	mul.w	r3, r2, r3
 8002370:	613b      	str	r3, [r7, #16]
      break;
 8002372:	e029      	b.n	80023c8 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002374:	4a20      	ldr	r2, [pc, #128]	; (80023f8 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	fbb2 f3f3 	udiv	r3, r2, r3
 800237c:	4a1c      	ldr	r2, [pc, #112]	; (80023f0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800237e:	68d2      	ldr	r2, [r2, #12]
 8002380:	0a12      	lsrs	r2, r2, #8
 8002382:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	613b      	str	r3, [r7, #16]
      break;
 800238c:	e01c      	b.n	80023c8 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800238e:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d107      	bne.n	80023aa <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800239c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	e005      	b.n	80023b6 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80023b6:	4a11      	ldr	r2, [pc, #68]	; (80023fc <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023be:	613b      	str	r3, [r7, #16]
        break;
 80023c0:	e002      	b.n	80023c8 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
      break;
 80023c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	0e5b      	lsrs	r3, r3, #25
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	3301      	adds	r3, #1
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80023e2:	683b      	ldr	r3, [r7, #0]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	371c      	adds	r7, #28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	40021000 	.word	0x40021000
 80023f4:	00f42400 	.word	0x00f42400
 80023f8:	01e84800 	.word	0x01e84800
 80023fc:	0800306c 	.word	0x0800306c

08002400 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002408:	2300      	movs	r3, #0
 800240a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800240c:	2300      	movs	r3, #0
 800240e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002418:	2b00      	cmp	r3, #0
 800241a:	d040      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002420:	2b80      	cmp	r3, #128	; 0x80
 8002422:	d02a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002424:	2b80      	cmp	r3, #128	; 0x80
 8002426:	d825      	bhi.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002428:	2b60      	cmp	r3, #96	; 0x60
 800242a:	d026      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800242c:	2b60      	cmp	r3, #96	; 0x60
 800242e:	d821      	bhi.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002430:	2b40      	cmp	r3, #64	; 0x40
 8002432:	d006      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002434:	2b40      	cmp	r3, #64	; 0x40
 8002436:	d81d      	bhi.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002438:	2b00      	cmp	r3, #0
 800243a:	d009      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800243c:	2b20      	cmp	r3, #32
 800243e:	d010      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002440:	e018      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002442:	4b8f      	ldr	r3, [pc, #572]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	4a8e      	ldr	r2, [pc, #568]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800244e:	e015      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fb56 	bl	8002b08 <RCCEx_PLLSAI1_Config>
 800245c:	4603      	mov	r3, r0
 800245e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002460:	e00c      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3320      	adds	r3, #32
 8002466:	2100      	movs	r1, #0
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fc33 	bl	8002cd4 <RCCEx_PLLSAI2_Config>
 800246e:	4603      	mov	r3, r0
 8002470:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002472:	e003      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	77fb      	strb	r3, [r7, #31]
        break;
 8002478:	e000      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800247a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800247c:	7ffb      	ldrb	r3, [r7, #31]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10b      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002482:	4b7f      	ldr	r3, [pc, #508]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002484:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002488:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002490:	497b      	ldr	r1, [pc, #492]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002498:	e001      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800249a:	7ffb      	ldrb	r3, [r7, #31]
 800249c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d047      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b2:	d030      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80024b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b8:	d82a      	bhi.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80024ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024be:	d02a      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80024c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024c4:	d824      	bhi.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80024c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ca:	d008      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0xde>
 80024cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d0:	d81e      	bhi.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0xec>
 80024d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024da:	d010      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80024dc:	e018      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024de:	4b68      	ldr	r3, [pc, #416]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	4a67      	ldr	r2, [pc, #412]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e8:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80024ea:	e015      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3304      	adds	r3, #4
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fb08 	bl	8002b08 <RCCEx_PLLSAI1_Config>
 80024f8:	4603      	mov	r3, r0
 80024fa:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80024fc:	e00c      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3320      	adds	r3, #32
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fbe5 	bl	8002cd4 <RCCEx_PLLSAI2_Config>
 800250a:	4603      	mov	r3, r0
 800250c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800250e:	e003      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	77fb      	strb	r3, [r7, #31]
        break;
 8002514:	e000      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8002516:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002518:	7ffb      	ldrb	r3, [r7, #31]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10b      	bne.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800251e:	4b58      	ldr	r3, [pc, #352]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002520:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002524:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	4954      	ldr	r1, [pc, #336]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002534:	e001      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002536:	7ffb      	ldrb	r3, [r7, #31]
 8002538:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 80ab 	beq.w	800269e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002548:	2300      	movs	r3, #0
 800254a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254c:	4b4c      	ldr	r3, [pc, #304]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800254e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10d      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002558:	4b49      	ldr	r3, [pc, #292]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255c:	4a48      	ldr	r2, [pc, #288]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800255e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002562:	6593      	str	r3, [r2, #88]	; 0x58
 8002564:	4b46      	ldr	r3, [pc, #280]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002570:	2301      	movs	r3, #1
 8002572:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002574:	4b43      	ldr	r3, [pc, #268]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a42      	ldr	r2, [pc, #264]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800257a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002580:	f7fe fab6 	bl	8000af0 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002586:	e00f      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002588:	f7fe fab2 	bl	8000af0 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d908      	bls.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002596:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80025a6:	e006      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025a8:	4b36      	ldr	r3, [pc, #216]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0e9      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80025b4:	e000      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80025b6:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80025b8:	7ffb      	ldrb	r3, [r7, #31]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d164      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025be:	4b30      	ldr	r3, [pc, #192]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c8:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01f      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d019      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e6:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	4a24      	ldr	r2, [pc, #144]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025f8:	4b21      	ldr	r3, [pc, #132]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	4a20      	ldr	r2, [pc, #128]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002608:	4a1d      	ldr	r2, [pc, #116]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d01f      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261a:	f7fe fa69 	bl	8000af0 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002620:	e012      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f7fe fa65 	bl	8000af0 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d909      	bls.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10a      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8002646:	e007      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002648:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0e5      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8002656:	e000      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8002658:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800265a:	7ffb      	ldrb	r3, [r7, #31]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10c      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002660:	4b07      	ldr	r3, [pc, #28]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002666:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002670:	4903      	ldr	r1, [pc, #12]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002678:	e008      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800267a:	7ffb      	ldrb	r3, [r7, #31]
 800267c:	77bb      	strb	r3, [r7, #30]
 800267e:	e005      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8002680:	40021000 	.word	0x40021000
 8002684:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002688:	7ffb      	ldrb	r3, [r7, #31]
 800268a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d105      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002692:	4b9c      	ldr	r3, [pc, #624]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	4a9b      	ldr	r2, [pc, #620]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026aa:	4b96      	ldr	r3, [pc, #600]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b0:	f023 0203 	bic.w	r2, r3, #3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b8:	4992      	ldr	r1, [pc, #584]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026cc:	4b8d      	ldr	r3, [pc, #564]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	f023 020c 	bic.w	r2, r3, #12
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026da:	498a      	ldr	r1, [pc, #552]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026ee:	4b85      	ldr	r3, [pc, #532]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fc:	4981      	ldr	r1, [pc, #516]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002710:	4b7c      	ldr	r3, [pc, #496]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	4979      	ldr	r1, [pc, #484]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002732:	4b74      	ldr	r3, [pc, #464]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002738:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	4970      	ldr	r1, [pc, #448]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002754:	4b6b      	ldr	r3, [pc, #428]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002762:	4968      	ldr	r1, [pc, #416]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002776:	4b63      	ldr	r3, [pc, #396]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	495f      	ldr	r1, [pc, #380]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002798:	4b5a      	ldr	r3, [pc, #360]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a6:	4957      	ldr	r1, [pc, #348]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80027ba:	4b52      	ldr	r3, [pc, #328]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80027bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027c8:	494e      	ldr	r1, [pc, #312]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d031      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027e4:	d00e      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027ea:	d814      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d015      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80027f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f4:	d10f      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f6:	4b43      	ldr	r3, [pc, #268]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	4a42      	ldr	r2, [pc, #264]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80027fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002800:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8002802:	e00c      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3304      	adds	r3, #4
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f97c 	bl	8002b08 <RCCEx_PLLSAI1_Config>
 8002810:	4603      	mov	r3, r0
 8002812:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8002814:	e003      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	77fb      	strb	r3, [r7, #31]
        break;
 800281a:	e000      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 800281c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800281e:	7ffb      	ldrb	r3, [r7, #31]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10b      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002824:	4b37      	ldr	r3, [pc, #220]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002832:	4934      	ldr	r1, [pc, #208]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800283a:	e001      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800283c:	7ffb      	ldrb	r3, [r7, #31]
 800283e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800284c:	4b2d      	ldr	r3, [pc, #180]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002852:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285a:	492a      	ldr	r1, [pc, #168]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800286e:	4b25      	ldr	r3, [pc, #148]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002874:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287c:	4921      	ldr	r1, [pc, #132]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002890:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	4919      	ldr	r1, [pc, #100]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028b2:	4b14      	ldr	r3, [pc, #80]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80028b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028b8:	f023 0203 	bic.w	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	4910      	ldr	r1, [pc, #64]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d02b      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80028d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e2:	4908      	ldr	r1, [pc, #32]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028f2:	d109      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4a02      	ldr	r2, [pc, #8]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80028fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028fe:	60d3      	str	r3, [r2, #12]
 8002900:	e014      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002910:	d10c      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3304      	adds	r3, #4
 8002916:	2101      	movs	r1, #1
 8002918:	4618      	mov	r0, r3
 800291a:	f000 f8f5 	bl	8002b08 <RCCEx_PLLSAI1_Config>
 800291e:	4603      	mov	r3, r0
 8002920:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8002922:	7ffb      	ldrb	r3, [r7, #31]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8002928:	7ffb      	ldrb	r3, [r7, #31]
 800292a:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d04a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800293c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002940:	d108      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8002942:	4b70      	ldr	r3, [pc, #448]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002944:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002948:	4a6e      	ldr	r2, [pc, #440]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800294a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800294e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002952:	e012      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002954:	4b6b      	ldr	r3, [pc, #428]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002962:	4968      	ldr	r1, [pc, #416]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800296a:	4b66      	ldr	r3, [pc, #408]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800296c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002970:	4a64      	ldr	r2, [pc, #400]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002972:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002976:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800297e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002982:	d10d      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3304      	adds	r3, #4
 8002988:	2101      	movs	r1, #1
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f8bc 	bl	8002b08 <RCCEx_PLLSAI1_Config>
 8002990:	4603      	mov	r3, r0
 8002992:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002994:	7ffb      	ldrb	r3, [r7, #31]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d019      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800299a:	7ffb      	ldrb	r3, [r7, #31]
 800299c:	77bb      	strb	r3, [r7, #30]
 800299e:	e016      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029a8:	d106      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029aa:	4b56      	ldr	r3, [pc, #344]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	4a55      	ldr	r2, [pc, #340]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80029b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029b4:	60d3      	str	r3, [r2, #12]
 80029b6:	e00a      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029c0:	d105      	bne.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029c2:	4b50      	ldr	r3, [pc, #320]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	4a4f      	ldr	r2, [pc, #316]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029cc:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d028      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029da:	4b4a      	ldr	r3, [pc, #296]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80029dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029e8:	4946      	ldr	r1, [pc, #280]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029f8:	d106      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029fa:	4b42      	ldr	r3, [pc, #264]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	4a41      	ldr	r2, [pc, #260]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a04:	60d3      	str	r3, [r2, #12]
 8002a06:	e011      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3304      	adds	r3, #4
 8002a16:	2101      	movs	r1, #1
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 f875 	bl	8002b08 <RCCEx_PLLSAI1_Config>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002a22:	7ffb      	ldrb	r3, [r7, #31]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8002a28:	7ffb      	ldrb	r3, [r7, #31]
 8002a2a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01e      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a38:	4b32      	ldr	r3, [pc, #200]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a48:	492e      	ldr	r1, [pc, #184]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a5a:	d10c      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	2102      	movs	r1, #2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f850 	bl	8002b08 <RCCEx_PLLSAI1_Config>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002a6c:	7ffb      	ldrb	r3, [r7, #31]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8002a72:	7ffb      	ldrb	r3, [r7, #31]
 8002a74:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00b      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a82:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a88:	f023 0204 	bic.w	r2, r3, #4
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a92:	491c      	ldr	r1, [pc, #112]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002aa6:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002aa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002aac:	f023 0218 	bic.w	r2, r3, #24
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab6:	4913      	ldr	r1, [pc, #76]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d017      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002aca:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002acc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ad0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ada:	490a      	ldr	r1, [pc, #40]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ae8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002aec:	d105      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002af4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002afa:	7fbb      	ldrb	r3, [r7, #30]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3720      	adds	r7, #32
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40021000 	.word	0x40021000

08002b08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d018      	beq.n	8002b50 <RCCEx_PLLSAI1_Config+0x48>
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d81f      	bhi.n	8002b62 <RCCEx_PLLSAI1_Config+0x5a>
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d002      	beq.n	8002b2c <RCCEx_PLLSAI1_Config+0x24>
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d009      	beq.n	8002b3e <RCCEx_PLLSAI1_Config+0x36>
 8002b2a:	e01a      	b.n	8002b62 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b2c:	4b65      	ldr	r3, [pc, #404]	; (8002cc4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d117      	bne.n	8002b68 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b3c:	e014      	b.n	8002b68 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b3e:	4b61      	ldr	r3, [pc, #388]	; (8002cc4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d110      	bne.n	8002b6c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4e:	e00d      	b.n	8002b6c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8002b50:	4b5c      	ldr	r3, [pc, #368]	; (8002cc4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b60:	e006      	b.n	8002b70 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
      break;
 8002b66:	e004      	b.n	8002b72 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002b68:	bf00      	nop
 8002b6a:	e002      	b.n	8002b72 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002b6c:	bf00      	nop
 8002b6e:	e000      	b.n	8002b72 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002b70:	bf00      	nop
  }

  if (status == HAL_OK)
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f040 809f 	bne.w	8002cb8 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b7a:	4b52      	ldr	r3, [pc, #328]	; (8002cc4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a51      	ldr	r2, [pc, #324]	; (8002cc4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002b80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b86:	f7fd ffb3 	bl	8000af0 <HAL_GetTick>
 8002b8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b8c:	e00f      	b.n	8002bae <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b8e:	f7fd ffaf 	bl	8000af0 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d908      	bls.n	8002bae <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b9c:	4b49      	ldr	r3, [pc, #292]	; (8002cc4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d009      	beq.n	8002bbc <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002bac:	e006      	b.n	8002bbc <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bae:	4b45      	ldr	r3, [pc, #276]	; (8002cc4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1e9      	bne.n	8002b8e <RCCEx_PLLSAI1_Config+0x86>
 8002bba:	e000      	b.n	8002bbe <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8002bbc:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d179      	bne.n	8002cb8 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d116      	bne.n	8002bf8 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bca:	4b3e      	ldr	r3, [pc, #248]	; (8002cc4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	4b3e      	ldr	r3, [pc, #248]	; (8002cc8 <RCCEx_PLLSAI1_Config+0x1c0>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6892      	ldr	r2, [r2, #8]
 8002bd6:	0211      	lsls	r1, r2, #8
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	68d2      	ldr	r2, [r2, #12]
 8002bdc:	06d2      	lsls	r2, r2, #27
 8002bde:	4311      	orrs	r1, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6852      	ldr	r2, [r2, #4]
 8002be4:	3a01      	subs	r2, #1
 8002be6:	0112      	lsls	r2, r2, #4
 8002be8:	4311      	orrs	r1, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	4934      	ldr	r1, [pc, #208]	; (8002cc4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	610b      	str	r3, [r1, #16]
 8002bf6:	e033      	b.n	8002c60 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d118      	bne.n	8002c30 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bfe:	4b31      	ldr	r3, [pc, #196]	; (8002cc4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	4b32      	ldr	r3, [pc, #200]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1c4>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6892      	ldr	r2, [r2, #8]
 8002c0a:	0211      	lsls	r1, r2, #8
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6912      	ldr	r2, [r2, #16]
 8002c10:	0852      	lsrs	r2, r2, #1
 8002c12:	3a01      	subs	r2, #1
 8002c14:	0552      	lsls	r2, r2, #21
 8002c16:	4311      	orrs	r1, r2
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6852      	ldr	r2, [r2, #4]
 8002c1c:	3a01      	subs	r2, #1
 8002c1e:	0112      	lsls	r2, r2, #4
 8002c20:	4311      	orrs	r1, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	4926      	ldr	r1, [pc, #152]	; (8002cc4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	610b      	str	r3, [r1, #16]
 8002c2e:	e017      	b.n	8002c60 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c30:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <RCCEx_PLLSAI1_Config+0x1c8>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6892      	ldr	r2, [r2, #8]
 8002c3c:	0211      	lsls	r1, r2, #8
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6952      	ldr	r2, [r2, #20]
 8002c42:	0852      	lsrs	r2, r2, #1
 8002c44:	3a01      	subs	r2, #1
 8002c46:	0652      	lsls	r2, r2, #25
 8002c48:	4311      	orrs	r1, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6852      	ldr	r2, [r2, #4]
 8002c4e:	3a01      	subs	r2, #1
 8002c50:	0112      	lsls	r2, r2, #4
 8002c52:	4311      	orrs	r1, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	491a      	ldr	r1, [pc, #104]	; (8002cc4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c60:	4b18      	ldr	r3, [pc, #96]	; (8002cc4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a17      	ldr	r2, [pc, #92]	; (8002cc4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6c:	f7fd ff40 	bl	8000af0 <HAL_GetTick>
 8002c70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c72:	e00f      	b.n	8002c94 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c74:	f7fd ff3c 	bl	8000af0 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d908      	bls.n	8002c94 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8002c92:	e006      	b.n	8002ca2 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0e9      	beq.n	8002c74 <RCCEx_PLLSAI1_Config+0x16c>
 8002ca0:	e000      	b.n	8002ca4 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8002ca2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	4904      	ldr	r1, [pc, #16]	; (8002cc4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	07ff800c 	.word	0x07ff800c
 8002ccc:	ff9f800c 	.word	0xff9f800c
 8002cd0:	f9ff800c 	.word	0xf9ff800c

08002cd4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d018      	beq.n	8002d1c <RCCEx_PLLSAI2_Config+0x48>
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d81f      	bhi.n	8002d2e <RCCEx_PLLSAI2_Config+0x5a>
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d002      	beq.n	8002cf8 <RCCEx_PLLSAI2_Config+0x24>
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d009      	beq.n	8002d0a <RCCEx_PLLSAI2_Config+0x36>
 8002cf6:	e01a      	b.n	8002d2e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cf8:	4b4a      	ldr	r3, [pc, #296]	; (8002e24 <RCCEx_PLLSAI2_Config+0x150>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d117      	bne.n	8002d34 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d08:	e014      	b.n	8002d34 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d0a:	4b46      	ldr	r3, [pc, #280]	; (8002e24 <RCCEx_PLLSAI2_Config+0x150>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d110      	bne.n	8002d38 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1a:	e00d      	b.n	8002d38 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8002d1c:	4b41      	ldr	r3, [pc, #260]	; (8002e24 <RCCEx_PLLSAI2_Config+0x150>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d2c:	e006      	b.n	8002d3c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	73fb      	strb	r3, [r7, #15]
      break;
 8002d32:	e004      	b.n	8002d3e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8002d34:	bf00      	nop
 8002d36:	e002      	b.n	8002d3e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8002d38:	bf00      	nop
 8002d3a:	e000      	b.n	8002d3e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8002d3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d169      	bne.n	8002e18 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d44:	4b37      	ldr	r3, [pc, #220]	; (8002e24 <RCCEx_PLLSAI2_Config+0x150>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a36      	ldr	r2, [pc, #216]	; (8002e24 <RCCEx_PLLSAI2_Config+0x150>)
 8002d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d50:	f7fd fece 	bl	8000af0 <HAL_GetTick>
 8002d54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d56:	e00f      	b.n	8002d78 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d58:	f7fd feca 	bl	8000af0 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d908      	bls.n	8002d78 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d66:	4b2f      	ldr	r3, [pc, #188]	; (8002e24 <RCCEx_PLLSAI2_Config+0x150>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d009      	beq.n	8002d86 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d76:	e006      	b.n	8002d86 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d78:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <RCCEx_PLLSAI2_Config+0x150>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1e9      	bne.n	8002d58 <RCCEx_PLLSAI2_Config+0x84>
 8002d84:	e000      	b.n	8002d88 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8002d86:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d144      	bne.n	8002e18 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d115      	bne.n	8002dc0 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d94:	4b23      	ldr	r3, [pc, #140]	; (8002e24 <RCCEx_PLLSAI2_Config+0x150>)
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	4b23      	ldr	r3, [pc, #140]	; (8002e28 <RCCEx_PLLSAI2_Config+0x154>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6892      	ldr	r2, [r2, #8]
 8002da0:	0211      	lsls	r1, r2, #8
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68d2      	ldr	r2, [r2, #12]
 8002da6:	06d2      	lsls	r2, r2, #27
 8002da8:	4311      	orrs	r1, r2
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6852      	ldr	r2, [r2, #4]
 8002dae:	3a01      	subs	r2, #1
 8002db0:	0112      	lsls	r2, r2, #4
 8002db2:	4311      	orrs	r1, r2
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	491a      	ldr	r1, [pc, #104]	; (8002e24 <RCCEx_PLLSAI2_Config+0x150>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002dc0:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <RCCEx_PLLSAI2_Config+0x150>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a17      	ldr	r2, [pc, #92]	; (8002e24 <RCCEx_PLLSAI2_Config+0x150>)
 8002dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7fd fe90 	bl	8000af0 <HAL_GetTick>
 8002dd0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dd2:	e00f      	b.n	8002df4 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dd4:	f7fd fe8c 	bl	8000af0 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d908      	bls.n	8002df4 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <RCCEx_PLLSAI2_Config+0x150>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8002df2:	e006      	b.n	8002e02 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <RCCEx_PLLSAI2_Config+0x150>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0e9      	beq.n	8002dd4 <RCCEx_PLLSAI2_Config+0x100>
 8002e00:	e000      	b.n	8002e04 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8002e02:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <RCCEx_PLLSAI2_Config+0x150>)
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	4904      	ldr	r1, [pc, #16]	; (8002e24 <RCCEx_PLLSAI2_Config+0x150>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	07ff800c 	.word	0x07ff800c

08002e2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e095      	b.n	8002f6a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d108      	bne.n	8002e58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e4e:	d009      	beq.n	8002e64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	61da      	str	r2, [r3, #28]
 8002e56:	e005      	b.n	8002e64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fd fbae 	bl	80005e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ea4:	d902      	bls.n	8002eac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	e002      	b.n	8002eb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002eba:	d007      	beq.n	8002ecc <HAL_SPI_Init+0xa0>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ec4:	d002      	beq.n	8002ecc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0e:	ea42 0103 	orr.w	r1, r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	0c1b      	lsrs	r3, r3, #16
 8002f28:	f003 0204 	and.w	r2, r3, #4
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f48:	ea42 0103 	orr.w	r1, r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b085      	sub	sp, #20
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002f7a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8002f7e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	4013      	ands	r3, r2
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002fa8:	b084      	sub	sp, #16
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	f107 0014 	add.w	r0, r7, #20
 8002fb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	b004      	add	sp, #16
 8002fe8:	4770      	bx	lr
	...

08002fec <__libc_init_array>:
 8002fec:	b570      	push	{r4, r5, r6, lr}
 8002fee:	4d0d      	ldr	r5, [pc, #52]	; (8003024 <__libc_init_array+0x38>)
 8002ff0:	2600      	movs	r6, #0
 8002ff2:	4c0d      	ldr	r4, [pc, #52]	; (8003028 <__libc_init_array+0x3c>)
 8002ff4:	1b64      	subs	r4, r4, r5
 8002ff6:	10a4      	asrs	r4, r4, #2
 8002ff8:	42a6      	cmp	r6, r4
 8002ffa:	d109      	bne.n	8003010 <__libc_init_array+0x24>
 8002ffc:	4d0b      	ldr	r5, [pc, #44]	; (800302c <__libc_init_array+0x40>)
 8002ffe:	2600      	movs	r6, #0
 8003000:	4c0b      	ldr	r4, [pc, #44]	; (8003030 <__libc_init_array+0x44>)
 8003002:	f000 f81f 	bl	8003044 <_init>
 8003006:	1b64      	subs	r4, r4, r5
 8003008:	10a4      	asrs	r4, r4, #2
 800300a:	42a6      	cmp	r6, r4
 800300c:	d105      	bne.n	800301a <__libc_init_array+0x2e>
 800300e:	bd70      	pop	{r4, r5, r6, pc}
 8003010:	f855 3b04 	ldr.w	r3, [r5], #4
 8003014:	3601      	adds	r6, #1
 8003016:	4798      	blx	r3
 8003018:	e7ee      	b.n	8002ff8 <__libc_init_array+0xc>
 800301a:	f855 3b04 	ldr.w	r3, [r5], #4
 800301e:	3601      	adds	r6, #1
 8003020:	4798      	blx	r3
 8003022:	e7f2      	b.n	800300a <__libc_init_array+0x1e>
 8003024:	080030ac 	.word	0x080030ac
 8003028:	080030ac 	.word	0x080030ac
 800302c:	080030ac 	.word	0x080030ac
 8003030:	080030b0 	.word	0x080030b0

08003034 <memset>:
 8003034:	4402      	add	r2, r0
 8003036:	4603      	mov	r3, r0
 8003038:	4293      	cmp	r3, r2
 800303a:	d100      	bne.n	800303e <memset+0xa>
 800303c:	4770      	bx	lr
 800303e:	f803 1b01 	strb.w	r1, [r3], #1
 8003042:	e7f9      	b.n	8003038 <memset+0x4>

08003044 <_init>:
 8003044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003046:	bf00      	nop
 8003048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304a:	bc08      	pop	{r3}
 800304c:	469e      	mov	lr, r3
 800304e:	4770      	bx	lr

08003050 <_fini>:
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003052:	bf00      	nop
 8003054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003056:	bc08      	pop	{r3}
 8003058:	469e      	mov	lr, r3
 800305a:	4770      	bx	lr
