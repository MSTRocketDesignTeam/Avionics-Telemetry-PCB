
zet6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ccc  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001ec0  08001ec0  00011ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f10  08001f10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f10  08001f10  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f10  08001f10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f10  08001f10  00011f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f14  08001f14  00011f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001f24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001f24  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000061a4  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001440  00000000  00000000  000261e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  00027628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  00027d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271ff  00000000  00000000  00028340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006b09  00000000  00000000  0004f53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8e3d  00000000  00000000  00056048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014ee85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019f0  00000000  00000000  0014eed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08001ea8 	.word	0x08001ea8

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08001ea8 	.word	0x08001ea8

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fa1b 	bl	8000672 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f82e 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f88e 	bl	8000360 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000244:	f000 f878 	bl	8000338 <MX_ICACHE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_7);
 8000248:	2180      	movs	r1, #128	; 0x80
 800024a:	4813      	ldr	r0, [pc, #76]	; (8000298 <main+0x64>)
 800024c:	f000 fd54 	bl	8000cf8 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000250:	2064      	movs	r0, #100	; 0x64
 8000252:	f000 fa85 	bl	8000760 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800025a:	480f      	ldr	r0, [pc, #60]	; (8000298 <main+0x64>)
 800025c:	f000 fd4c 	bl	8000cf8 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000260:	2064      	movs	r0, #100	; 0x64
 8000262:	f000 fa7d 	bl	8000760 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_9);
 8000266:	f44f 7100 	mov.w	r1, #512	; 0x200
 800026a:	480b      	ldr	r0, [pc, #44]	; (8000298 <main+0x64>)
 800026c:	f000 fd44 	bl	8000cf8 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000270:	2064      	movs	r0, #100	; 0x64
 8000272:	f000 fa75 	bl	8000760 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_10);
 8000276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800027a:	4807      	ldr	r0, [pc, #28]	; (8000298 <main+0x64>)
 800027c:	f000 fd3c 	bl	8000cf8 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000280:	2064      	movs	r0, #100	; 0x64
 8000282:	f000 fa6d 	bl	8000760 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_11);
 8000286:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800028a:	4803      	ldr	r0, [pc, #12]	; (8000298 <main+0x64>)
 800028c:	f000 fd34 	bl	8000cf8 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000290:	2064      	movs	r0, #100	; 0x64
 8000292:	f000 fa65 	bl	8000760 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_7);
 8000296:	e7d7      	b.n	8000248 <main+0x14>
 8000298:	42021000 	.word	0x42021000

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b098      	sub	sp, #96	; 0x60
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0318 	add.w	r3, r7, #24
 80002a6:	2248      	movs	r2, #72	; 0x48
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fdf4 	bl	8001e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80002be:	2000      	movs	r0, #0
 80002c0:	f000 fdb4 	bl	8000e2c <HAL_PWREx_ControlVoltageScaling>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x32>
  {
    Error_Handler();
 80002ca:	f000 f889 	bl	80003e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ce:	2301      	movs	r3, #1
 80002d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d8:	2302      	movs	r3, #2
 80002da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002dc:	2303      	movs	r3, #3
 80002de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 8;
 80002e0:	2308      	movs	r3, #8
 80002e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80002e4:	2337      	movs	r3, #55	; 0x37
 80002e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002e8:	2307      	movs	r3, #7
 80002ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ec:	2302      	movs	r3, #2
 80002ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002f0:	2302      	movs	r3, #2
 80002f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f4:	f107 0318 	add.w	r3, r7, #24
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fe17 	bl	8000f2c <HAL_RCC_OscConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000304:	f000 f86c 	bl	80003e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	230f      	movs	r3, #15
 800030a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030c:	2303      	movs	r3, #3
 800030e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2105      	movs	r1, #5
 8000320:	4618      	mov	r0, r3
 8000322:	f001 fad9 	bl	80018d8 <HAL_RCC_ClockConfig>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800032c:	f000 f858 	bl	80003e0 <Error_Handler>
  }
}
 8000330:	bf00      	nop
 8000332:	3760      	adds	r7, #96	; 0x60
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800033c:	2000      	movs	r0, #0
 800033e:	f000 fcf5 	bl	8000d2c <HAL_ICACHE_ConfigAssociativityMode>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000348:	f000 f84a 	bl	80003e0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800034c:	f000 fd0e 	bl	8000d6c <HAL_ICACHE_Enable>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000356:	f000 f843 	bl	80003e0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	f107 030c 	add.w	r3, r7, #12
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000376:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MX_GPIO_Init+0x78>)
 8000378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037a:	4a17      	ldr	r2, [pc, #92]	; (80003d8 <MX_GPIO_Init+0x78>)
 800037c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_GPIO_Init+0x78>)
 8000384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800038a:	60bb      	str	r3, [r7, #8]
 800038c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800038e:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_GPIO_Init+0x78>)
 8000390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000392:	4a11      	ldr	r2, [pc, #68]	; (80003d8 <MX_GPIO_Init+0x78>)
 8000394:	f043 0310 	orr.w	r3, r3, #16
 8000398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_GPIO_Init+0x78>)
 800039c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039e:	f003 0310 	and.w	r3, r3, #16
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 80003ac:	480b      	ldr	r0, [pc, #44]	; (80003dc <MX_GPIO_Init+0x7c>)
 80003ae:	f000 fc8b 	bl	8000cc8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80003b2:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 80003b6:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003c4:	f107 030c 	add.w	r3, r7, #12
 80003c8:	4619      	mov	r1, r3
 80003ca:	4804      	ldr	r0, [pc, #16]	; (80003dc <MX_GPIO_Init+0x7c>)
 80003cc:	f000 fafc 	bl	80009c8 <HAL_GPIO_Init>

}
 80003d0:	bf00      	nop
 80003d2:	3720      	adds	r7, #32
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40021000 	.word	0x40021000
 80003dc:	42021000 	.word	0x42021000

080003e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
}
 80003e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <Error_Handler+0x8>
	...

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <HAL_MspInit+0x50>)
 80003f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003f6:	4a11      	ldr	r2, [pc, #68]	; (800043c <HAL_MspInit+0x50>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6613      	str	r3, [r2, #96]	; 0x60
 80003fe:	4b0f      	ldr	r3, [pc, #60]	; (800043c <HAL_MspInit+0x50>)
 8000400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <HAL_MspInit+0x50>)
 800040c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800040e:	4a0b      	ldr	r2, [pc, #44]	; (800043c <HAL_MspInit+0x50>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000414:	6593      	str	r3, [r2, #88]	; 0x58
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <HAL_MspInit+0x50>)
 8000418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800041a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* ICACHE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ICACHE_IRQn, 0, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	2100      	movs	r1, #0
 8000426:	206b      	movs	r0, #107	; 0x6b
 8000428:	f000 fa99 	bl	800095e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ICACHE_IRQn);
 800042c:	206b      	movs	r0, #107	; 0x6b
 800042e:	f000 fab0 	bl	8000992 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000

08000440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <NMI_Handler+0x4>

08000446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800044a:	e7fe      	b.n	800044a <HardFault_Handler+0x4>

0800044c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000450:	e7fe      	b.n	8000450 <MemManage_Handler+0x4>

08000452 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000456:	e7fe      	b.n	8000456 <BusFault_Handler+0x4>

08000458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800045c:	e7fe      	b.n	800045c <UsageFault_Handler+0x4>

0800045e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr

0800046c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800047e:	bf00      	nop
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800048c:	f000 f948 	bl	8000720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}

08000494 <ICACHE_IRQHandler>:

/**
  * @brief This function handles Instruction cache global interrupt.
  */
void ICACHE_IRQHandler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_IRQn 0 */

  /* USER CODE END ICACHE_IRQn 0 */
  HAL_ICACHE_IRQHandler();
 8000498:	f000 fc78 	bl	8000d8c <HAL_ICACHE_IRQHandler>
  /* USER CODE BEGIN ICACHE_IRQn 1 */

  /* USER CODE END ICACHE_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}

080004a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <SystemInit+0x20>)
 80004a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004aa:	4a05      	ldr	r2, [pc, #20]	; (80004c0 <SystemInit+0x20>)
 80004ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	e000ed00 	.word	0xe000ed00

080004c4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b087      	sub	sp, #28
 80004c8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80004ca:	4b4f      	ldr	r3, [pc, #316]	; (8000608 <SystemCoreClockUpdate+0x144>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f003 0308 	and.w	r3, r3, #8
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d107      	bne.n	80004e6 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80004d6:	4b4c      	ldr	r3, [pc, #304]	; (8000608 <SystemCoreClockUpdate+0x144>)
 80004d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80004dc:	0a1b      	lsrs	r3, r3, #8
 80004de:	f003 030f 	and.w	r3, r3, #15
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	e005      	b.n	80004f2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80004e6:	4b48      	ldr	r3, [pc, #288]	; (8000608 <SystemCoreClockUpdate+0x144>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	091b      	lsrs	r3, r3, #4
 80004ec:	f003 030f 	and.w	r3, r3, #15
 80004f0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80004f2:	4a46      	ldr	r2, [pc, #280]	; (800060c <SystemCoreClockUpdate+0x148>)
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004fa:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80004fc:	4b42      	ldr	r3, [pc, #264]	; (8000608 <SystemCoreClockUpdate+0x144>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	f003 030c 	and.w	r3, r3, #12
 8000504:	2b0c      	cmp	r3, #12
 8000506:	d866      	bhi.n	80005d6 <SystemCoreClockUpdate+0x112>
 8000508:	a201      	add	r2, pc, #4	; (adr r2, 8000510 <SystemCoreClockUpdate+0x4c>)
 800050a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050e:	bf00      	nop
 8000510:	08000545 	.word	0x08000545
 8000514:	080005d7 	.word	0x080005d7
 8000518:	080005d7 	.word	0x080005d7
 800051c:	080005d7 	.word	0x080005d7
 8000520:	0800054d 	.word	0x0800054d
 8000524:	080005d7 	.word	0x080005d7
 8000528:	080005d7 	.word	0x080005d7
 800052c:	080005d7 	.word	0x080005d7
 8000530:	08000555 	.word	0x08000555
 8000534:	080005d7 	.word	0x080005d7
 8000538:	080005d7 	.word	0x080005d7
 800053c:	080005d7 	.word	0x080005d7
 8000540:	0800055d 	.word	0x0800055d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000544:	4a32      	ldr	r2, [pc, #200]	; (8000610 <SystemCoreClockUpdate+0x14c>)
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	6013      	str	r3, [r2, #0]
      break;
 800054a:	e048      	b.n	80005de <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800054c:	4b30      	ldr	r3, [pc, #192]	; (8000610 <SystemCoreClockUpdate+0x14c>)
 800054e:	4a31      	ldr	r2, [pc, #196]	; (8000614 <SystemCoreClockUpdate+0x150>)
 8000550:	601a      	str	r2, [r3, #0]
      break;
 8000552:	e044      	b.n	80005de <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000554:	4b2e      	ldr	r3, [pc, #184]	; (8000610 <SystemCoreClockUpdate+0x14c>)
 8000556:	4a30      	ldr	r2, [pc, #192]	; (8000618 <SystemCoreClockUpdate+0x154>)
 8000558:	601a      	str	r2, [r3, #0]
      break;
 800055a:	e040      	b.n	80005de <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800055c:	4b2a      	ldr	r3, [pc, #168]	; (8000608 <SystemCoreClockUpdate+0x144>)
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	f003 0303 	and.w	r3, r3, #3
 8000564:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000566:	4b28      	ldr	r3, [pc, #160]	; (8000608 <SystemCoreClockUpdate+0x144>)
 8000568:	68db      	ldr	r3, [r3, #12]
 800056a:	091b      	lsrs	r3, r3, #4
 800056c:	f003 030f 	and.w	r3, r3, #15
 8000570:	3301      	adds	r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2b02      	cmp	r3, #2
 8000578:	d003      	beq.n	8000582 <SystemCoreClockUpdate+0xbe>
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	2b03      	cmp	r3, #3
 800057e:	d006      	beq.n	800058e <SystemCoreClockUpdate+0xca>
 8000580:	e00b      	b.n	800059a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000582:	4a24      	ldr	r2, [pc, #144]	; (8000614 <SystemCoreClockUpdate+0x150>)
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	fbb2 f3f3 	udiv	r3, r2, r3
 800058a:	613b      	str	r3, [r7, #16]
          break;
 800058c:	e00b      	b.n	80005a6 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800058e:	4a22      	ldr	r2, [pc, #136]	; (8000618 <SystemCoreClockUpdate+0x154>)
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	fbb2 f3f3 	udiv	r3, r2, r3
 8000596:	613b      	str	r3, [r7, #16]
          break;
 8000598:	e005      	b.n	80005a6 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800059a:	697a      	ldr	r2, [r7, #20]
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a2:	613b      	str	r3, [r7, #16]
          break;
 80005a4:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80005a6:	4b18      	ldr	r3, [pc, #96]	; (8000608 <SystemCoreClockUpdate+0x144>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	0a1b      	lsrs	r3, r3, #8
 80005ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80005b0:	693b      	ldr	r3, [r7, #16]
 80005b2:	fb02 f303 	mul.w	r3, r2, r3
 80005b6:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <SystemCoreClockUpdate+0x144>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	0e5b      	lsrs	r3, r3, #25
 80005be:	f003 0303 	and.w	r3, r3, #3
 80005c2:	3301      	adds	r3, #1
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80005c8:	693a      	ldr	r2, [r7, #16]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d0:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <SystemCoreClockUpdate+0x14c>)
 80005d2:	6013      	str	r3, [r2, #0]
      break;
 80005d4:	e003      	b.n	80005de <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <SystemCoreClockUpdate+0x14c>)
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	6013      	str	r3, [r2, #0]
      break;
 80005dc:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <SystemCoreClockUpdate+0x144>)
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	091b      	lsrs	r3, r3, #4
 80005e4:	f003 030f 	and.w	r3, r3, #15
 80005e8:	4a0c      	ldr	r2, [pc, #48]	; (800061c <SystemCoreClockUpdate+0x158>)
 80005ea:	5cd3      	ldrb	r3, [r2, r3]
 80005ec:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <SystemCoreClockUpdate+0x14c>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	fa22 f303 	lsr.w	r3, r2, r3
 80005f8:	4a05      	ldr	r2, [pc, #20]	; (8000610 <SystemCoreClockUpdate+0x14c>)
 80005fa:	6013      	str	r3, [r2, #0]
}
 80005fc:	bf00      	nop
 80005fe:	371c      	adds	r7, #28
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	40021000 	.word	0x40021000
 800060c:	08001ed0 	.word	0x08001ed0
 8000610:	20000000 	.word	0x20000000
 8000614:	00f42400 	.word	0x00f42400
 8000618:	01e84800 	.word	0x01e84800
 800061c:	08001ec0 	.word	0x08001ec0

08000620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000658 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000624:	f7ff ff3c 	bl	80004a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000628:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800062a:	e003      	b.n	8000634 <LoopCopyDataInit>

0800062c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800062e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000630:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000632:	3104      	adds	r1, #4

08000634 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000634:	480a      	ldr	r0, [pc, #40]	; (8000660 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000638:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800063a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800063c:	d3f6      	bcc.n	800062c <CopyDataInit>
	ldr	r2, =_sbss
 800063e:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000640:	e002      	b.n	8000648 <LoopFillZerobss>

08000642 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000642:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000644:	f842 3b04 	str.w	r3, [r2], #4

08000648 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <LoopForever+0x16>)
	cmp	r2, r3
 800064a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800064c:	d3f9      	bcc.n	8000642 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800064e:	f001 fbff 	bl	8001e50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000652:	f7ff fdef 	bl	8000234 <main>

08000656 <LoopForever>:

LoopForever:
    b LoopForever
 8000656:	e7fe      	b.n	8000656 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000658:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800065c:	08001f18 	.word	0x08001f18
	ldr	r0, =_sdata
 8000660:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000664:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000668:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800066c:	2000002c 	.word	0x2000002c

08000670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000670:	e7fe      	b.n	8000670 <ADC1_2_IRQHandler>

08000672 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b082      	sub	sp, #8
 8000676:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000678:	2300      	movs	r3, #0
 800067a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800067c:	2004      	movs	r0, #4
 800067e:	f000 f963 	bl	8000948 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000682:	f7ff ff1f 	bl	80004c4 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000686:	2007      	movs	r0, #7
 8000688:	f000 f80e 	bl	80006a8 <HAL_InitTick>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d002      	beq.n	8000698 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000692:	2301      	movs	r3, #1
 8000694:	71fb      	strb	r3, [r7, #7]
 8000696:	e001      	b.n	800069c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000698:	f7ff fea8 	bl	80003ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800069c:	79fb      	ldrb	r3, [r7, #7]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <HAL_InitTick+0x6c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d023      	beq.n	8000704 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <HAL_InitTick+0x70>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <HAL_InitTick+0x6c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f96b 	bl	80009ae <HAL_SYSTICK_Config>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d10f      	bne.n	80006fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b07      	cmp	r3, #7
 80006e2:	d809      	bhi.n	80006f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e4:	2200      	movs	r2, #0
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	f04f 30ff 	mov.w	r0, #4294967295
 80006ec:	f000 f937 	bl	800095e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006f0:	4a0a      	ldr	r2, [pc, #40]	; (800071c <HAL_InitTick+0x74>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6013      	str	r3, [r2, #0]
 80006f6:	e007      	b.n	8000708 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006f8:	2301      	movs	r3, #1
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e004      	b.n	8000708 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	73fb      	strb	r3, [r7, #15]
 8000702:	e001      	b.n	8000708 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000704:	2301      	movs	r3, #1
 8000706:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000008 	.word	0x20000008
 8000718:	20000000 	.word	0x20000000
 800071c:	20000004 	.word	0x20000004

08000720 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_IncTick+0x20>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	461a      	mov	r2, r3
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_IncTick+0x24>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4413      	add	r3, r2
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <HAL_IncTick+0x24>)
 8000732:	6013      	str	r3, [r2, #0]
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000008 	.word	0x20000008
 8000744:	20000028 	.word	0x20000028

08000748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return uwTick;
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <HAL_GetTick+0x14>)
 800074e:	681b      	ldr	r3, [r3, #0]
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	20000028 	.word	0x20000028

08000760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000768:	f7ff ffee 	bl	8000748 <HAL_GetTick>
 800076c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000778:	d005      	beq.n	8000786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_Delay+0x44>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	4413      	add	r3, r2
 8000784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000786:	bf00      	nop
 8000788:	f7ff ffde 	bl	8000748 <HAL_GetTick>
 800078c:	4602      	mov	r2, r0
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	429a      	cmp	r2, r3
 8000796:	d8f7      	bhi.n	8000788 <HAL_Delay+0x28>
  {
  }
}
 8000798:	bf00      	nop
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000008 	.word	0x20000008

080007a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c4:	4013      	ands	r3, r2
 80007c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007da:	4a04      	ldr	r2, [pc, #16]	; (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	60d3      	str	r3, [r2, #12]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <__NVIC_GetPriorityGrouping+0x18>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	f003 0307 	and.w	r3, r3, #7
}
 80007fe:	4618      	mov	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	2b00      	cmp	r3, #0
 800081c:	db0b      	blt.n	8000836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 021f 	and.w	r2, r3, #31
 8000824:	4907      	ldr	r1, [pc, #28]	; (8000844 <__NVIC_EnableIRQ+0x38>)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	095b      	lsrs	r3, r3, #5
 800082c:	2001      	movs	r0, #1
 800082e:	fa00 f202 	lsl.w	r2, r0, r2
 8000832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100

08000848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	db0a      	blt.n	8000872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	b2da      	uxtb	r2, r3
 8000860:	490c      	ldr	r1, [pc, #48]	; (8000894 <__NVIC_SetPriority+0x4c>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	0152      	lsls	r2, r2, #5
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	440b      	add	r3, r1
 800086c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000870:	e00a      	b.n	8000888 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4908      	ldr	r1, [pc, #32]	; (8000898 <__NVIC_SetPriority+0x50>)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	3b04      	subs	r3, #4
 8000880:	0152      	lsls	r2, r2, #5
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	440b      	add	r3, r1
 8000886:	761a      	strb	r2, [r3, #24]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089c:	b480      	push	{r7}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f1c3 0307 	rsb	r3, r3, #7
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	bf28      	it	cs
 80008ba:	2303      	movcs	r3, #3
 80008bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3303      	adds	r3, #3
 80008c2:	2b06      	cmp	r3, #6
 80008c4:	d902      	bls.n	80008cc <NVIC_EncodePriority+0x30>
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3b04      	subs	r3, #4
 80008ca:	e000      	b.n	80008ce <NVIC_EncodePriority+0x32>
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	f04f 32ff 	mov.w	r2, #4294967295
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43da      	mvns	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	401a      	ands	r2, r3
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e4:	f04f 31ff 	mov.w	r1, #4294967295
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa01 f303 	lsl.w	r3, r1, r3
 80008ee:	43d9      	mvns	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	4313      	orrs	r3, r2
         );
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3724      	adds	r7, #36	; 0x24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
	...

08000904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000914:	d301      	bcc.n	800091a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000916:	2301      	movs	r3, #1
 8000918:	e00f      	b.n	800093a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <SysTick_Config+0x40>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000922:	2107      	movs	r1, #7
 8000924:	f04f 30ff 	mov.w	r0, #4294967295
 8000928:	f7ff ff8e 	bl	8000848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <SysTick_Config+0x40>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <SysTick_Config+0x40>)
 8000934:	2207      	movs	r2, #7
 8000936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	e000e010 	.word	0xe000e010

08000948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff29 	bl	80007a8 <__NVIC_SetPriorityGrouping>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	4603      	mov	r3, r0
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800096c:	f7ff ff40 	bl	80007f0 <__NVIC_GetPriorityGrouping>
 8000970:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	68b9      	ldr	r1, [r7, #8]
 8000976:	6978      	ldr	r0, [r7, #20]
 8000978:	f7ff ff90 	bl	800089c <NVIC_EncodePriority>
 800097c:	4602      	mov	r2, r0
 800097e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff5f 	bl	8000848 <__NVIC_SetPriority>
}
 800098a:	bf00      	nop
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	4603      	mov	r3, r0
 800099a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff33 	bl	800080c <__NVIC_EnableIRQ>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff ffa4 	bl	8000904 <SysTick_Config>
 80009bc:	4603      	mov	r3, r0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b087      	sub	sp, #28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80009d6:	e158      	b.n	8000c8a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	2101      	movs	r1, #1
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	fa01 f303 	lsl.w	r3, r1, r3
 80009e4:	4013      	ands	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f000 814a 	beq.w	8000c84 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f003 0303 	and.w	r3, r3, #3
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d005      	beq.n	8000a08 <HAL_GPIO_Init+0x40>
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f003 0303 	and.w	r3, r3, #3
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d130      	bne.n	8000a6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	2203      	movs	r2, #3
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	68da      	ldr	r2, [r3, #12]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a3e:	2201      	movs	r2, #1
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	091b      	lsrs	r3, r3, #4
 8000a54:	f003 0201 	and.w	r2, r3, #1
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f003 0303 	and.w	r3, r3, #3
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	d017      	beq.n	8000aa6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	2203      	movs	r2, #3
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f003 0303 	and.w	r3, r3, #3
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d123      	bne.n	8000afa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	08da      	lsrs	r2, r3, #3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3208      	adds	r2, #8
 8000aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000abe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	220f      	movs	r2, #15
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	691a      	ldr	r2, [r3, #16]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	f003 0307 	and.w	r3, r3, #7
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	08da      	lsrs	r2, r3, #3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3208      	adds	r2, #8
 8000af4:	6939      	ldr	r1, [r7, #16]
 8000af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	2203      	movs	r2, #3
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f003 0203 	and.w	r2, r3, #3
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f000 80a4 	beq.w	8000c84 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000b3c:	4a5a      	ldr	r2, [pc, #360]	; (8000ca8 <HAL_GPIO_Init+0x2e0>)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	089b      	lsrs	r3, r3, #2
 8000b42:	3318      	adds	r3, #24
 8000b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	f003 0303 	and.w	r3, r3, #3
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	220f      	movs	r2, #15
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a52      	ldr	r2, [pc, #328]	; (8000cac <HAL_GPIO_Init+0x2e4>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d025      	beq.n	8000bb4 <HAL_GPIO_Init+0x1ec>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a51      	ldr	r2, [pc, #324]	; (8000cb0 <HAL_GPIO_Init+0x2e8>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d01f      	beq.n	8000bb0 <HAL_GPIO_Init+0x1e8>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a50      	ldr	r2, [pc, #320]	; (8000cb4 <HAL_GPIO_Init+0x2ec>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d019      	beq.n	8000bac <HAL_GPIO_Init+0x1e4>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a4f      	ldr	r2, [pc, #316]	; (8000cb8 <HAL_GPIO_Init+0x2f0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d013      	beq.n	8000ba8 <HAL_GPIO_Init+0x1e0>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a4e      	ldr	r2, [pc, #312]	; (8000cbc <HAL_GPIO_Init+0x2f4>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d00d      	beq.n	8000ba4 <HAL_GPIO_Init+0x1dc>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a4d      	ldr	r2, [pc, #308]	; (8000cc0 <HAL_GPIO_Init+0x2f8>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d007      	beq.n	8000ba0 <HAL_GPIO_Init+0x1d8>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a4c      	ldr	r2, [pc, #304]	; (8000cc4 <HAL_GPIO_Init+0x2fc>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d101      	bne.n	8000b9c <HAL_GPIO_Init+0x1d4>
 8000b98:	2306      	movs	r3, #6
 8000b9a:	e00c      	b.n	8000bb6 <HAL_GPIO_Init+0x1ee>
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	e00a      	b.n	8000bb6 <HAL_GPIO_Init+0x1ee>
 8000ba0:	2305      	movs	r3, #5
 8000ba2:	e008      	b.n	8000bb6 <HAL_GPIO_Init+0x1ee>
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	e006      	b.n	8000bb6 <HAL_GPIO_Init+0x1ee>
 8000ba8:	2303      	movs	r3, #3
 8000baa:	e004      	b.n	8000bb6 <HAL_GPIO_Init+0x1ee>
 8000bac:	2302      	movs	r3, #2
 8000bae:	e002      	b.n	8000bb6 <HAL_GPIO_Init+0x1ee>
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e000      	b.n	8000bb6 <HAL_GPIO_Init+0x1ee>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	f002 0203 	and.w	r2, r2, #3
 8000bbc:	00d2      	lsls	r2, r2, #3
 8000bbe:	4093      	lsls	r3, r2
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000bc6:	4938      	ldr	r1, [pc, #224]	; (8000ca8 <HAL_GPIO_Init+0x2e0>)
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	089b      	lsrs	r3, r3, #2
 8000bcc:	3318      	adds	r3, #24
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bd4:	4b34      	ldr	r3, [pc, #208]	; (8000ca8 <HAL_GPIO_Init+0x2e0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4013      	ands	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bf8:	4a2b      	ldr	r2, [pc, #172]	; (8000ca8 <HAL_GPIO_Init+0x2e0>)
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <HAL_GPIO_Init+0x2e0>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c22:	4a21      	ldr	r2, [pc, #132]	; (8000ca8 <HAL_GPIO_Init+0x2e0>)
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <HAL_GPIO_Init+0x2e0>)
 8000c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c4e:	4a16      	ldr	r2, [pc, #88]	; (8000ca8 <HAL_GPIO_Init+0x2e0>)
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <HAL_GPIO_Init+0x2e0>)
 8000c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	43db      	mvns	r3, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <HAL_GPIO_Init+0x2e0>)
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	3301      	adds	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	fa22 f303 	lsr.w	r3, r2, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	f47f ae9f 	bne.w	80009d8 <HAL_GPIO_Init+0x10>
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	bf00      	nop
 8000c9e:	371c      	adds	r7, #28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	4002f400 	.word	0x4002f400
 8000cac:	42020000 	.word	0x42020000
 8000cb0:	42020400 	.word	0x42020400
 8000cb4:	42020800 	.word	0x42020800
 8000cb8:	42020c00 	.word	0x42020c00
 8000cbc:	42021000 	.word	0x42021000
 8000cc0:	42021400 	.word	0x42021400
 8000cc4:	42021800 	.word	0x42021800

08000cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	807b      	strh	r3, [r7, #2]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cd8:	787b      	ldrb	r3, [r7, #1]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cde:	887a      	ldrh	r2, [r7, #2]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ce4:	e002      	b.n	8000cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ce6:	887a      	ldrh	r2, [r7, #2]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d0a:	887a      	ldrh	r2, [r7, #2]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	041a      	lsls	r2, r3, #16
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	43d9      	mvns	r1, r3
 8000d16:	887b      	ldrh	r3, [r7, #2]
 8000d18:	400b      	ands	r3, r1
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	619a      	str	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d002      	beq.n	8000d4a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e007      	b.n	8000d5a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f023 0204 	bic.w	r2, r3, #4
 8000d52:	4905      	ldr	r1, [pc, #20]	; (8000d68 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	40030400 	.word	0x40030400

08000d6c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_ICACHE_Enable+0x1c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_ICACHE_Enable+0x1c>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	40030400 	.word	0x40030400

08000d8c <HAL_ICACHE_IRQHandler>:
  * @note This function respectively disables the interrupt and clears the
  *       flag of any pending flag before calling the associated user callback.
  * @retval None
  */
void HAL_ICACHE_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  /* Get current interrupt flags and interrupt sources value */
  uint32_t itflags   = READ_REG(ICACHE->SR);
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <HAL_ICACHE_IRQHandler+0x64>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	607b      	str	r3, [r7, #4]
  uint32_t itsources = READ_REG(ICACHE->IER);
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <HAL_ICACHE_IRQHandler+0x64>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	603b      	str	r3, [r7, #0]

  /* Check Instruction cache Error interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_ERROR) != 0U)
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	4013      	ands	r3, r2
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d00a      	beq.n	8000dc2 <HAL_ICACHE_IRQHandler+0x36>
  {
    /* Disable error interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_ERRIE);
 8000dac:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <HAL_ICACHE_IRQHandler+0x64>)
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <HAL_ICACHE_IRQHandler+0x64>)
 8000db2:	f023 0304 	bic.w	r3, r3, #4
 8000db6:	6093      	str	r3, [r2, #8]

    /* Clear ERR pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CERRF);
 8000db8:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <HAL_ICACHE_IRQHandler+0x64>)
 8000dba:	2204      	movs	r2, #4
 8000dbc:	60da      	str	r2, [r3, #12]

    /* Instruction cache error interrupt user callback */
    HAL_ICACHE_ErrorCallback();
 8000dbe:	f000 f820 	bl	8000e02 <HAL_ICACHE_ErrorCallback>
  }

  /* Check Instruction cache BusyEnd interrupt flag */
  if (((itflags & itsources) & ICACHE_FLAG_BUSYEND) != 0U)
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d00a      	beq.n	8000de6 <HAL_ICACHE_IRQHandler+0x5a>
  {
    /* Disable end of cache invalidation interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_BSYENDIE);
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <HAL_ICACHE_IRQHandler+0x64>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <HAL_ICACHE_IRQHandler+0x64>)
 8000dd6:	f023 0302 	bic.w	r3, r3, #2
 8000dda:	6093      	str	r3, [r2, #8]

    /* Clear BSYENDF pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <HAL_ICACHE_IRQHandler+0x64>)
 8000dde:	2202      	movs	r2, #2
 8000de0:	60da      	str	r2, [r3, #12]

    /* Instruction cache busyend interrupt user callback */
    HAL_ICACHE_InvalidateCompleteCallback();
 8000de2:	f000 f807 	bl	8000df4 <HAL_ICACHE_InvalidateCompleteCallback>
  }
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40030400 	.word	0x40030400

08000df4 <HAL_ICACHE_InvalidateCompleteCallback>:

/**
  * @brief  Cache invalidation complete callback.
  */
__weak void HAL_ICACHE_InvalidateCompleteCallback(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <HAL_ICACHE_ErrorCallback>:

/**
  * @brief  Error callback.
  */
__weak void HAL_ICACHE_ErrorCallback(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_ErrorCallback() should be implemented in the user file
   */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40007000 	.word	0x40007000

08000e2c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8000e34:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e3c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8000e3e:	f000 f851 	bl	8000ee4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e48:	d101      	bne.n	8000e4e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e03e      	b.n	8000ecc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8000e4e:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e5a:	d101      	bne.n	8000e60 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e035      	b.n	8000ecc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000e60:	68ba      	ldr	r2, [r7, #8]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d101      	bne.n	8000e6c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	e02f      	b.n	8000ecc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000e74:	4917      	ldr	r1, [pc, #92]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	095b      	lsrs	r3, r3, #5
 8000e82:	4a16      	ldr	r2, [pc, #88]	; (8000edc <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000e84:	fba2 2303 	umull	r2, r3, r2, r3
 8000e88:	09db      	lsrs	r3, r3, #7
 8000e8a:	2232      	movs	r2, #50	; 0x32
 8000e8c:	fb02 f303 	mul.w	r3, r2, r3
 8000e90:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	08db      	lsrs	r3, r3, #3
 8000e98:	3301      	adds	r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e9c:	e002      	b.n	8000ea4 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eb0:	d102      	bne.n	8000eb8 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1f2      	bne.n	8000e9e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ec4:	d101      	bne.n	8000eca <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e000      	b.n	8000ecc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40007000 	.word	0x40007000
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	0a7c5ac5 	.word	0x0a7c5ac5
 8000ee0:	cccccccd 	.word	0xcccccccd

08000ee4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8000efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	e00a      	b.n	8000f18 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d103      	bne.n	8000f14 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8000f0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	e001      	b.n	8000f18 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8000f18:	687b      	ldr	r3, [r7, #4]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40007000 	.word	0x40007000

08000f2c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d102      	bne.n	8000f40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	f000 bcc2 	b.w	80018c4 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f40:	4b99      	ldr	r3, [pc, #612]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f003 030c 	and.w	r3, r3, #12
 8000f48:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f4a:	4b97      	ldr	r3, [pc, #604]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0310 	and.w	r3, r3, #16
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f000 80e9 	beq.w	8001134 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d006      	beq.n	8000f76 <HAL_RCC_OscConfig+0x4a>
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2b0c      	cmp	r3, #12
 8000f6c:	f040 8083 	bne.w	8001076 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d17f      	bne.n	8001076 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f76:	4b8c      	ldr	r3, [pc, #560]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d006      	beq.n	8000f90 <HAL_RCC_OscConfig+0x64>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d102      	bne.n	8000f90 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	f000 bc9a 	b.w	80018c4 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f94:	4b84      	ldr	r3, [pc, #528]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0308 	and.w	r3, r3, #8
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d004      	beq.n	8000faa <HAL_RCC_OscConfig+0x7e>
 8000fa0:	4b81      	ldr	r3, [pc, #516]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fa8:	e005      	b.n	8000fb6 <HAL_RCC_OscConfig+0x8a>
 8000faa:	4b7f      	ldr	r3, [pc, #508]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8000fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fb0:	091b      	lsrs	r3, r3, #4
 8000fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d224      	bcs.n	8001004 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fe74 	bl	8001cac <RCC_SetFlashLatencyFromMSIRange>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	f000 bc7a 	b.w	80018c4 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fd0:	4b75      	ldr	r3, [pc, #468]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a74      	ldr	r2, [pc, #464]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8000fd6:	f043 0308 	orr.w	r3, r3, #8
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b72      	ldr	r3, [pc, #456]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	496f      	ldr	r1, [pc, #444]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8000fea:	4313      	orrs	r3, r2
 8000fec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fee:	4b6e      	ldr	r3, [pc, #440]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	496a      	ldr	r1, [pc, #424]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	604b      	str	r3, [r1, #4]
 8001002:	e026      	b.n	8001052 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001004:	4b68      	ldr	r3, [pc, #416]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a67      	ldr	r2, [pc, #412]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	4b65      	ldr	r3, [pc, #404]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101c:	4962      	ldr	r1, [pc, #392]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 800101e:	4313      	orrs	r3, r2
 8001020:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001022:	4b61      	ldr	r3, [pc, #388]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	495d      	ldr	r1, [pc, #372]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8001032:	4313      	orrs	r3, r2
 8001034:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10a      	bne.n	8001052 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fe33 	bl	8001cac <RCC_SetFlashLatencyFromMSIRange>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	f000 bc39 	b.w	80018c4 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001052:	f000 fe17 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001056:	4603      	mov	r3, r0
 8001058:	4a54      	ldr	r2, [pc, #336]	; (80011ac <HAL_RCC_OscConfig+0x280>)
 800105a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800105c:	4b54      	ldr	r3, [pc, #336]	; (80011b0 <HAL_RCC_OscConfig+0x284>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fb21 	bl	80006a8 <HAL_InitTick>
 8001066:	4603      	mov	r3, r0
 8001068:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d060      	beq.n	8001132 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	f000 bc27 	b.w	80018c4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d039      	beq.n	80010f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800107e:	4b4a      	ldr	r3, [pc, #296]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a49      	ldr	r2, [pc, #292]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800108a:	f7ff fb5d 	bl	8000748 <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001090:	e00f      	b.n	80010b2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001092:	f7ff fb59 	bl	8000748 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d908      	bls.n	80010b2 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010a0:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	f000 bc09 	b.w	80018c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010b2:	4b3d      	ldr	r3, [pc, #244]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0e9      	beq.n	8001092 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010be:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a39      	ldr	r2, [pc, #228]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 80010c4:	f043 0308 	orr.w	r3, r3, #8
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	4b37      	ldr	r3, [pc, #220]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d6:	4934      	ldr	r1, [pc, #208]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 80010d8:	4313      	orrs	r3, r2
 80010da:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010dc:	4b32      	ldr	r3, [pc, #200]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	492f      	ldr	r1, [pc, #188]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	604b      	str	r3, [r1, #4]
 80010f0:	e020      	b.n	8001134 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010f2:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a2c      	ldr	r2, [pc, #176]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 80010f8:	f023 0301 	bic.w	r3, r3, #1
 80010fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010fe:	f7ff fb23 	bl	8000748 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001104:	e00e      	b.n	8001124 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001106:	f7ff fb1f 	bl	8000748 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d907      	bls.n	8001124 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e3cf      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1ea      	bne.n	8001106 <HAL_RCC_OscConfig+0x1da>
 8001130:	e000      	b.n	8001134 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001132:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d07e      	beq.n	800123e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	2b08      	cmp	r3, #8
 8001144:	d005      	beq.n	8001152 <HAL_RCC_OscConfig+0x226>
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2b0c      	cmp	r3, #12
 800114a:	d10e      	bne.n	800116a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d10b      	bne.n	800116a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d06e      	beq.n	800123c <HAL_RCC_OscConfig+0x310>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d16a      	bne.n	800123c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e3ac      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001172:	d106      	bne.n	8001182 <HAL_RCC_OscConfig+0x256>
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 800117a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	e024      	b.n	80011cc <HAL_RCC_OscConfig+0x2a0>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800118a:	d113      	bne.n	80011b4 <HAL_RCC_OscConfig+0x288>
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 8001192:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a02      	ldr	r2, [pc, #8]	; (80011a8 <HAL_RCC_OscConfig+0x27c>)
 800119e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	e012      	b.n	80011cc <HAL_RCC_OscConfig+0x2a0>
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20000004 	.word	0x20000004
 80011b4:	4b8b      	ldr	r3, [pc, #556]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a8a      	ldr	r2, [pc, #552]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 80011ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b88      	ldr	r3, [pc, #544]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a87      	ldr	r2, [pc, #540]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 80011c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d019      	beq.n	8001208 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d4:	f7ff fab8 	bl	8000748 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011da:	e00e      	b.n	80011fa <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011dc:	f7ff fab4 	bl	8000748 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b64      	cmp	r3, #100	; 0x64
 80011e8:	d907      	bls.n	80011fa <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ea:	4b7e      	ldr	r3, [pc, #504]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e364      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011fa:	4b7a      	ldr	r3, [pc, #488]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0ea      	beq.n	80011dc <HAL_RCC_OscConfig+0x2b0>
 8001206:	e01a      	b.n	800123e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001208:	f7ff fa9e 	bl	8000748 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800120e:	e00e      	b.n	800122e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001210:	f7ff fa9a 	bl	8000748 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b64      	cmp	r3, #100	; 0x64
 800121c:	d907      	bls.n	800122e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800121e:	4b71      	ldr	r3, [pc, #452]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e34a      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800122e:	4b6d      	ldr	r3, [pc, #436]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1ea      	bne.n	8001210 <HAL_RCC_OscConfig+0x2e4>
 800123a:	e000      	b.n	800123e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d06c      	beq.n	8001324 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	2b04      	cmp	r3, #4
 800124e:	d005      	beq.n	800125c <HAL_RCC_OscConfig+0x330>
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	2b0c      	cmp	r3, #12
 8001254:	d119      	bne.n	800128a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d116      	bne.n	800128a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800125c:	4b61      	ldr	r3, [pc, #388]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <HAL_RCC_OscConfig+0x348>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e327      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001274:	4b5b      	ldr	r3, [pc, #364]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	061b      	lsls	r3, r3, #24
 8001282:	4958      	ldr	r1, [pc, #352]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 8001284:	4313      	orrs	r3, r2
 8001286:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001288:	e04c      	b.n	8001324 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d029      	beq.n	80012e6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001292:	4b54      	ldr	r3, [pc, #336]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a53      	ldr	r2, [pc, #332]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 8001298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129e:	f7ff fa53 	bl	8000748 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012a4:	e00e      	b.n	80012c4 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a6:	f7ff fa4f 	bl	8000748 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d907      	bls.n	80012c4 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012b4:	4b4b      	ldr	r3, [pc, #300]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e2ff      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012c4:	4b47      	ldr	r3, [pc, #284]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0ea      	beq.n	80012a6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d0:	4b44      	ldr	r3, [pc, #272]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	061b      	lsls	r3, r3, #24
 80012de:	4941      	ldr	r1, [pc, #260]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
 80012e4:	e01e      	b.n	8001324 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e6:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a3e      	ldr	r2, [pc, #248]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 80012ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f2:	f7ff fa29 	bl	8000748 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012f8:	e00e      	b.n	8001318 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fa:	f7ff fa25 	bl	8000748 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d907      	bls.n	8001318 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001308:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e2d5      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001318:	4b32      	ldr	r3, [pc, #200]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1ea      	bne.n	80012fa <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b00      	cmp	r3, #0
 800132e:	d062      	beq.n	80013f6 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d038      	beq.n	80013aa <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d108      	bne.n	8001352 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 8001342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001346:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 8001348:	f023 0310 	bic.w	r3, r3, #16
 800134c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001350:	e007      	b.n	8001362 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 8001354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001358:	4a22      	ldr	r2, [pc, #136]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 800135a:	f043 0310 	orr.w	r3, r3, #16
 800135e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 8001364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001368:	4a1e      	ldr	r2, [pc, #120]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001372:	f7ff f9e9 	bl	8000748 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001378:	e00f      	b.n	800139a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800137a:	f7ff f9e5 	bl	8000748 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b07      	cmp	r3, #7
 8001386:	d908      	bls.n	800139a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 800138a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e294      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 800139c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0e8      	beq.n	800137a <HAL_RCC_OscConfig+0x44e>
 80013a8:	e025      	b.n	80013f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 80013ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013b0:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ba:	f7ff f9c5 	bl	8000748 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013c0:	e012      	b.n	80013e8 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c2:	f7ff f9c1 	bl	8000748 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b07      	cmp	r3, #7
 80013ce:	d90b      	bls.n	80013e8 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <HAL_RCC_OscConfig+0x4b8>)
 80013d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d004      	beq.n	80013e8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e270      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013e8:	4ba8      	ldr	r3, [pc, #672]	; (800168c <HAL_RCC_OscConfig+0x760>)
 80013ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1e5      	bne.n	80013c2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 812d 	beq.w	800165e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001408:	4ba0      	ldr	r3, [pc, #640]	; (800168c <HAL_RCC_OscConfig+0x760>)
 800140a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10d      	bne.n	8001430 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001414:	4b9d      	ldr	r3, [pc, #628]	; (800168c <HAL_RCC_OscConfig+0x760>)
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	4a9c      	ldr	r2, [pc, #624]	; (800168c <HAL_RCC_OscConfig+0x760>)
 800141a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141e:	6593      	str	r3, [r2, #88]	; 0x58
 8001420:	4b9a      	ldr	r3, [pc, #616]	; (800168c <HAL_RCC_OscConfig+0x760>)
 8001422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800142c:	2301      	movs	r3, #1
 800142e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001430:	4b97      	ldr	r3, [pc, #604]	; (8001690 <HAL_RCC_OscConfig+0x764>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001438:	2b00      	cmp	r3, #0
 800143a:	d11e      	bne.n	800147a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800143c:	4b94      	ldr	r3, [pc, #592]	; (8001690 <HAL_RCC_OscConfig+0x764>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a93      	ldr	r2, [pc, #588]	; (8001690 <HAL_RCC_OscConfig+0x764>)
 8001442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001446:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001448:	f7ff f97e 	bl	8000748 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800144e:	e00e      	b.n	800146e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001450:	f7ff f97a 	bl	8000748 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d907      	bls.n	800146e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800145e:	4b8c      	ldr	r3, [pc, #560]	; (8001690 <HAL_RCC_OscConfig+0x764>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e22a      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800146e:	4b88      	ldr	r3, [pc, #544]	; (8001690 <HAL_RCC_OscConfig+0x764>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0ea      	beq.n	8001450 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d01f      	beq.n	80014c6 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	d010      	beq.n	80014b4 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001492:	4b7e      	ldr	r3, [pc, #504]	; (800168c <HAL_RCC_OscConfig+0x760>)
 8001494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001498:	4a7c      	ldr	r2, [pc, #496]	; (800168c <HAL_RCC_OscConfig+0x760>)
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80014a2:	4b7a      	ldr	r3, [pc, #488]	; (800168c <HAL_RCC_OscConfig+0x760>)
 80014a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a8:	4a78      	ldr	r2, [pc, #480]	; (800168c <HAL_RCC_OscConfig+0x760>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014b2:	e018      	b.n	80014e6 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80014b4:	4b75      	ldr	r3, [pc, #468]	; (800168c <HAL_RCC_OscConfig+0x760>)
 80014b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ba:	4a74      	ldr	r2, [pc, #464]	; (800168c <HAL_RCC_OscConfig+0x760>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014c4:	e00f      	b.n	80014e6 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80014c6:	4b71      	ldr	r3, [pc, #452]	; (800168c <HAL_RCC_OscConfig+0x760>)
 80014c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014cc:	4a6f      	ldr	r2, [pc, #444]	; (800168c <HAL_RCC_OscConfig+0x760>)
 80014ce:	f023 0301 	bic.w	r3, r3, #1
 80014d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80014d6:	4b6d      	ldr	r3, [pc, #436]	; (800168c <HAL_RCC_OscConfig+0x760>)
 80014d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014dc:	4a6b      	ldr	r2, [pc, #428]	; (800168c <HAL_RCC_OscConfig+0x760>)
 80014de:	f023 0304 	bic.w	r3, r3, #4
 80014e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d068      	beq.n	80015c0 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ee:	f7ff f92b 	bl	8000748 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014f4:	e011      	b.n	800151a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f6:	f7ff f927 	bl	8000748 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	f241 3288 	movw	r2, #5000	; 0x1388
 8001504:	4293      	cmp	r3, r2
 8001506:	d908      	bls.n	800151a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001508:	4b60      	ldr	r3, [pc, #384]	; (800168c <HAL_RCC_OscConfig+0x760>)
 800150a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e1d4      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800151a:	4b5c      	ldr	r3, [pc, #368]	; (800168c <HAL_RCC_OscConfig+0x760>)
 800151c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0e6      	beq.n	80014f6 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001530:	2b00      	cmp	r3, #0
 8001532:	d022      	beq.n	800157a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001534:	4b55      	ldr	r3, [pc, #340]	; (800168c <HAL_RCC_OscConfig+0x760>)
 8001536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153a:	4a54      	ldr	r2, [pc, #336]	; (800168c <HAL_RCC_OscConfig+0x760>)
 800153c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001544:	e011      	b.n	800156a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001546:	f7ff f8ff 	bl	8000748 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	f241 3288 	movw	r2, #5000	; 0x1388
 8001554:	4293      	cmp	r3, r2
 8001556:	d908      	bls.n	800156a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001558:	4b4c      	ldr	r3, [pc, #304]	; (800168c <HAL_RCC_OscConfig+0x760>)
 800155a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800155e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1ac      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800156a:	4b48      	ldr	r3, [pc, #288]	; (800168c <HAL_RCC_OscConfig+0x760>)
 800156c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0e6      	beq.n	8001546 <HAL_RCC_OscConfig+0x61a>
 8001578:	e068      	b.n	800164c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800157a:	4b44      	ldr	r3, [pc, #272]	; (800168c <HAL_RCC_OscConfig+0x760>)
 800157c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001580:	4a42      	ldr	r2, [pc, #264]	; (800168c <HAL_RCC_OscConfig+0x760>)
 8001582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001586:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800158a:	e011      	b.n	80015b0 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158c:	f7ff f8dc 	bl	8000748 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	f241 3288 	movw	r2, #5000	; 0x1388
 800159a:	4293      	cmp	r3, r2
 800159c:	d908      	bls.n	80015b0 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800159e:	4b3b      	ldr	r3, [pc, #236]	; (800168c <HAL_RCC_OscConfig+0x760>)
 80015a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e189      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80015b0:	4b36      	ldr	r3, [pc, #216]	; (800168c <HAL_RCC_OscConfig+0x760>)
 80015b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1e6      	bne.n	800158c <HAL_RCC_OscConfig+0x660>
 80015be:	e045      	b.n	800164c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c0:	f7ff f8c2 	bl	8000748 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015c6:	e011      	b.n	80015ec <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c8:	f7ff f8be 	bl	8000748 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d908      	bls.n	80015ec <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015da:	4b2c      	ldr	r3, [pc, #176]	; (800168c <HAL_RCC_OscConfig+0x760>)
 80015dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e16b      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015ec:	4b27      	ldr	r3, [pc, #156]	; (800168c <HAL_RCC_OscConfig+0x760>)
 80015ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1e6      	bne.n	80015c8 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80015fa:	4b24      	ldr	r3, [pc, #144]	; (800168c <HAL_RCC_OscConfig+0x760>)
 80015fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001604:	2b00      	cmp	r3, #0
 8001606:	d021      	beq.n	800164c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001608:	4b20      	ldr	r3, [pc, #128]	; (800168c <HAL_RCC_OscConfig+0x760>)
 800160a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800160e:	4a1f      	ldr	r2, [pc, #124]	; (800168c <HAL_RCC_OscConfig+0x760>)
 8001610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001618:	e011      	b.n	800163e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161a:	f7ff f895 	bl	8000748 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f241 3288 	movw	r2, #5000	; 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d908      	bls.n	800163e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800162c:	4b17      	ldr	r3, [pc, #92]	; (800168c <HAL_RCC_OscConfig+0x760>)
 800162e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e142      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800163e:	4b13      	ldr	r3, [pc, #76]	; (800168c <HAL_RCC_OscConfig+0x760>)
 8001640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1e6      	bne.n	800161a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800164c:	7ffb      	ldrb	r3, [r7, #31]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d105      	bne.n	800165e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_RCC_OscConfig+0x760>)
 8001654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001656:	4a0d      	ldr	r2, [pc, #52]	; (800168c <HAL_RCC_OscConfig+0x760>)
 8001658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800165c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0320 	and.w	r3, r3, #32
 8001666:	2b00      	cmp	r3, #0
 8001668:	d04f      	beq.n	800170a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	2b00      	cmp	r3, #0
 8001670:	d028      	beq.n	80016c4 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_RCC_OscConfig+0x760>)
 8001674:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <HAL_RCC_OscConfig+0x760>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001682:	f7ff f861 	bl	8000748 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001688:	e014      	b.n	80016b4 <HAL_RCC_OscConfig+0x788>
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000
 8001690:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001694:	f7ff f858 	bl	8000748 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d908      	bls.n	80016b4 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016a2:	4b8a      	ldr	r3, [pc, #552]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 80016a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e107      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016b4:	4b85      	ldr	r3, [pc, #532]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 80016b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0e8      	beq.n	8001694 <HAL_RCC_OscConfig+0x768>
 80016c2:	e022      	b.n	800170a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016c4:	4b81      	ldr	r3, [pc, #516]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 80016c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016ca:	4a80      	ldr	r2, [pc, #512]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 80016cc:	f023 0301 	bic.w	r3, r3, #1
 80016d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7ff f838 	bl	8000748 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016da:	e00f      	b.n	80016fc <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016dc:	f7ff f834 	bl	8000748 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d908      	bls.n	80016fc <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016ea:	4b78      	ldr	r3, [pc, #480]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 80016ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e0e3      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016fc:	4b73      	ldr	r3, [pc, #460]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 80016fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1e8      	bne.n	80016dc <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 80d7 	beq.w	80018c2 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001714:	4b6d      	ldr	r3, [pc, #436]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	2b0c      	cmp	r3, #12
 800171e:	f000 8091 	beq.w	8001844 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	2b02      	cmp	r3, #2
 8001728:	d166      	bne.n	80017f8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172a:	4b68      	ldr	r3, [pc, #416]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a67      	ldr	r2, [pc, #412]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 8001730:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001736:	f7ff f807 	bl	8000748 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800173c:	e00e      	b.n	800175c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173e:	f7ff f803 	bl	8000748 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d907      	bls.n	800175c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800174c:	4b5f      	ldr	r3, [pc, #380]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e0b3      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800175c:	4b5b      	ldr	r3, [pc, #364]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1ea      	bne.n	800173e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001768:	4b58      	ldr	r3, [pc, #352]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	4b58      	ldr	r3, [pc, #352]	; (80018d0 <HAL_RCC_OscConfig+0x9a4>)
 800176e:	4013      	ands	r3, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001778:	3a01      	subs	r2, #1
 800177a:	0112      	lsls	r2, r2, #4
 800177c:	4311      	orrs	r1, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001782:	0212      	lsls	r2, r2, #8
 8001784:	4311      	orrs	r1, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800178a:	0852      	lsrs	r2, r2, #1
 800178c:	3a01      	subs	r2, #1
 800178e:	0552      	lsls	r2, r2, #21
 8001790:	4311      	orrs	r1, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001796:	0852      	lsrs	r2, r2, #1
 8001798:	3a01      	subs	r2, #1
 800179a:	0652      	lsls	r2, r2, #25
 800179c:	4311      	orrs	r1, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017a2:	06d2      	lsls	r2, r2, #27
 80017a4:	430a      	orrs	r2, r1
 80017a6:	4949      	ldr	r1, [pc, #292]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ac:	4b47      	ldr	r3, [pc, #284]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a46      	ldr	r2, [pc, #280]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 80017b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017b8:	4b44      	ldr	r3, [pc, #272]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4a43      	ldr	r2, [pc, #268]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 80017be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7fe ffc0 	bl	8000748 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ca:	e00e      	b.n	80017ea <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017cc:	f7fe ffbc 	bl	8000748 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d907      	bls.n	80017ea <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017da:	4b3c      	ldr	r3, [pc, #240]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e06c      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ea:	4b38      	ldr	r3, [pc, #224]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0ea      	beq.n	80017cc <HAL_RCC_OscConfig+0x8a0>
 80017f6:	e064      	b.n	80018c2 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f8:	4b34      	ldr	r3, [pc, #208]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a33      	ldr	r2, [pc, #204]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 80017fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001804:	f7fe ffa0 	bl	8000748 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800180a:	e00e      	b.n	800182a <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180c:	f7fe ff9c 	bl	8000748 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d907      	bls.n	800182a <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800181a:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e04c      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800182a:	4b28      	ldr	r3, [pc, #160]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1ea      	bne.n	800180c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001836:	4b25      	ldr	r3, [pc, #148]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	4924      	ldr	r1, [pc, #144]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 800183c:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <HAL_RCC_OscConfig+0x9a8>)
 800183e:	4013      	ands	r3, r2
 8001840:	60cb      	str	r3, [r1, #12]
 8001842:	e03e      	b.n	80018c2 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e039      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001850:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <HAL_RCC_OscConfig+0x9a0>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f003 0203 	and.w	r2, r3, #3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	429a      	cmp	r2, r3
 8001862:	d12c      	bne.n	80018be <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186e:	3b01      	subs	r3, #1
 8001870:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d123      	bne.n	80018be <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001880:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001882:	429a      	cmp	r2, r3
 8001884:	d11b      	bne.n	80018be <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001890:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001892:	429a      	cmp	r2, r3
 8001894:	d113      	bne.n	80018be <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	085b      	lsrs	r3, r3, #1
 80018a2:	3b01      	subs	r3, #1
 80018a4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d109      	bne.n	80018be <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b4:	085b      	lsrs	r3, r3, #1
 80018b6:	3b01      	subs	r3, #1
 80018b8:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d001      	beq.n	80018c2 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3720      	adds	r7, #32
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40021000 	.word	0x40021000
 80018d0:	019f800c 	.word	0x019f800c
 80018d4:	feeefffc 	.word	0xfeeefffc

080018d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e11c      	b.n	8001b2a <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018f0:	4b90      	ldr	r3, [pc, #576]	; (8001b34 <HAL_RCC_ClockConfig+0x25c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d910      	bls.n	8001920 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fe:	4b8d      	ldr	r3, [pc, #564]	; (8001b34 <HAL_RCC_ClockConfig+0x25c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 020f 	bic.w	r2, r3, #15
 8001906:	498b      	ldr	r1, [pc, #556]	; (8001b34 <HAL_RCC_ClockConfig+0x25c>)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	4b89      	ldr	r3, [pc, #548]	; (8001b34 <HAL_RCC_ClockConfig+0x25c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e104      	b.n	8001b2a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d010      	beq.n	800194e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	4b81      	ldr	r3, [pc, #516]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001938:	429a      	cmp	r2, r3
 800193a:	d908      	bls.n	800194e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800193c:	4b7e      	ldr	r3, [pc, #504]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	497b      	ldr	r1, [pc, #492]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 800194a:	4313      	orrs	r3, r2
 800194c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 8085 	beq.w	8001a66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d11f      	bne.n	80019a4 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001964:	4b74      	ldr	r3, [pc, #464]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0da      	b.n	8001b2a <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001974:	f000 f9fe 	bl	8001d74 <RCC_GetSysClockFreqFromPLLSource>
 8001978:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4a6f      	ldr	r2, [pc, #444]	; (8001b3c <HAL_RCC_ClockConfig+0x264>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d947      	bls.n	8001a12 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001982:	4b6d      	ldr	r3, [pc, #436]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d141      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800198e:	4b6a      	ldr	r3, [pc, #424]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001996:	4a68      	ldr	r2, [pc, #416]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800199c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e036      	b.n	8001a12 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d107      	bne.n	80019bc <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ac:	4b62      	ldr	r3, [pc, #392]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d115      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0b6      	b.n	8001b2a <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d107      	bne.n	80019d4 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019c4:	4b5c      	ldr	r3, [pc, #368]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d109      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0aa      	b.n	8001b2a <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d4:	4b58      	ldr	r3, [pc, #352]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0a2      	b.n	8001b2a <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80019e4:	f000 f8b0 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 80019e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4a53      	ldr	r2, [pc, #332]	; (8001b3c <HAL_RCC_ClockConfig+0x264>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d90f      	bls.n	8001a12 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80019f2:	4b51      	ldr	r3, [pc, #324]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d109      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019fe:	4b4e      	ldr	r3, [pc, #312]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a06:	4a4c      	ldr	r2, [pc, #304]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a12:	4b49      	ldr	r3, [pc, #292]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f023 0203 	bic.w	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4946      	ldr	r1, [pc, #280]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a24:	f7fe fe90 	bl	8000748 <HAL_GetTick>
 8001a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2a:	e013      	b.n	8001a54 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2c:	f7fe fe8c 	bl	8000748 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d90a      	bls.n	8001a54 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	4b3e      	ldr	r3, [pc, #248]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 020c 	and.w	r2, r3, #12
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e06a      	b.n	8001b2a <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a54:	4b38      	ldr	r3, [pc, #224]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 020c 	and.w	r2, r3, #12
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d1e2      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2b80      	cmp	r3, #128	; 0x80
 8001a6a:	d105      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a6c:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	4a31      	ldr	r2, [pc, #196]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001a72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a76:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d010      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d208      	bcs.n	8001aa6 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a94:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	4925      	ldr	r1, [pc, #148]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa6:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <HAL_RCC_ClockConfig+0x25c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d210      	bcs.n	8001ad6 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <HAL_RCC_ClockConfig+0x25c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f023 020f 	bic.w	r2, r3, #15
 8001abc:	491d      	ldr	r1, [pc, #116]	; (8001b34 <HAL_RCC_ClockConfig+0x25c>)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <HAL_RCC_ClockConfig+0x25c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d001      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e029      	b.n	8001b2a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d008      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	4912      	ldr	r1, [pc, #72]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d009      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	490a      	ldr	r1, [pc, #40]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b14:	f000 f8b6 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4a09      	ldr	r2, [pc, #36]	; (8001b40 <HAL_RCC_ClockConfig+0x268>)
 8001b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_RCC_ClockConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fdc0 	bl	80006a8 <HAL_InitTick>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40022000 	.word	0x40022000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	04c4b400 	.word	0x04c4b400
 8001b40:	20000000 	.word	0x20000000
 8001b44:	20000004 	.word	0x20000004

08001b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	; 0x24
 8001b4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b56:	4b47      	ldr	r3, [pc, #284]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b60:	4b44      	ldr	r3, [pc, #272]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_GetSysClockFreq+0x34>
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	2b0c      	cmp	r3, #12
 8001b74:	d121      	bne.n	8001bba <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d11e      	bne.n	8001bba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b7c:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d107      	bne.n	8001b98 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b88:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8e:	0a1b      	lsrs	r3, r3, #8
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	61fb      	str	r3, [r7, #28]
 8001b96:	e005      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b98:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8001ba4:	4a34      	ldr	r2, [pc, #208]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x130>)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bac:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10d      	bne.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d102      	bne.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bc0:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x134>)
 8001bc2:	61bb      	str	r3, [r7, #24]
 8001bc4:	e004      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bcc:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	2b0c      	cmp	r3, #12
 8001bd4:	d146      	bne.n	8001c64 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001bd6:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001be0:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3301      	adds	r3, #1
 8001bec:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d003      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0xb4>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d00d      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0xce>
 8001bfa:	e019      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bfc:	4a1f      	ldr	r2, [pc, #124]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x134>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c04:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001c06:	68d2      	ldr	r2, [r2, #12]
 8001c08:	0a12      	lsrs	r2, r2, #8
 8001c0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	617b      	str	r3, [r7, #20]
        break;
 8001c14:	e019      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c16:	4a1a      	ldr	r2, [pc, #104]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1e:	4a15      	ldr	r2, [pc, #84]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001c20:	68d2      	ldr	r2, [r2, #12]
 8001c22:	0a12      	lsrs	r2, r2, #8
 8001c24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c28:	fb02 f303 	mul.w	r3, r2, r3
 8001c2c:	617b      	str	r3, [r7, #20]
        break;
 8001c2e:	e00c      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c30:	69fa      	ldr	r2, [r7, #28]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c38:	4a0e      	ldr	r2, [pc, #56]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001c3a:	68d2      	ldr	r2, [r2, #12]
 8001c3c:	0a12      	lsrs	r2, r2, #8
 8001c3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
        break;
 8001c48:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	0e5b      	lsrs	r3, r3, #25
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	3301      	adds	r3, #1
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c64:	69bb      	ldr	r3, [r7, #24]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08001ed0 	.word	0x08001ed0
 8001c7c:	00f42400 	.word	0x00f42400
 8001c80:	01e84800 	.word	0x01e84800

08001c84 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8001c88:	f7ff ff5e 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_RCC_GetHCLKFreq+0x20>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	4903      	ldr	r1, [pc, #12]	; (8001ca8 <HAL_RCC_GetHCLKFreq+0x24>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	08001ec0 	.word	0x08001ec0

08001cac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cb8:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cc4:	f7ff f8a4 	bl	8000e10 <HAL_PWREx_GetVoltageRange>
 8001cc8:	6138      	str	r0, [r7, #16]
 8001cca:	e014      	b.n	8001cf6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ccc:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd0:	4a26      	ldr	r2, [pc, #152]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ce4:	f7ff f894 	bl	8000e10 <HAL_PWREx_GetVoltageRange>
 8001ce8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cea:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	4a1f      	ldr	r2, [pc, #124]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d02:	d10b      	bne.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b80      	cmp	r3, #128	; 0x80
 8001d08:	d919      	bls.n	8001d3e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2ba0      	cmp	r3, #160	; 0xa0
 8001d0e:	d902      	bls.n	8001d16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d10:	2302      	movs	r3, #2
 8001d12:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001d14:	e013      	b.n	8001d3e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d16:	2301      	movs	r3, #1
 8001d18:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001d1a:	e010      	b.n	8001d3e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b80      	cmp	r3, #128	; 0x80
 8001d20:	d902      	bls.n	8001d28 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d22:	2303      	movs	r3, #3
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	e00a      	b.n	8001d3e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b80      	cmp	r3, #128	; 0x80
 8001d2c:	d102      	bne.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d2e:	2302      	movs	r3, #2
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	e004      	b.n	8001d3e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b70      	cmp	r3, #112	; 0x70
 8001d38:	d101      	bne.n	8001d3e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f023 020f 	bic.w	r2, r3, #15
 8001d46:	490a      	ldr	r1, [pc, #40]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40022000 	.word	0x40022000

08001d74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d7a:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d84:	4b2e      	ldr	r3, [pc, #184]	; (8001e40 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3301      	adds	r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d015      	beq.n	8001dc4 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d839      	bhi.n	8001e12 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d01c      	beq.n	8001dde <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d133      	bne.n	8001e12 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001daa:	4a26      	ldr	r2, [pc, #152]	; (8001e44 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db2:	4a23      	ldr	r2, [pc, #140]	; (8001e40 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001db4:	68d2      	ldr	r2, [r2, #12]
 8001db6:	0a12      	lsrs	r2, r2, #8
 8001db8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dbc:	fb02 f303 	mul.w	r3, r2, r3
 8001dc0:	613b      	str	r3, [r7, #16]
      break;
 8001dc2:	e029      	b.n	8001e18 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dc4:	4a20      	ldr	r2, [pc, #128]	; (8001e48 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dcc:	4a1c      	ldr	r2, [pc, #112]	; (8001e40 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001dce:	68d2      	ldr	r2, [r2, #12]
 8001dd0:	0a12      	lsrs	r2, r2, #8
 8001dd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	613b      	str	r3, [r7, #16]
      break;
 8001ddc:	e01c      	b.n	8001e18 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d107      	bne.n	8001dfa <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	e005      	b.n	8001e06 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8001e06:	4a11      	ldr	r2, [pc, #68]	; (8001e4c <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0e:	613b      	str	r3, [r7, #16]
        break;
 8001e10:	e002      	b.n	8001e18 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
      break;
 8001e16:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0e5b      	lsrs	r3, r3, #25
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	3301      	adds	r3, #1
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001e32:	683b      	ldr	r3, [r7, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	371c      	adds	r7, #28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	40021000 	.word	0x40021000
 8001e44:	00f42400 	.word	0x00f42400
 8001e48:	01e84800 	.word	0x01e84800
 8001e4c:	08001ed0 	.word	0x08001ed0

08001e50 <__libc_init_array>:
 8001e50:	b570      	push	{r4, r5, r6, lr}
 8001e52:	4d0d      	ldr	r5, [pc, #52]	; (8001e88 <__libc_init_array+0x38>)
 8001e54:	2600      	movs	r6, #0
 8001e56:	4c0d      	ldr	r4, [pc, #52]	; (8001e8c <__libc_init_array+0x3c>)
 8001e58:	1b64      	subs	r4, r4, r5
 8001e5a:	10a4      	asrs	r4, r4, #2
 8001e5c:	42a6      	cmp	r6, r4
 8001e5e:	d109      	bne.n	8001e74 <__libc_init_array+0x24>
 8001e60:	4d0b      	ldr	r5, [pc, #44]	; (8001e90 <__libc_init_array+0x40>)
 8001e62:	2600      	movs	r6, #0
 8001e64:	4c0b      	ldr	r4, [pc, #44]	; (8001e94 <__libc_init_array+0x44>)
 8001e66:	f000 f81f 	bl	8001ea8 <_init>
 8001e6a:	1b64      	subs	r4, r4, r5
 8001e6c:	10a4      	asrs	r4, r4, #2
 8001e6e:	42a6      	cmp	r6, r4
 8001e70:	d105      	bne.n	8001e7e <__libc_init_array+0x2e>
 8001e72:	bd70      	pop	{r4, r5, r6, pc}
 8001e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e78:	3601      	adds	r6, #1
 8001e7a:	4798      	blx	r3
 8001e7c:	e7ee      	b.n	8001e5c <__libc_init_array+0xc>
 8001e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e82:	3601      	adds	r6, #1
 8001e84:	4798      	blx	r3
 8001e86:	e7f2      	b.n	8001e6e <__libc_init_array+0x1e>
 8001e88:	08001f10 	.word	0x08001f10
 8001e8c:	08001f10 	.word	0x08001f10
 8001e90:	08001f10 	.word	0x08001f10
 8001e94:	08001f14 	.word	0x08001f14

08001e98 <memset>:
 8001e98:	4402      	add	r2, r0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d100      	bne.n	8001ea2 <memset+0xa>
 8001ea0:	4770      	bx	lr
 8001ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ea6:	e7f9      	b.n	8001e9c <memset+0x4>

08001ea8 <_init>:
 8001ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eaa:	bf00      	nop
 8001eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eae:	bc08      	pop	{r3}
 8001eb0:	469e      	mov	lr, r3
 8001eb2:	4770      	bx	lr

08001eb4 <_fini>:
 8001eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb6:	bf00      	nop
 8001eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eba:	bc08      	pop	{r3}
 8001ebc:	469e      	mov	lr, r3
 8001ebe:	4770      	bx	lr
